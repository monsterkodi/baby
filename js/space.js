// koffee 1.6.0

/*
 0000000  00000000    0000000    0000000  00000000
000       000   000  000   000  000       000     
0000000   00000000   000000000  000       0000000 
     000  000        000   000  000       000     
0000000   000        000   000   0000000  00000000
 */
var Color3, Dimension, Mesh, Space, StandardMaterial, deg2rad, generate, klog, random, ref, ref1, vec;

ref = require('babylonjs'), Color3 = ref.Color3, Mesh = ref.Mesh, Space = ref.Space, StandardMaterial = ref.StandardMaterial;

ref1 = require('kxk'), deg2rad = ref1.deg2rad, klog = ref1.klog;

random = Math.random;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Dimension = require('./dimension');

Space = (function() {
    function Space(world) {
        var i, inst, j, k, l, p, poly, ref2, s;
        this.world = world;
        this.scene = this.world.scene;
        this.dimension = new Dimension(this.world, 10000);
        this.lower = [];
        for (i = j = 0; j < 8; i = ++j) {
            this.lower.push(new Dimension(this.world, 100, vec(200 * (i % 2), 200 * ((i >> 1) % 2), 200 * ((i >> 2) % 2))));
            this.lower.slice(-1)[0].name = "lower_" + i;
        }
        if (0) {
            poly = generate('h0.1jgD', true);
            poly.colorize('signature');
            p = Mesh.CreatePolyhedron(poly.name, {
                custom: poly
            }, this.scene);
            this.scene.showFaces(p, poly);
            p.material = new StandardMaterial;
            p.material.diffuseColor = new Color3(0, 0, 0.1);
            for (i = k = 0; k < 10; i = ++k) {
                inst = p.createInstance(poly.name + "_" + i);
                s = 40 + i * 40;
                inst.scaling = vec(s, s, s);
                inst.rotate(vec(0, 1, 0), deg2rad(random() * 180));
                inst.rotate(vec(1, 0, 0), deg2rad(random() * 180));
                if ((ref2 = this.scene.shadowGenerator) != null) {
                    ref2.addShadowCaster(inst);
                }
            }
        }
        if (0) {
            poly = generate('h0.6O', true);
            poly.colorize('signature');
            p = Mesh.CreatePolyhedron(poly.name, {
                custom: poly
            }, this.scene);
            this.scene.showFaces(p, poly);
            for (i = l = 0; l < 100; i = ++l) {
                inst = p.createInstance(poly.name + "_" + i);
                s = (1 + random() * 3) * .1;
                inst.scaling = vec(s, s, s);
                inst.position.x = (random() - 0.5) * 20;
                inst.position.z = (random() - 0.5) * 20;
                inst.position.y = (random()) * 5;
                inst.rotate(vec(0, 1, 0), random());
            }
        }
    }

    Space.prototype.render = function() {
        var campos, i, j, k, l, len, len1, lower, offset, oldDistance, ref2, ref3, results, swapDist;
        campos = vec(this.world.camera.position);
        oldDistance = this.distance;
        swapDist = 5000;
        this.distance = campos.length();
        this.distFactor = this.distance / swapDist;
        if (this.distance >= swapDist) {
            if (oldDistance < swapDist) {
                klog('distance', this.distance, 'distFactor', this.distFactor, 'lower', this.lower.length);
                ref2 = this.lower;
                for (j = 0, len = ref2.length; j < len; j++) {
                    lower = ref2[j];
                    lower.del();
                }
                this.dimension.scaleDown();
                this.world.camera.scaleDown();
                this.distance *= 0.01;
                this.distFactor = this.distance / swapDist;
                klog('newDistance', this.distance, this.world.camera.position.length());
                this.lower = [this.dimension];
                return this.dimension = new Dimension(this.world, swapDist);
            }
        } else {
            this.lower.sort(function(a, b) {
                return campos.to(a.position).length() - campos.to(b.position).length();
            });
            this.distance = campos.to(this.lower[0].position).length();
            this.distFactor = this.distance / swapDist;
            if (this.distance < 50 && oldDistance > 50) {
                klog('distance', this.distance, 'distFactor', this.distFactor, 'lower', this.lower[0].name);
                this.dimension.del();
                this.dimension = this.lower.shift();
                ref3 = this.lower;
                for (k = 0, len1 = ref3.length; k < len1; k++) {
                    lower = ref3[k];
                    lower.del();
                }
                offset = vec(this.dimension.position);
                this.dimension.scaleUp(offset);
                this.world.camera.scaleUp(offset);
                this.distance *= 100;
                this.distFactor = this.distance / swapDist;
                klog('newDistance', this.distance, this.world.camera.position.length());
                this.lower = [];
                results = [];
                for (i = l = 0; l < 4; i = ++l) {
                    this.lower.push(new Dimension(this.world, 100, vec(200 * (i % 2), 200 * ((i >> 1) % 2), 200 * ((i >> 2) % 2))));
                    results.push(this.lower.slice(-1)[0].name = "lower_" + i);
                }
                return results;
            }
        }
    };

    return Space;

})();

module.exports = Space;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/space.coffee