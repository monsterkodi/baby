// koffee 1.6.0

/*
 0000000  00000000    0000000    0000000  00000000
000       000   000  000   000  000       000     
0000000   00000000   000000000  000       0000000 
     000  000        000   000  000       000     
0000000   000        000   000   0000000  00000000
 */
var Dimension, Space, generate, klog, random, vec;

Space = require('babylonjs').Space;

klog = require('kxk').klog;

random = Math.random;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Dimension = require('./dimension');

Space = (function() {
    function Space(world) {
        var i, j, k;
        this.world = world;
        this.scene = this.world.scene;
        this.higher = [];
        for (i = j = 0; j < 8; i = ++j) {
            this.higher.push(new Dimension(this.world, 10000, vec(20000 * (i % 2), 20000 * ((i >> 1) % 2), 20000 * ((i >> 2) % 2))));
            this.higher.slice(-1)[0].name = "higher_" + i;
        }
        this.lower = [];
        for (i = k = 0; k < 8; i = ++k) {
            this.lower.push(new Dimension(this.world, 100, vec(200 * (i % 2), 200 * ((i >> 1) % 2), 200 * ((i >> 2) % 2))));
            this.lower.slice(-1)[0].name = "lower_" + i;
        }
    }

    Space.prototype.render = function() {
        var campos, higher, i, j, k, l, len, len1, len2, len3, lower, m, n, o, offset, oldDistance, ref, ref1, ref2, ref3, results, results1, swapDist;
        campos = vec(this.world.camera.position);
        oldDistance = this.distance;
        swapDist = 19000;
        this.distance = campos.length();
        this.distFactor = this.distance / swapDist;
        klog('distance', this.distance);
        if (this.distance >= swapDist) {
            if (oldDistance < swapDist) {
                ref = this.lower;
                for (j = 0, len = ref.length; j < len; j++) {
                    lower = ref[j];
                    lower.del();
                }
                ref1 = this.higher;
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                    higher = ref1[k];
                    higher.scaleDown();
                }
                this.lower = this.higher;
                this.world.camera.scaleDown();
                this.distance *= 0.01;
                this.distFactor = this.distance / swapDist;
                klog('newDistance', this.distance, this.world.camera.position.length());
                this.higher = [];
                results = [];
                for (i = l = 0; l < 8; i = ++l) {
                    this.higher.push(new Dimension(this.world, 10000, vec(20000 * (i % 2), 20000 * ((i >> 1) % 2), 20000 * ((i >> 2) % 2))));
                    results.push(this.higher.slice(-1)[0].name = "higher_" + i);
                }
                return results;
            }
        } else {
            this.lower.sort(function(a, b) {
                return campos.to(a.position).length() - campos.to(b.position).length();
            });
            this.distance = campos.to(this.lower[0].position).length();
            this.distFactor = this.distance / swapDist;
            if (this.distance < swapDist / 100 && oldDistance > swapDist / 100) {
                offset = vec(this.lower[0].position);
                ref2 = this.higher;
                for (m = 0, len2 = ref2.length; m < len2; m++) {
                    higher = ref2[m];
                    higher.del();
                }
                ref3 = this.lower;
                for (n = 0, len3 = ref3.length; n < len3; n++) {
                    lower = ref3[n];
                    lower.scaleUp(offset);
                }
                this.higher = this.lower;
                this.world.camera.scaleUp(offset);
                this.distance *= 100;
                this.distFactor = this.distance / swapDist;
                klog('newDistance', this.distance, this.world.camera.position.length());
                this.lower = [];
                results1 = [];
                for (i = o = 0; o < 4; i = ++o) {
                    this.lower.push(new Dimension(this.world, 1, vec(2 * (i % 2), 2 * ((i >> 1) % 2), 2 * ((i >> 2) % 2))));
                    results1.push(this.lower.slice(-1)[0].name = "lower_" + i);
                }
                return results1;
            }
        }
    };

    return Space;

})();

module.exports = Space;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/space.coffee