// koffee 1.6.0

/*
 0000000  00000000    0000000    0000000  00000000
000       000   000  000   000  000       000     
0000000   00000000   000000000  000       0000000 
     000  000        000   000  000       000     
0000000   000        000   000   0000000  00000000
 */
var Dimension, Space, TransformNode, generate, klog, random, ref, vec;

ref = require('babylonjs'), Space = ref.Space, TransformNode = ref.TransformNode;

klog = require('kxk').klog;

random = Math.random;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Dimension = require('./dimension');

Space = (function() {
    function Space(world) {
        var d, dim, i, j, len, ref1, sz;
        this.world = world;
        this.scene = this.world.scene;
        this.dimstack = [];
        for (d = i = 0; i <= 2; d = ++i) {
            this.dimstack.push(new TransformNode('trans', this.scene, true));
            sz = (d === 2) && 10000 || 0.01;
            this.dimstack.slice(-1)[0].scaling.copyFromFloats(sz, sz, sz);
            ref1 = this.newDims();
            for (j = 0, len = ref1.length; j < len; j++) {
                dim = ref1[j];
                dim.parent = this.dimstack.slice(-1)[0];
            }
        }
    }

    Space.prototype.newDims = function() {
        var dims;
        dims = [];
        dims.push(new Dimension(this.world, 1, vec()));
        dims.push(new Dimension(this.world, 1, vec(2, 0, 0)));
        dims.push(new Dimension(this.world, 1, vec(0, 2, 0)));
        dims.push(new Dimension(this.world, 1, vec(0, 0, 2)));
        dims.push(new Dimension(this.world, 1, vec(-2, 0, 0)));
        dims.push(new Dimension(this.world, 1, vec(0, -2, 0)));
        dims.push(new Dimension(this.world, 1, vec(0, 0, -2)));
        return dims;
    };

    Space.prototype.render = function() {
        var campos, dim, hig2ctr, higer, high, i, j, k, l, len, len1, len2, len3, low, lower, mid2ctr, midle, oldDistance, ref1, ref2, ref3, ref4, swapDist, sz, trans0, trans2;
        swapDist = 40000;
        campos = vec(this.world.camera.position);
        oldDistance = this.distance;
        higer = this.dimstack[2].getChildren();
        higer.sort(function(a, b) {
            return campos.to(a.getAbsolutePosition()).length() - campos.to(b.getAbsolutePosition()).length();
        });
        this.dimstack[1].parent = higer[0];
        this.dimstack[1].markAsDirty();
        midle = this.dimstack[1].getChildren();
        midle.sort(function(a, b) {
            return campos.to(a.getAbsolutePosition()).length() - campos.to(b.getAbsolutePosition()).length();
        });
        this.dimstack[0].parent = midle[0];
        this.dimstack[0].markAsDirty();
        lower = this.dimstack[0].getChildren();
        lower.sort(function(a, b) {
            return campos.to(a.getAbsolutePosition()).length() - campos.to(b.getAbsolutePosition()).length();
        });
        this.distance = campos.to(lower[0].getAbsolutePosition()).length();
        this.distFactor = this.distance / swapDist;
        if (this.distance >= swapDist) {
            if (oldDistance < swapDist) {
                hig2ctr = vec(higer[0].getAbsolutePosition()).to(this.world.camera.center);
                ref1 = this.dimstack[0];
                for (i = 0, len = ref1.length; i < len; i++) {
                    low = ref1[i];
                    low.del();
                }
                this.dimstack[0].dispose();
                sz = 0.01;
                this.dimstack[2].scaling.copyFromFloats(sz, sz, sz);
                trans2 = new TransformNode('trans', this.scene, true);
                sz = 10000;
                trans2.scaling.copyFromFloats(sz, sz, sz);
                ref2 = this.newDims();
                for (j = 0, len1 = ref2.length; j < len1; j++) {
                    dim = ref2[j];
                    dim.parent = trans2;
                }
                this.dimstack.shift();
                this.dimstack.push(trans2);
                this.dimstack[1].parent = trans2.getChildren()[0];
                this.world.camera.dist *= 0.01;
                this.world.camera.center = vec(higer[0].getAbsolutePosition().add(hig2ctr.mul(0.01)));
                this.world.camera.navigate();
                this.distance *= 0.01;
                return this.distFactor = this.distance / swapDist;
            }
        } else if (this.distance < swapDist / 100 && oldDistance > swapDist / 100) {
            mid2ctr = vec(midle[0].getAbsolutePosition()).to(this.world.camera.center);
            this.dimstack[1].parent = null;
            ref3 = this.dimstack[2];
            for (k = 0, len2 = ref3.length; k < len2; k++) {
                high = ref3[k];
                high.del();
            }
            this.dimstack[2].dispose();
            sz = 10000;
            this.dimstack[1].scaling.copyFromFloats(sz, sz, sz);
            trans0 = new TransformNode('trans', this.scene, true);
            sz = 0.01;
            trans0.scaling.copyFromFloats(sz, sz, sz);
            ref4 = this.newDims();
            for (l = 0, len3 = ref4.length; l < len3; l++) {
                dim = ref4[l];
                dim.parent = trans0;
            }
            this.dimstack.pop();
            this.dimstack.unshift(trans0);
            this.world.camera.dist *= 100;
            this.world.camera.center = vec(midle[0].getAbsolutePosition().add(mid2ctr.mul(100)));
            this.world.camera.navigate();
            this.distance *= 100;
            return this.distFactor = this.distance / swapDist;
        }
    };

    return Space;

})();

module.exports = Space;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhY2UuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBOztBQVFBLE1BQTJCLE9BQUEsQ0FBUSxXQUFSLENBQTNCLEVBQUUsaUJBQUYsRUFBUzs7QUFDUCxPQUFTLE9BQUEsQ0FBUSxLQUFSOztBQUNULFNBQVc7O0FBQ1gsTUFBUSxPQUFBLENBQVEsYUFBUjs7QUFDVixRQUFBLEdBQVcsT0FBQSxDQUFRLGlCQUFSOztBQUNYLFNBQUEsR0FBWSxPQUFBLENBQVEsYUFBUjs7QUFFTjtJQUVDLGVBQUMsS0FBRDtBQUVDLFlBQUE7UUFGQSxJQUFDLENBQUEsUUFBRDtRQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQztRQUNoQixJQUFDLENBQUEsUUFBRCxHQUFZO0FBRVosYUFBUywwQkFBVDtZQUNJLElBQUMsQ0FBQSxRQUFRLENBQUMsSUFBVixDQUFlLElBQUksYUFBSixDQUFrQixPQUFsQixFQUEwQixJQUFDLENBQUEsS0FBM0IsRUFBa0MsSUFBbEMsQ0FBZjtZQUNBLEVBQUEsR0FBTSxDQUFDLENBQUEsS0FBSyxDQUFOLENBQUEsSUFBYSxLQUFiLElBQXNCO1lBQzVCLElBQUMsQ0FBQSxRQUFTLFVBQUUsQ0FBQSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBdEIsQ0FBcUMsRUFBckMsRUFBeUMsRUFBekMsRUFBNkMsRUFBN0M7QUFDQTtBQUFBLGlCQUFBLHNDQUFBOztnQkFDSSxHQUFHLENBQUMsTUFBSixHQUFhLElBQUMsQ0FBQSxRQUFTLFVBQUUsQ0FBQSxDQUFBO0FBRDdCO0FBSko7SUFMRDs7b0JBWUgsT0FBQSxHQUFTLFNBQUE7QUFFTCxZQUFBO1FBQUEsSUFBQSxHQUFPO1FBQ1AsSUFBSSxDQUFDLElBQUwsQ0FBVSxJQUFJLFNBQUosQ0FBYyxJQUFDLENBQUEsS0FBZixFQUFzQixDQUF0QixFQUF5QixHQUFBLENBQUEsQ0FB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QUFDLE9BQU8sQ0FBQyxjQUFyQixDQUFvQyxFQUFwQyxFQUF3QyxFQUF4QyxFQUE0QyxFQUE1QztZQUVBLE1BQUEsR0FBUyxJQUFJLGFBQUosQ0FBa0IsT0FBbEIsRUFBMEIsSUFBQyxDQUFBLEtBQTNCLEVBQWtDLElBQWxDO1lBRVQsRUFBQSxHQUFLO1lBQ0wsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFmLENBQThCLEVBQTlCLEVBQWtDLEVBQWxDLEVBQXNDLEVBQXRDO0FBRUE7QUFBQSxpQkFBQSx3Q0FBQTs7Z0JBQ0ksR0FBRyxDQUFDLE1BQUosR0FBYTtBQURqQjtZQUdBLElBQUMsQ0FBQSxRQUFRLENBQUMsR0FBVixDQUFBO1lBQ0EsSUFBQyxDQUFBLFFBQVEsQ0FBQyxPQUFWLENBQWtCLE1BQWxCO1lBRUEsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBZCxJQUFzQjtZQUN0QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFkLEdBQXVCLEdBQUEsQ0FBSSxLQUFNLENBQUEsQ0FBQSxDQUFFLENBQUMsbUJBQVQsQ0FBQSxDQUE4QixDQUFDLEdBQS9CLENBQW1DLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWixDQUFuQyxDQUFKO1lBQ3ZCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQWQsQ0FBQTtZQUVBLElBQUMsQ0FBQSxRQUFELElBQWE7bUJBQ2IsSUFBQyxDQUFBLFVBQUQsR0FBYyxJQUFDLENBQUEsUUFBRCxHQUFZLFNBL0I3Qjs7SUExREQ7Ozs7OztBQTRGWixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMDAwMDAwICAgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDBcbjAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgICAgXG4wMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwIFxuICAgICAwMDAgIDAwMCAgICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICBcbjAwMDAwMDAgICAwMDAgICAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwXG4jIyNcblxueyBTcGFjZSwgVHJhbnNmb3JtTm9kZSB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xueyBrbG9nIH0gPSByZXF1aXJlICdreGsnXG57IHJhbmRvbSB9ID0gTWF0aFxueyB2ZWMgfSA9IHJlcXVpcmUgJy4vcG9seS9tYXRoJ1xuZ2VuZXJhdGUgPSByZXF1aXJlICcuL3BvbHkvZ2VuZXJhdGUnXG5EaW1lbnNpb24gPSByZXF1aXJlICcuL2RpbWVuc2lvbidcblxuY2xhc3MgU3BhY2VcblxuICAgIEA6IChAd29ybGQpIC0+XG5cbiAgICAgICAgQHNjZW5lID0gQHdvcmxkLnNjZW5lXG4gICAgICAgIEBkaW1zdGFjayA9IFtdXG4gICAgICAgIFxuICAgICAgICBmb3IgZCBpbiBbMC4uMl1cbiAgICAgICAgICAgIEBkaW1zdGFjay5wdXNoIG5ldyBUcmFuc2Zvcm1Ob2RlICd0cmFucycgQHNjZW5lLCB0cnVlXG4gICAgICAgICAgICBzeiA9ICgoZCA9PSAyKSBhbmQgMTAwMDAgb3IgMC4wMSlcbiAgICAgICAgICAgIEBkaW1zdGFja1stMV0uc2NhbGluZy5jb3B5RnJvbUZsb2F0cyBzeiwgc3osIHN6XG4gICAgICAgICAgICBmb3IgZGltIGluIEBuZXdEaW1zKClcbiAgICAgICAgICAgICAgICBkaW0ucGFyZW50ID0gQGRpbXN0YWNrWy0xXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIG5ld0RpbXM6IC0+XG4gICAgICAgIFxuICAgICAgICBkaW1zID0gW11cbiAgICAgICAgZGltcy5wdXNoIG5ldyBEaW1lbnNpb24gQHdvcmxkLCAxLCB2ZWMoKVxuICAgICAgICBkaW1zLnB1c2ggbmV3IERpbWVuc2lvbiBAd29ybGQsIDEsIHZlYyAyIDAgMFxuICAgICAgICBkaW1zLnB1c2ggbmV3IERpbWVuc2lvbiBAd29ybGQsIDEsIHZlYyAwIDIgMFxuICAgICAgICBkaW1zLnB1c2ggbmV3IERpbWVuc2lvbiBAd29ybGQsIDEsIHZlYyAwIDAgMlxuICAgICAgICBkaW1zLnB1c2ggbmV3IERpbWVuc2lvbiBAd29ybGQsIDEsIHZlYyAtMiAwIDBcbiAgICAgICAgZGltcy5wdXNoIG5ldyBEaW1lbnNpb24gQHdvcmxkLCAxLCB2ZWMgMCAtMiAwXG4gICAgICAgIGRpbXMucHVzaCBuZXcgRGltZW5zaW9uIEB3b3JsZCwgMSwgdmVjIDAgMCAtMlxuICAgICAgICBkaW1zICAgICAgICBcbiAgICAgICAgXG4gICAgcmVuZGVyOiAtPlxuICAgICAgICBcbiAgICAgICAgc3dhcERpc3QgPSA0MDAwMFxuICAgICAgICBjYW1wb3MgPSB2ZWMgQHdvcmxkLmNhbWVyYS5wb3NpdGlvblxuICAgICAgICBvbGREaXN0YW5jZSA9IEBkaXN0YW5jZVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBoaWdlciA9IEBkaW1zdGFja1syXS5nZXRDaGlsZHJlbigpXG4gICAgICAgIGhpZ2VyLnNvcnQgKGEsYikgLT4gY2FtcG9zLnRvKGEuZ2V0QWJzb2x1dGVQb3NpdGlvbigpKS5sZW5ndGgoKS1jYW1wb3MudG8oYi5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkpLmxlbmd0aCgpXG4gICAgICAgIEBkaW1zdGFja1sxXS5wYXJlbnQgPSBoaWdlclswXVxuICAgICAgICBAZGltc3RhY2tbMV0ubWFya0FzRGlydHkoKVxuICAgICAgICBcbiAgICAgICAgbWlkbGUgPSBAZGltc3RhY2tbMV0uZ2V0Q2hpbGRyZW4oKVxuICAgICAgICBtaWRsZS5zb3J0IChhLGIpIC0+IGNhbXBvcy50byhhLmdldEFic29sdXRlUG9zaXRpb24oKSkubGVuZ3RoKCktY2FtcG9zLnRvKGIuZ2V0QWJzb2x1dGVQb3NpdGlvbigpKS5sZW5ndGgoKVxuICAgICAgICBAZGltc3RhY2tbMF0ucGFyZW50ID0gbWlkbGVbMF1cbiAgICAgICAgQGRpbXN0YWNrWzBdLm1hcmtBc0RpcnR5KClcbiAgICAgICAgXG4gICAgICAgIGxvd2VyID0gQGRpbXN0YWNrWzBdLmdldENoaWxkcmVuKClcbiAgICAgICAgbG93ZXIuc29ydCAoYSxiKSAtPiBjYW1wb3MudG8oYS5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkpLmxlbmd0aCgpLWNhbXBvcy50byhiLmdldEFic29sdXRlUG9zaXRpb24oKSkubGVuZ3RoKClcbiAgICAgICAgXG4gICAgICAgIEBkaXN0YW5jZSA9IGNhbXBvcy50byhsb3dlclswXS5nZXRBYnNvbHV0ZVBvc2l0aW9uKCkpLmxlbmd0aCgpXG4gICAgICAgIEBkaXN0RmFjdG9yID0gQGRpc3RhbmNlIC8gc3dhcERpc3RcbiAgICAgICAgXG4gICAgICAgICMga2xvZyAnZGlzdGFuY2UnIHBhcnNlSW50IEBkaXN0YW5jZSAjLCBoaWdlclswXS5uYW1lLCBtaWRsZVswXS5uYW1lLCBsb3dlclswXS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgQGRpc3RhbmNlID49IHN3YXBEaXN0XG4gICAgICAgICAgICBpZiBvbGREaXN0YW5jZSA8IHN3YXBEaXN0XG4gICAgICAgICAgICAgICAgIyBrbG9nICdkaXN0YW5jZScgQGRpc3RhbmNlLCAnZGlzdEZhY3RvcicgQGRpc3RGYWN0b3JcblxuICAgICAgICAgICAgICAgIGhpZzJjdHIgPSB2ZWMoaGlnZXJbMF0uZ2V0QWJzb2x1dGVQb3NpdGlvbigpKS50byBAd29ybGQuY2FtZXJhLmNlbnRlclxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciBsb3cgaW4gQGRpbXN0YWNrWzBdXG4gICAgICAgICAgICAgICAgICAgIGxvdy5kZWwoKVxuICAgICAgICAgICAgICAgIEBkaW1zdGFja1swXS5kaXNwb3NlKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzeiA9IDAuMDFcbiAgICAgICAgICAgICAgICBAZGltc3RhY2tbMl0uc2NhbGluZy5jb3B5RnJvbUZsb2F0cyBzeiwgc3osIHN6XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdHJhbnMyID0gbmV3IFRyYW5zZm9ybU5vZGUgJ3RyYW5zJyBAc2NlbmUsIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN6ID0gMTAwMDBcbiAgICAgICAgICAgICAgICB0cmFuczIuc2NhbGluZy5jb3B5RnJvbUZsb2F0cyBzeiwgc3osIHN6XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIGRpbSBpbiBAbmV3RGltcygpXG4gICAgICAgICAgICAgICAgICAgIGRpbS5wYXJlbnQgPSB0cmFuczJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAZGltc3RhY2suc2hpZnQoKVxuICAgICAgICAgICAgICAgIEBkaW1zdGFjay5wdXNoIHRyYW5zMlxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEBkaW1zdGFja1sxXS5wYXJlbnQgPSB0cmFuczIuZ2V0Q2hpbGRyZW4oKVswXVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIEB3b3JsZC5jYW1lcmEuZGlzdCAqPSAwLjAxXG4gICAgICAgICAgICAgICAgQHdvcmxkLmNhbWVyYS5jZW50ZXIgPSB2ZWMgaGlnZXJbMF0uZ2V0QWJzb2x1dGVQb3NpdGlvbigpLmFkZCBoaWcyY3RyLm11bCAwLjAxXG4gICAgICAgICAgICAgICAgQHdvcmxkLmNhbWVyYS5uYXZpZ2F0ZSgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgQGRpc3RhbmNlICo9IDAuMDFcbiAgICAgICAgICAgICAgICBAZGlzdEZhY3RvciA9IEBkaXN0YW5jZSAvIHN3YXBEaXN0XG4gICAgICAgICAgICAgICAgIyBrbG9nICduZXdEaXN0YW5jZScgQGRpc3RhbmNlLCBAd29ybGQuY2FtZXJhLnBvc2l0aW9uLmxlbmd0aCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBlbHNlIGlmIEBkaXN0YW5jZSA8IHN3YXBEaXN0LzEwMCBhbmQgb2xkRGlzdGFuY2UgPiBzd2FwRGlzdC8xMDBcblxuICAgICAgICAgICAgICAgICMga2xvZyAnZGlzdGFuY2UnIEBkaXN0YW5jZSwgJ2Rpc3RGYWN0b3InIEBkaXN0RmFjdG9yXG5cbiAgICAgICAgICAgICAgICBtaWQyY3RyID0gdmVjKG1pZGxlWzBdLmdldEFic29sdXRlUG9zaXRpb24oKSkudG8gQHdvcmxkLmNhbWVyYS5jZW50ZXJcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAZGltc3RhY2tbMV0ucGFyZW50ID0gbnVsbFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciBoaWdoIGluIEBkaW1zdGFja1syXVxuICAgICAgICAgICAgICAgICAgICBoaWdoLmRlbCgpXG4gICAgICAgICAgICAgICAgQGRpbXN0YWNrWzJdLmRpc3Bvc2UoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHN6ID0gMTAwMDBcbiAgICAgICAgICAgICAgICBAZGltc3RhY2tbMV0uc2NhbGluZy5jb3B5RnJvbUZsb2F0cyBzeiwgc3osIHN6XG5cbiAgICAgICAgICAgICAgICB0cmFuczAgPSBuZXcgVHJhbnNmb3JtTm9kZSAndHJhbnMnIEBzY2VuZSwgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzeiA9IDAuMDFcbiAgICAgICAgICAgICAgICB0cmFuczAuc2NhbGluZy5jb3B5RnJvbUZsb2F0cyBzeiwgc3osIHN6XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yIGRpbSBpbiBAbmV3RGltcygpXG4gICAgICAgICAgICAgICAgICAgIGRpbS5wYXJlbnQgPSB0cmFuczBcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAZGltc3RhY2sucG9wKClcbiAgICAgICAgICAgICAgICBAZGltc3RhY2sudW5zaGlmdCB0cmFuczBcbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAd29ybGQuY2FtZXJhLmRpc3QgKj0gMTAwXG4gICAgICAgICAgICAgICAgQHdvcmxkLmNhbWVyYS5jZW50ZXIgPSB2ZWMgbWlkbGVbMF0uZ2V0QWJzb2x1dGVQb3NpdGlvbigpLmFkZCBtaWQyY3RyLm11bCAxMDBcbiAgICAgICAgICAgICAgICBAd29ybGQuY2FtZXJhLm5hdmlnYXRlKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBAZGlzdGFuY2UgKj0gMTAwXG4gICAgICAgICAgICAgICAgQGRpc3RGYWN0b3IgPSBAZGlzdGFuY2UgLyBzd2FwRGlzdFxuICAgICAgICAgICAgICAgICMga2xvZyAnbmV3RGlzdGFuY2UnIEBkaXN0YW5jZSwgQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi5sZW5ndGgoKVxuICAgICAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IFNwYWNlXG4iXX0=
//# sourceURL=../coffee/space.coffee