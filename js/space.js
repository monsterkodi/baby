// koffee 1.7.0

/*
 0000000  00000000    0000000    0000000  00000000
000       000   000  000   000  000       000     
0000000   00000000   000000000  000       0000000 
     000  000        000   000  000       000     
0000000   000        000   000   0000000  00000000
 */
var Dimension, Space, TransformNode, generate, klog, random, ref, vec;

ref = require('babylonjs'), Space = ref.Space, TransformNode = ref.TransformNode;

klog = require('kxk').klog;

random = Math.random;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Dimension = require('./dimension');

Space = (function() {
    function Space(world) {
        var d, dim, j, k, len, ref1, sz;
        this.world = world;
        this.scene = this.world.scene;
        this.dimstack = [];
        for (d = j = 0; j <= 2; d = ++j) {
            this.dimstack.push(new TransformNode('trans', this.scene, true));
            sz = (d === 2) && 10000 || 0.01;
            this.dimstack.slice(-1)[0].scaling.copyFromFloats(sz, sz, sz);
            ref1 = this.newDims();
            for (k = 0, len = ref1.length; k < len; k++) {
                dim = ref1[k];
                dim.parent = this.dimstack.slice(-1)[0];
            }
        }
    }

    Space.prototype.newDims = function() {
        var dims, i, j;
        dims = [];
        for (i = j = 0; j <= 5; i = ++j) {
            dims.push(new Dimension(this.world, 1, i));
        }
        return dims;
    };

    Space.prototype.render = function() {
        var camDir, camDist, camDistSort, camFact, campos, dim, hig2ctr, higer, high, inViewSort, j, k, l, len, len1, len2, len3, low, lower, m, mid2ctr, midle, oldDistance, ref1, ref2, ref3, ref4, swapDist, sz, trans0, trans2;
        swapDist = 40000;
        campos = vec(this.world.camera.position);
        camDir = this.world.camera.getDir();
        oldDistance = this.distance;
        camFact = function(a) {
            var cam2a;
            cam2a = campos.to(a.getAbsolutePosition());
            return camDir.angle(cam2a) * cam2a.length();
        };
        camDist = function(a) {
            return campos.dist(a.getAbsolutePosition());
        };
        inViewSort = function(a, b) {
            return camFact(a) - camFact(b);
        };
        camDistSort = function(a, b) {
            return camDist(a) - camDist(b);
        };
        higer = this.dimstack[2].getChildren();
        higer.sort(camDistSort);
        this.dimstack[1].parent = higer[0];
        this.dimstack[1].markAsDirty();
        midle = this.dimstack[1].getChildren();
        midle.sort(camDistSort);
        this.dimstack[0].parent = midle[0];
        this.dimstack[0].markAsDirty();
        lower = this.dimstack[0].getChildren();
        lower.sort(camDistSort);
        this.distance = campos.to(lower[0].getAbsolutePosition()).length();
        this.highDist = campos.to(higer[0].getAbsolutePosition()).length();
        this.distFactor = this.distance / swapDist;
        this.scene.legend.show("" + (parseInt(this.distance)));
        if (this.distance >= swapDist) {
            if (oldDistance < swapDist) {
                hig2ctr = vec(higer[0].getAbsolutePosition()).to(this.world.camera.center);
                ref1 = this.dimstack[0];
                for (j = 0, len = ref1.length; j < len; j++) {
                    low = ref1[j];
                    low.del();
                }
                this.dimstack[0].dispose();
                sz = 0.01;
                this.dimstack[2].scaling.copyFromFloats(sz, sz, sz);
                trans2 = new TransformNode('trans', this.scene, true);
                sz = 10000;
                trans2.scaling.copyFromFloats(sz, sz, sz);
                ref2 = this.newDims();
                for (k = 0, len1 = ref2.length; k < len1; k++) {
                    dim = ref2[k];
                    dim.parent = trans2;
                }
                this.dimstack.shift();
                this.dimstack.push(trans2);
                this.dimstack[1].parent = trans2.getChildren()[0];
                this.world.camera.dist *= 0.01;
                this.world.camera.center = vec(higer[0].getAbsolutePosition().add(hig2ctr.mul(0.01)));
                this.world.camera.navigate();
                this.distance *= 0.01;
                return this.distFactor = this.distance / swapDist;
            }
        } else if (this.distance < swapDist / 100 && oldDistance > swapDist / 100) {
            mid2ctr = vec(midle[0].getAbsolutePosition()).to(this.world.camera.center);
            this.dimstack[1].parent = null;
            ref3 = this.dimstack[2];
            for (l = 0, len2 = ref3.length; l < len2; l++) {
                high = ref3[l];
                high.del();
            }
            this.dimstack[2].dispose();
            sz = 10000;
            this.dimstack[1].scaling.copyFromFloats(sz, sz, sz);
            trans0 = new TransformNode('trans', this.scene, true);
            sz = 0.01;
            trans0.scaling.copyFromFloats(sz, sz, sz);
            ref4 = this.newDims();
            for (m = 0, len3 = ref4.length; m < len3; m++) {
                dim = ref4[m];
                dim.parent = trans0;
            }
            this.dimstack.pop();
            this.dimstack.unshift(trans0);
            this.world.camera.dist *= 100;
            this.world.camera.center = vec(midle[0].getAbsolutePosition().add(mid2ctr.mul(100)));
            this.world.camera.navigate();
            this.distance *= 100;
            return this.distFactor = this.distance / swapDist;
        }
    };

    return Space;

})();

module.exports = Space;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/space.coffee