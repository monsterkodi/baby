// koffee 1.6.0

/*
 0000000   000   000   0000000   000000000
000   000  000   000  000   000     000   
000 00 00  000   000  000000000     000   
000 0000   000   000  000   000     000   
 00000 00   0000000   000   000     000
 */
var Quat, Vect, acos, asin, atan2, cos, deg2rad, rad2deg, ref, sin, sqrt;

ref = require('kxk'), deg2rad = ref.deg2rad, rad2deg = ref.rad2deg;

acos = Math.acos, asin = Math.asin, atan2 = Math.atan2, cos = Math.cos, sin = Math.sin, sqrt = Math.sqrt;

Vect = require('./vect');

Quat = (function() {
    function Quat(x, y, z, w) {
        var ref1;
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        if (w == null) {
            w = 1;
        }
        if ((x.x != null) && (x.y != null) && (x.z != null)) {
            this.set(x.x, x.y, x.z, (ref1 = x.w) != null ? ref1 : 0);
        } else if (Array.isArray(w)) {
            this.set(w[0], w[1], w[2], w[3]);
        } else {
            this.set(x, y, z, w);
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Quat.prototype.set = function(x1, y1, z1, w1) {
        this.x = x1;
        this.y = y1;
        this.z = z1;
        this.w = w1 != null ? w1 : 1;
    };

    Quat.prototype.rotateAxisAngle = function(axis, angle) {
        this.multiplyInPlace(Quat.axisAngle(axis, angle));
        return this;
    };

    Quat.prototype.rotate = function(v) {
        return v.applyQuaternion(this);
    };

    Quat.prototype.rotated = function(v) {
        return new Vect(v).applyQuaternion(this);
    };

    Quat.prototype.clone = function() {
        return new Quat(this);
    };

    Quat.prototype.copy = function(q) {
        this.x = q.x;
        this.y = q.y;
        this.z = q.z;
        this.w = q.w;
        return this;
    };

    Quat.prototype.rounded = function() {
        var back, backDiff, i, l, len, minDist, minQuat, q, ref1, up, upDiff;
        minDist = 1000;
        minQuat = null;
        up = this.rotate(Vect.unitY);
        back = this.rotate(Vect.unitZ);
        ref1 = [Quat.XupY, Quat.XupZ, Quat.XdownY, Quat.XdownZ, Quat.YupX, Quat.YupZ, Quat.YdownX, Quat.YdownZ, Quat.ZupX, Quat.ZupY, Quat.ZdownX, Quat.ZdownY, Quat.minusXupY, Quat.minusXupZ, Quat.minusXdownY, Quat.minusXdownZ, Quat.minusYupX, Quat.minusYupZ, Quat.minusYdownX, Quat.minusYdownZ, Quat.minusZupX, Quat.minusZupY, Quat.minusZdownX, Quat.minusZdownY];
        for (i = 0, len = ref1.length; i < len; i++) {
            q = ref1[i];
            upDiff = 1 - up.dot(q.rotate(Vect.unitY));
            backDiff = 1 - back.dot(q.rotate(Vect.unitZ));
            l = upDiff + backDiff;
            if (l < minDist) {
                minDist = l;
                minQuat = q;
                if (l < 0.0001) {
                    break;
                }
            }
        }
        return minQuat;
    };

    Quat.prototype.round = function() {
        return this.clone(this.normalize().rounded());
    };

    Quat.prototype.euler = function() {
        return [rad2deg(atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y))), rad2deg(asin(2 * (this.w * this.y - this.z * this.x))), rad2deg(atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z)))];
    };

    Quat.prototype.add = function(quat) {
        this.w += quat.w;
        this.x += quat.x;
        this.y += quat.y;
        this.z += quat.z;
        return this;
    };

    Quat.prototype.sub = function(quat) {
        this.w -= quat.w;
        this.x -= quat.x;
        this.y -= quat.y;
        this.z -= quat.z;
        return this;
    };

    Quat.prototype.minus = function(quat) {
        return this.clone().sub(quat);
    };

    Quat.prototype.dot = function(q) {
        return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
    };

    Quat.prototype.normalize = function() {
        var l;
        l = sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x /= l;
            this.y /= l;
            this.z /= l;
        }
        return this;
    };

    Quat.prototype.invert = function() {
        var l;
        l = sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x = -this.x / l;
            this.y = -this.y / l;
            this.z = -this.z / l;
        }
        return this;
    };

    Quat.prototype.isZero = function() {
        var ref1, ref2;
        return ((this.x === (ref2 = this.y) && ref2 === (ref1 = this.z)) && ref1 === 0) && this.w === 1;
    };

    Quat.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        this.w = 1;
        return this;
    };

    Quat.prototype.conjugate = function() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    };

    Quat.prototype.getNormal = function() {
        return this.clone().normalize();
    };

    Quat.prototype.getConjugate = function() {
        return this.clone().conjugate();
    };

    Quat.prototype.getInverse = function() {
        return this.clone().invert();
    };

    Quat.prototype.neg = function() {
        return new Quat(-this.w, -this.x, -this.y, -this.z);
    };

    Quat.prototype.vector = function() {
        return new Vect(this.x, this.y, this.z);
    };

    Quat.prototype.length = function() {
        return sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Quat.prototype.eql = function(q) {
        return this.w === q.w && (this.x = q.x && this.y === q.y && this.z === q.z);
    };

    Quat.prototype.mul = function(quatOrScalar) {
        var a, b, c, d, e, f, g, h, quat;
        if (quatOrScalar instanceof Quat) {
            quat = quatOrScalar;
            a = (this.w + this.x) * (quat.w + quat.x);
            b = (this.z - this.y) * (quat.y - quat.z);
            c = (this.w - this.x) * (quat.y + quat.z);
            d = (this.y + this.z) * (quat.w - quat.x);
            e = (this.x + this.z) * (quat.x + quat.y);
            f = (this.x - this.z) * (quat.x - quat.y);
            g = (this.w + this.y) * (quat.w - quat.z);
            h = (this.w - this.y) * (quat.w + quat.z);
            return new Quat(b + (-e - f + g + h) / 2, a - (e + f + g + h) / 2, c + (e - f + g - h) / 2, d + (e - f - g + h) / 2);
        } else {
            f = parseFloat(quatOrScalar);
            return new Quat(this.w * f, this.x * f, this.y * f, this.z * f);
        }
    };

    Quat.prototype.slerp = function(quat, t) {
        var cosom, omega, scale0, scale1, sinom, to1;
        to1 = [0, 0, 0, 0];
        cosom = this.x * quat.x + this.y * quat.y + this.z * quat.z + this.w * quat.w;
        if (cosom < 0) {
            cosom = -cosom;
            to1[0] = -quat.x;
            to1[1] = -quat.y;
            to1[2] = -quat.z;
            to1[3] = -quat.w;
        } else {
            to1[0] = quat.x;
            to1[1] = quat.y;
            to1[2] = quat.z;
            to1[3] = quat.w;
        }
        if ((1.0 - cosom) > 0.001) {
            omega = acos(cosom);
            sinom = sin(omega);
            scale0 = sin((1.0 - t) * omega) / sinom;
            scale1 = sin(t * omega) / sinom;
        } else {
            scale0 = 1.0 - t;
            scale1 = t;
        }
        return new Quat(scale0 * this.w + scale1 * to1[3], scale0 * this.x + scale1 * to1[0], scale0 * this.y + scale1 * to1[1], scale0 * this.z + scale1 * to1[2]);
    };

    Quat.axisAngle = function(axis, angle) {
        var halfAngle, s;
        halfAngle = deg2rad(angle) / 2;
        s = sin(halfAngle);
        return new Quat(axis.x * s, axis.y * s, axis.z * s, cos(halfAngle));
    };

    Quat.rotationFromEuler = function(x, y, z) {
        var q;
        x = deg2rad(x);
        y = deg2rad(y);
        z = deg2rad(z);
        q = new Quat(cos(x / 2) * cos(y / 2) * cos(z / 2) + sin(x / 2) * sin(y / 2) * sin(z / 2), sin(x / 2) * cos(y / 2) * cos(z / 2) - cos(x / 2) * sin(y / 2) * sin(z / 2), cos(x / 2) * sin(y / 2) * cos(z / 2) + sin(x / 2) * cos(y / 2) * sin(z / 2), cos(x / 2) * cos(y / 2) * sin(z / 2) - sin(x / 2) * sin(y / 2) * cos(z / 2));
        return q.normalize();
    };

    return Quat;

})();

module.exports = Quat;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/quat.coffee