// koffee 1.6.0

/*
 0000000   000   000   0000000   000000000
000   000  000   000  000   000     000   
000 00 00  000   000  000000000     000   
000 0000   000   000  000   000     000   
 00000 00   0000000   000   000     000
 */
var Quat, Quaternion, Vect, Vector3, acos, asin, atan2, cos, deg2rad, rad2deg, ref, ref1, sin, sqrt,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), deg2rad = ref.deg2rad, rad2deg = ref.rad2deg;

ref1 = require('babylonjs'), Quaternion = ref1.Quaternion, Vector3 = ref1.Vector3;

cos = Math.cos, sin = Math.sin, sqrt = Math.sqrt, atan2 = Math.atan2, asin = Math.asin, acos = Math.acos;

Vect = require('./vect');

Quat = (function(superClass) {
    extend(Quat, superClass);

    Quat.tmp = new Quat;

    Quat.counter = 0;

    function Quat(x, y, z, w) {
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        if (w == null) {
            w = 1;
        }
        Quat.counter++;
        if (x instanceof Vect || x instanceof Vector3) {
            Quat.__super__.constructor.call(this, x.x, x.y, x.z, 0);
        } else if (x instanceof Quat || x instanceof Quaternion) {
            Quat.__super__.constructor.call(this, x.x, x.y, x.z, x.w);
        } else if (Array.isArray(w)) {
            Quat.__super__.constructor.call(this, w[0], w[1], w[2], w[3]);
        } else {
            Quat.__super__.constructor.call(this, x, y, z, w);
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Quat.axisAngle = function(axis, angle) {
        return new Quat(Quaternion.RotationAxis(axis, deg2rad(angle)));
    };

    Quat.prototype.rotateAxisAngle = function(axis, angle) {
        this.multiplyInPlace(Quat.axisAngle(axis, angle));
        return this;
    };

    Quat.prototype.clone = function() {
        return new Quat(this);
    };

    Quat.prototype.copy = function(q) {
        this.x = q.x;
        this.y = q.y;
        this.z = q.z;
        this.w = q.w;
        return this;
    };

    Quat.prototype.rounded = function() {
        var back, backDiff, i, l, len, minDist, minQuat, q, ref2, up, upDiff;
        minDist = 1000;
        minQuat = null;
        up = this.rotate(Vect.unitY);
        back = this.rotate(Vect.unitZ);
        ref2 = [Quat.XupY, Quat.XupZ, Quat.XdownY, Quat.XdownZ, Quat.YupX, Quat.YupZ, Quat.YdownX, Quat.YdownZ, Quat.ZupX, Quat.ZupY, Quat.ZdownX, Quat.ZdownY, Quat.minusXupY, Quat.minusXupZ, Quat.minusXdownY, Quat.minusXdownZ, Quat.minusYupX, Quat.minusYupZ, Quat.minusYdownX, Quat.minusYdownZ, Quat.minusZupX, Quat.minusZupY, Quat.minusZdownX, Quat.minusZdownY];
        for (i = 0, len = ref2.length; i < len; i++) {
            q = ref2[i];
            upDiff = 1 - up.dot(q.rotate(Vect.unitY));
            backDiff = 1 - back.dot(q.rotate(Vect.unitZ));
            l = upDiff + backDiff;
            if (l < minDist) {
                minDist = l;
                minQuat = q;
                if (l < 0.0001) {
                    break;
                }
            }
        }
        return minQuat;
    };

    Quat.prototype.round = function() {
        return this.clone(this.normalize().rounded());
    };

    Quat.prototype.euler = function() {
        return [rad2deg(atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y))), rad2deg(asin(2 * (this.w * this.y - this.z * this.x))), rad2deg(atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z)))];
    };

    Quat.prototype.add = function(quat) {
        this.w += quat.w;
        this.x += quat.x;
        this.y += quat.y;
        this.z += quat.z;
        return this;
    };

    Quat.prototype.sub = function(quat) {
        this.w -= quat.w;
        this.x -= quat.x;
        this.y -= quat.y;
        this.z -= quat.z;
        return this;
    };

    Quat.prototype.minus = function(quat) {
        return this.clone().sub(quat);
    };

    Quat.prototype.dot = function(q) {
        return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
    };

    Quat.prototype.rotate = function(v) {
        return v.applyQuaternion(this);
    };

    Quat.prototype.rotated = function(v) {
        return new Vect(v).applyQuaternion(this);
    };

    Quat.prototype.normalize = function() {
        var l;
        l = sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x /= l;
            this.y /= l;
            this.z /= l;
        }
        return this;
    };

    Quat.prototype.invert = function() {
        var l;
        l = sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x = -this.x / l;
            this.y = -this.y / l;
            this.z = -this.z / l;
        }
        return this;
    };

    Quat.prototype.isZero = function() {
        var ref2, ref3;
        return ((this.x === (ref3 = this.y) && ref3 === (ref2 = this.z)) && ref2 === 0) && this.w === 1;
    };

    Quat.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        this.w = 1;
        return this;
    };

    Quat.prototype.conjugate = function() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    };

    Quat.prototype.getNormal = function() {
        return this.clone().normalize();
    };

    Quat.prototype.getConjugate = function() {
        return this.clone().conjugate();
    };

    Quat.prototype.getInverse = function() {
        return this.clone().invert();
    };

    Quat.prototype.neg = function() {
        return new Quat(-this.w, -this.x, -this.y, -this.z);
    };

    Quat.prototype.vector = function() {
        return new Vect(this.x, this.y, this.z);
    };

    Quat.prototype.length = function() {
        return sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Quat.prototype.eql = function(q) {
        return this.w === q.w && (this.x = q.x && this.y === q.y && this.z === q.z);
    };

    Quat.prototype.mul = function(quatOrScalar) {
        var A, B, C, D, E, F, G, H, f, quat;
        if (quatOrScalar instanceof Quat) {
            quat = quatOrScalar;
            A = (this.w + this.x) * (quat.w + quat.x);
            B = (this.z - this.y) * (quat.y - quat.z);
            C = (this.w - this.x) * (quat.y + quat.z);
            D = (this.y + this.z) * (quat.w - quat.x);
            E = (this.x + this.z) * (quat.x + quat.y);
            F = (this.x - this.z) * (quat.x - quat.y);
            G = (this.w + this.y) * (quat.w - quat.z);
            H = (this.w - this.y) * (quat.w + quat.z);
            return new Quat(B + (-E - F + G + H) / 2, A - (E + F + G + H) / 2, C + (E - F + G - H) / 2, D + (E - F - G + H) / 2);
        } else {
            f = parseFloat(quatOrScalar);
            return new Quat(this.w * f, this.x * f, this.y * f, this.z * f);
        }
    };

    Quat.prototype.slerp = function(quat, t) {
        var cosom, omega, scale0, scale1, sinom, to1;
        to1 = [0, 0, 0, 0];
        cosom = this.x * quat.x + this.y * quat.y + this.z * quat.z + this.w * quat.w;
        if (cosom < 0) {
            cosom = -cosom;
            to1[0] = -quat.x;
            to1[1] = -quat.y;
            to1[2] = -quat.z;
            to1[3] = -quat.w;
        } else {
            to1[0] = quat.x;
            to1[1] = quat.y;
            to1[2] = quat.z;
            to1[3] = quat.w;
        }
        if ((1.0 - cosom) > 0.001) {
            omega = acos(cosom);
            sinom = sin(omega);
            scale0 = sin((1.0 - t) * omega) / sinom;
            scale1 = sin(t * omega) / sinom;
        } else {
            scale0 = 1.0 - t;
            scale1 = t;
        }
        return new Quat(scale0 * this.w + scale1 * to1[3], scale0 * this.x + scale1 * to1[0], scale0 * this.y + scale1 * to1[1], scale0 * this.z + scale1 * to1[2]);
    };

    Quat.rotationAroundVector = function(theta, x, y, z) {
        var s, t, v;
        v = new Vect(x, y, z);
        v.normalize();
        t = deg2rad(theta) / 2.0;
        s = sin(t);
        return (new Quat(cos(t), v.x * s, v.y * s, v.z * s)).normalize();
    };

    Quat.rotationFromEuler = function(x, y, z) {
        var q;
        x = deg2rad(x);
        y = deg2rad(y);
        z = deg2rad(z);
        q = new Quat(cos(x / 2) * cos(y / 2) * cos(z / 2) + sin(x / 2) * sin(y / 2) * sin(z / 2), sin(x / 2) * cos(y / 2) * cos(z / 2) - cos(x / 2) * sin(y / 2) * sin(z / 2), cos(x / 2) * sin(y / 2) * cos(z / 2) + sin(x / 2) * cos(y / 2) * sin(z / 2), cos(x / 2) * cos(y / 2) * sin(z / 2) - sin(x / 2) * sin(y / 2) * cos(z / 2));
        return q.normalize();
    };

    Quat.rot_0 = new Quat();

    Quat.rot_90_X = Quat.rotationAroundVector(90, Vect.unitX);

    Quat.rot_90_Y = Quat.rotationAroundVector(90, Vect.unitY);

    Quat.rot_90_Z = Quat.rotationAroundVector(90, Vect.unitZ);

    Quat.rot_180_X = Quat.rotationAroundVector(180, Vect.unitX);

    Quat.rot_180_Y = Quat.rotationAroundVector(180, Vect.unitY);

    Quat.rot_180_Z = Quat.rotationAroundVector(180, Vect.unitZ);

    Quat.rot_270_X = Quat.rotationAroundVector(270, Vect.unitX);

    Quat.rot_270_Y = Quat.rotationAroundVector(270, Vect.unitY);

    Quat.rot_270_Z = Quat.rotationAroundVector(270, Vect.unitZ);

    Quat.minusXupY = Quat.rot_270_Y;

    Quat.minusXupZ = Quat.rot_90_X.mul(Quat.rot_270_Y);

    Quat.minusXdownY = Quat.rot_180_X.mul(Quat.rot_270_Y);

    Quat.minusXdownZ = Quat.rot_270_X.mul(Quat.rot_270_Y);

    Quat.minusYupX = Quat.rot_90_Y.mul(Quat.rot_90_X);

    Quat.minusYupZ = Quat.rot_90_X;

    Quat.minusYdownX = Quat.rot_270_Y.mul(Quat.rot_90_X);

    Quat.minusYdownZ = Quat.rot_180_Y.mul(Quat.rot_90_X);

    Quat.ZupX = Quat.rot_270_Z;

    Quat.ZupY = Quat.rot_0;

    Quat.ZdownX = Quat.rot_90_Z;

    Quat.ZdownY = Quat.rot_180_Z;

    Quat.XupY = Quat.rot_90_Y;

    Quat.XupZ = Quat.rot_90_X.mul(Quat.rot_90_Y);

    Quat.XdownY = Quat.rot_180_X.mul(Quat.rot_90_Y);

    Quat.XdownZ = Quat.rot_270_X.mul(Quat.rot_90_Y);

    Quat.YupX = Quat.rot_270_Y.mul(Quat.rot_270_X);

    Quat.YupZ = Quat.rot_180_Y.mul(Quat.rot_270_X);

    Quat.YdownX = Quat.rot_90_Y.mul(Quat.rot_270_X);

    Quat.YdownZ = Quat.rot_270_X;

    Quat.minusZupX = Quat.rot_90_Z.mul(Quat.rot_180_X);

    Quat.minusZupY = Quat.rot_180_Z.mul(Quat.rot_180_X);

    Quat.minusZdownX = Quat.rot_270_Z.mul(Quat.rot_180_X);

    Quat.minusZdownY = Quat.rot_180_X;

    Quat.rot_0.name = 'rot_0';

    Quat.rot_90_X.name = 'rot_90_X';

    Quat.rot_90_Y.name = 'rot_90_Y';

    Quat.rot_90_Z.name = 'rot_90_Z';

    Quat.rot_180_X.name = 'rot_180_X';

    Quat.rot_180_Y.name = 'rot_180_Y';

    Quat.rot_180_Z.name = 'rot_180_Z';

    Quat.rot_270_X.name = 'rot_270_X';

    Quat.rot_270_Y.name = 'rot_270_Y';

    Quat.rot_270_Z.name = 'rot_270_Z';

    Quat.XupY.name = 'XupY';

    Quat.XupZ.name = 'XupZ';

    Quat.XdownY.name = 'XdownY';

    Quat.XdownZ.name = 'XdownZ';

    Quat.YupX.name = 'YupX';

    Quat.YupZ.name = 'YupZ';

    Quat.YdownX.name = 'YdownX';

    Quat.YdownZ.name = 'YdownZ';

    Quat.ZupX.name = 'ZupX';

    Quat.ZupY.name = 'ZupY';

    Quat.ZdownX.name = 'ZdownX';

    Quat.ZdownY.name = 'ZdownY';

    Quat.minusXupY.name = 'minusXupY';

    Quat.minusXupZ.name = 'minusXupZ';

    Quat.minusXdownY.name = 'minusXdownY';

    Quat.minusXdownZ.name = 'minusXdownZ';

    Quat.minusYupX.name = 'minusYupX';

    Quat.minusYupZ.name = 'minusYupZ';

    Quat.minusYdownX.name = 'minusYdownX';

    Quat.minusYdownZ.name = 'minusYdownZ';

    Quat.minusZupX.name = 'minusZupX';

    Quat.minusZupY.name = 'minusZupY';

    Quat.minusZdownX.name = 'minusZdownX';

    Quat.minusZdownY.name = 'minusZdownY';

    return Quat;

})(Quaternion);

module.exports = Quat;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/quat.coffee