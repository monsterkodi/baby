// koffee 1.7.0

/*
00     00   0000000   000000000  000   000
000   000  000   000     000     000   000
000000000  000000000     000     000000000
000 0 000  000   000     000     000   000
000   000  000   000     000     000   000
 */
var E, Quat, Vect, _mult, add, angle, calcCentroid, center, clockwise, clone, copyVecArray, cross, dot, edgeDist, faceToEdges, facesToWings, intersect, klog, mag, mag2, midpoint, mult, neg, normal, oneThird, orthogonal, planarize, pointPlaneDist, pointRayDist, quat, rayPlane, rayRay, rotate, sqrt, sub, tangentPoint, tangentify, tween, unit, vec;

klog = require('kxk').klog;

E = Math.E, sqrt = Math.sqrt;

Vect = require('../vect');

Quat = require('../quat');

vec = function(x, y, z) {
    return new Vect(x, y, z);
};

quat = function(x, y, z, w) {
    return new Quat(x, y, z, w);
};

clone = function(obj) {
    var key, newInstance;
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
        newInstance[key] = clone(obj[key]);
    }
    return newInstance;
};

neg = function(v) {
    return [-v[0], -v[1], -v[2]];
};

mult = function(c, v) {
    return [c * v[0], c * v[1], c * v[2]];
};

_mult = function(v1, v2) {
    return [v1[0] * v2[0], v1[1] * v2[1], v1[2] * v2[2]];
};

add = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

sub = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

dot = function(v1, v2) {
    return (v1[0] * v2[0]) + (v1[1] * v2[1]) + (v1[2] * v2[2]);
};

cross = function(d1, d2) {
    return [(d1[1] * d2[2]) - (d1[2] * d2[1]), (d1[2] * d2[0]) - (d1[0] * d2[2]), (d1[0] * d2[1]) - (d1[1] * d2[0])];
};

mag = function(v) {
    return sqrt(dot(v, v));
};

mag2 = function(v) {
    return dot(v, v);
};

unit = function(v) {
    var l;
    if (l = mag(v)) {
        return mult(1 / l, v);
    } else {
        return [1, 0, 0];
    }
};

tween = function(v1, v2, t) {
    return [((1 - t) * v1[0]) + (t * v2[0]), ((1 - t) * v1[1]) + (t * v2[1]), ((1 - t) * v1[2]) + (t * v2[2])];
};

midpoint = function(v1, v2) {
    return mult(0.5, add(v1, v2));
};

oneThird = function(v1, v2) {
    return tween(v1, v2, 1 / 3.0);
};

angle = function(v1, v2) {
    return vec(v1).angle(vec(v2));
};

rotate = function(v, axis, angle) {
    var res, rot;
    rot = Quat.axisAngle(vec(axis), angle);
    res = rot.rotated(v);
    return res.coords();
};

tangentPoint = function(v1, v2) {
    var d, l2;
    d = sub(v2, v1);
    l2 = mag2(d);
    if (l2 === 0) {
        return v1;
    }
    return sub(v1, mult(dot(d, v1) / l2, d));
};

edgeDist = function(v1, v2) {
    return sqrt(mag2(tangentPoint(v1, v2)));
};

pointRayDist = function(v, rp, rd) {
    var cr, pn, vp;
    vp = sub(rp, v);
    cr = cross(rd, vp);
    pn = cross(cr, rd);
    return pointPlaneDist(v, rp, pn);
};

pointPlaneDist = function(v, pp, pn) {
    var rp;
    rp = rayPlane(v, pn, pp, pn);
    return mag(sub(rp, v));
};

clockwise = function(verts, indices) {
    var crss, frst, midp, vl;
    vl = indices.map(function(vi) {
        return verts[vi];
    });
    midp = center(vl);
    frst = sub(vl[0], midp);
    crss = cross(frst, midp);
    indices.sort(function(a, b) {
        var aa, av, bb, bv;
        av = sub(verts[a], midp);
        aa = angle(frst, av);
        if (dot(crss, av) < 0) {
            aa *= -1;
        }
        bv = sub(verts[b], midp);
        bb = angle(frst, bv);
        if (dot(crss, bv) < 0) {
            bb *= -1;
        }
        return bb - aa;
    });
    return indices;
};

rayPlane = function(rayPos, rayDirection, planePos, planeNormal) {
    var x;
    x = dot(sub(planePos, rayPos), planeNormal) / dot(rayDirection, planeNormal);
    return add(rayPos, mult(x, rayDirection));
};

rayRay = function(rayA, rayB) {
    var A, B, D, a, aa, ab, ac, b, bb, bc, c;
    A = rayA[0];
    B = rayB[0];
    a = sub(rayA[1], A);
    b = sub(rayB[1], B);
    c = sub(B, A);
    aa = dot(a, a);
    ab = dot(a, b);
    ac = dot(a, c);
    bc = dot(b, c);
    bb = dot(b, b);
    D = add(A, mult((-ab * bc + ac * bb) / (aa * bb - ab * ab), a));
    E = add(B, mult((ab * ac - bc * aa) / (aa * bb - ab * ab), b));
    if (0.1 < mag(sub(D, E))) {
        klog('no intersect?', mag(sub(D, E)));
    }
    return mult(0.5, add(D, E));
};

orthogonal = function(v1, v2, v3) {
    return cross(sub(v2, v1), sub(v3, v2));
};

intersect = function(set1, set2, set3) {
    var j, k, len, len1, len2, m, s1, s2, s3;
    for (j = 0, len = set1.length; j < len; j++) {
        s1 = set1[j];
        for (k = 0, len1 = set2.length; k < len1; k++) {
            s2 = set2[k];
            if (s1 === s2) {
                for (m = 0, len2 = set3.length; m < len2; m++) {
                    s3 = set3[m];
                    if (s1 === s3) {
                        return s1;
                    }
                }
            }
        }
    }
    return null;
};

calcCentroid = function(vertices) {
    var centroidV, j, len, v;
    centroidV = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        centroidV = add(centroidV, v);
    }
    return mult(1 / vertices.length, centroidV);
};

normal = function(vertices) {
    var j, len, nv, ref, ref1, v1, v2, v3;
    nv = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        nv = add(nv, orthogonal(v1, v2, v3));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return unit(nv);
};

center = function(vertices) {
    var ctr, j, len, v;
    ctr = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        ctr = add(ctr, v);
    }
    return mult(1.0 / vertices.length, ctr);
};

copyVecArray = function(vecArray) {
    var end, i, j, newVecArray, ref;
    newVecArray = new Array(vecArray.length);
    end = vecArray.length;
    for (i = j = 0, ref = end; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        newVecArray[i] = vecArray[i].slice(0);
    }
    return newVecArray;
};

facesToWings = function(faces) {
    var edge, edges, epool, fi, j, k, nvert, oi, other, pvert, ref, ref1, wings;
    nvert = {};
    pvert = {};
    epool = [];
    for (fi = j = 0, ref = faces.length; 0 <= ref ? j < ref : j > ref; fi = 0 <= ref ? ++j : --j) {
        edges = faceToEdges(faces[fi]);
        edges.forEach(function(edge) {
            if (nvert[fi] != null) {
                nvert[fi];
            } else {
                nvert[fi] = {};
            }
            if (pvert[fi] != null) {
                pvert[fi];
            } else {
                pvert[fi] = {};
            }
            nvert[fi][edge[0]] = edge[1];
            pvert[fi][edge[1]] = edge[0];
            return edge.push({
                fr: fi
            });
        });
        epool = epool.concat(edges);
    }
    wings = [];
    while (epool.length) {
        edge = epool.shift();
        edge[2].nr = nvert[edge[2].fr][edge[1]];
        edge[2].pr = pvert[edge[2].fr][edge[0]];
        for (oi = k = 0, ref1 = epool.length; 0 <= ref1 ? k < ref1 : k > ref1; oi = 0 <= ref1 ? ++k : --k) {
            other = epool[oi];
            if (other[0] === edge[1] && other[1] === edge[0]) {
                edge[2].fl = other[2].fr;
                edge[2].nl = pvert[edge[2].fl][edge[1]];
                edge[2].pl = nvert[edge[2].fl][edge[0]];
                epool.splice(oi, 1);
                break;
            }
        }
        wings.push(edge);
    }
    return wings;
};

faceToEdges = function(face) {
    var edges, j, len, v1, v2;
    edges = [];
    v1 = face.slice(-1)[0];
    for (j = 0, len = face.length; j < len; j++) {
        v2 = face[j];
        edges.push([v1, v2]);
        v1 = v2;
    }
    return edges;
};

tangentify = function(vertices, edges) {
    var c, e, j, len, newVs, t;
    newVs = copyVecArray(vertices);
    for (j = 0, len = edges.length; j < len; j++) {
        e = edges[j];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * 0.05, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, j, k, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = faces.length; j < len; j++) {
        f = faces[j];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (k = 0, len1 = f.length; k < len1; k++) {
            v = f[k];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

module.exports = {
    vec: vec,
    add: add,
    sub: sub,
    dot: dot,
    mag: mag,
    neg: neg,
    quat: quat,
    mult: mult,
    unit: unit,
    angle: angle,
    cross: cross,
    tween: tween,
    normal: normal,
    center: center,
    rotate: rotate,
    rayRay: rayRay,
    edgeDist: edgeDist,
    oneThird: oneThird,
    midpoint: midpoint,
    rayPlane: rayPlane,
    intersect: intersect,
    clockwise: clockwise,
    planarize: planarize,
    tangentify: tangentify,
    orthogonal: orthogonal,
    faceToEdges: faceToEdges,
    pointRayDist: pointRayDist,
    facesToWings: facesToWings,
    calcCentroid: calcCentroid,
    copyVecArray: copyVecArray,
    tangentPoint: tangentPoint,
    pointPlaneDist: pointPlaneDist
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUE7O0FBVUUsT0FBUyxPQUFBLENBQVEsS0FBUjs7QUFDVCxVQUFGLEVBQUs7O0FBRUwsSUFBQSxHQUFPLE9BQUEsQ0FBUSxTQUFSOztBQUNQLElBQUEsR0FBTyxPQUFBLENBQVEsU0FBUjs7QUFDUCxHQUFBLEdBQU8sU0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUw7V0FBYSxJQUFJLElBQUosQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWY7QUFBYjs7QUFDUCxJQUFBLEdBQU8sU0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQO1dBQWEsSUFBSSxJQUFKLENBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCO0FBQWI7O0FBRVAsS0FBQSxHQUFRLFNBQUMsR0FBRDtBQUVKLFFBQUE7SUFBQSxJQUFHLENBQUksR0FBSixJQUFXLE9BQU8sR0FBUCxLQUFlLFFBQTdCO0FBQ0ksZUFBTyxJQURYOztJQUVBLFdBQUEsR0FBYyxJQUFJLEdBQUcsQ0FBQyxXQUFSLENBQUE7QUFDZCxTQUFBLFVBQUE7UUFDSSxXQUFZLENBQUEsR0FBQSxDQUFaLEdBQW1CLEtBQUEsQ0FBTSxHQUFJLENBQUEsR0FBQSxDQUFWO0FBRHZCO1dBRUE7QUFQSTs7QUFTUixHQUFBLEdBQVcsU0FBQyxDQUFEO1dBQU8sQ0FBQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUosRUFBUSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQVgsRUFBZSxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQWxCO0FBQVA7O0FBQ1gsSUFBQSxHQUFXLFNBQUMsQ0FBRCxFQUFJLENBQUo7V0FBVSxDQUFDLENBQUEsR0FBRSxDQUFFLENBQUEsQ0FBQSxDQUFMLEVBQVMsQ0FBQSxHQUFFLENBQUUsQ0FBQSxDQUFBLENBQWIsRUFBaUIs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MFxuMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwXG4wMDAwMDAwMDAgIDAwMDAwMDAwMCAgICAgMDAwICAgICAwMDAwMDAwMDBcbjAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgIDAwMFxuMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwXG4jIyNcblxuIyBQb2x5aMOpZHJvbmlzbWUsIENvcHlyaWdodCAyMDE5LCBBbnNlbG0gTGV2c2theWEsIE1JVCBMaWNlbnNlXG4gICAgXG57IGtsb2cgfSA9IHJlcXVpcmUgJ2t4aydcbnsgRSwgc3FydCB9ID0gTWF0aFxuXG5WZWN0ID0gcmVxdWlyZSAnLi4vdmVjdCdcblF1YXQgPSByZXF1aXJlICcuLi9xdWF0J1xudmVjICA9ICh4LHkseikgICAtPiBuZXcgVmVjdCB4LCB5LCB6XG5xdWF0ID0gKHgseSx6LHcpIC0+IG5ldyBRdWF0IHgsIHksIHosIHdcblxuY2xvbmUgPSAob2JqKSAtPiAjIGRlZXAtY29weVxuICAgIFxuICAgIGlmIG5vdCBvYmogb3IgdHlwZW9mKG9iaikgIT0gJ29iamVjdCdcbiAgICAgICAgcmV0dXJuIG9ialxuICAgIG5ld0luc3RhbmNlID0gbmV3IG9iai5jb25zdHJ1Y3RvcigpXG4gICAgZm9yIGtleSBvZiBvYmogXG4gICAgICAgIG5ld0luc3RhbmNlW2tleV0gPSBjbG9uZSBvYmpba2V5XVxuICAgIG5ld0luc3RhbmNlXG5cbm5lZyAgICAgID0gKHYpIC0+IFstdlswXSwgLXZbMV0sIC12WzJdXVxubXVsdCAgICAgPSAoYywgdikgLT4gW2MqdlswXSwgYyp2WzFdLCBjKnZbMl1dXG5fbXVsdCAgICA9ICh2MSwgdjIpIC0+IFt2MVswXSp2MlswXSwgdjFbMV0qdjJbMV0sIHYxWzJdKnYyWzJdXVxuYWRkICAgICAgPSAodjEsIHYyKSAtPiBbdjFbMF0rdjJbMF0sIHYxWzFdK3YyWzFdLCB2MVsyXSt2MlsyXV1cbnN1YiAgICAgID0gKHYxLCB2MikgLT4gW3YxWzBdLXYyWzBdLCB2MVsxXS12MlsxXSwgdjFbMl0tdjJbMl1dXG5kb3QgICAgICA9ICh2MSwgdjIpIC0+ICh2MVswXSp2MlswXSkgKyAodjFbMV0qdjJbMV0pICsgKHYxWzJdKnYyWzJdKVxuY3Jvc3MgICAgPSAoZDEsIGQyKSAtPiBbKGQxWzFdKmQyWzJdKSAtIChkMVsyXSpkMlsxXSksIChkMVsyXSpkMlswXSkgLSAoZDFbMF0qZDJbMl0pLCAoZDFbMF0qZDJbMV0pIC0gKGQxWzFdKmQyWzBdKV1cbm1hZyAgICAgID0gKHYpIC0+IHNxcnQgZG90IHYsIHZcbm1hZzIgICAgID0gKHYpIC0+IGRvdCB2LCB2XG51bml0ICAgICA9ICh2KSAtPiBpZiBsID0gbWFnKHYpIHRoZW4gbXVsdCgxL2wsIHYpIGVsc2UgWzEgMCAwXVxudHdlZW4gICAgPSAodjEsIHYyLCB0KSAtPiBbKCgxLXQpKnYxWzBdKSArICh0KnYyWzBdKSwgKCgxLXQpKnYxWzFdKSArICh0KnYyWzFdKSwgKCgxLXQpKnYxWzJdKSArICh0KnYyWzJdKV1cbm1pZHBvaW50ID0gKHYxLCB2MikgLT4gbXVsdCAwLjUsIGFkZCB2MSwgdjJcbm9uZVRoaXJkID0gKHYxLCB2MikgLT4gdHdlZW4gdjEsIHYyLCAxLzMuMFxuXG5hbmdsZSA9ICh2MSwgdjIpIC0+IHZlYyh2MSkuYW5nbGUgdmVjKHYyKVxuXG5yb3RhdGUgPSAodiwgYXhpcywgYW5nbGUpIC0+XG4gICAgcm90ID0gUXVhdC5heGlzQW5nbGUgdmVjKGF4aXMpLCBhbmdsZVxuICAgIHJlcyA9IHJvdC5yb3RhdGVkIHZcbiAgICByZXMuY29vcmRzKClcblxudGFuZ2VudFBvaW50ID0gKHYxLCB2MikgLT4gIyBwb2ludCB3aGVyZSBsaW5lIHYxLi4udjIgdGFuZ2VudCB0byBhbiBvcmlnaW4gc3BoZXJlXG4gICAgZCA9IHN1YiB2MiwgdjFcbiAgICBsMiA9IG1hZzIgZFxuICAgIHJldHVybiB2MSBpZiBsMiA9PSAwXG4gICAgc3ViIHYxLCBtdWx0IGRvdChkLCB2MSkvbDIsIGRcblxuZWRnZURpc3QgPSAodjEsIHYyKSAtPiBzcXJ0IG1hZzIgdGFuZ2VudFBvaW50IHYxLCB2MiAjIGRpc3RhbmNlIG9mIGxpbmUgdjEuLi52MiB0byBvcmlnaW5cblxucG9pbnRSYXlEaXN0ID0gKHYsIHJwLCByZCkgLT5cbiAgICBcbiAgICB2cCA9IHN1YiBycCwgdlxuICAgIGNyID0gY3Jvc3MgcmQsIHZwXG4gICAgcG4gPSBjcm9zcyBjciwgcmRcbiAgICBwb2ludFBsYW5lRGlzdCB2LCBycCwgcG5cbiAgICBcbnBvaW50UGxhbmVEaXN0ID0gKHYsIHBwLCBwbikgLT5cbiAgICBcbiAgICBycCA9IHJheVBsYW5lIHYsIHBuLCBwcCwgcG5cbiAgICBtYWcgc3ViIHJwLCB2XG5cbiMgIDAwMDAwMDAgIDAwMCAgICAgICAwMDAwMDAwICAgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgICAgICAwMDAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAwIDAwMCAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIFxuIyAwMDAgICAgICAgMDAwICAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAgICBcbiMgMDAwICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAgICAgICAgXG4jICAwMDAwMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwICAwMDAgICAwMDAgIDAwICAgICAwMCAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAgIFxuXG5jbG9ja3dpc2UgPSAodmVydHMsIGluZGljZXMpIC0+XG4gICAgXG4gICAgdmwgPSBpbmRpY2VzLm1hcCAodmkpIC0+IHZlcnRzW3ZpXVxuXG4gICAgbWlkcCA9IGNlbnRlciB2bFxuXG4gICAgZnJzdCA9IHN1YiB2bFswXSwgbWlkcFxuICAgIGNyc3MgPSBjcm9zcyBmcnN0LCBtaWRwXG5cbiAgICBpbmRpY2VzLnNvcnQgKGEsYikgLT5cbiAgICAgICAgYXYgPSBzdWIgdmVydHNbYV0sIG1pZHBcbiAgICAgICAgYWEgPSBhbmdsZSBmcnN0LCBhdlxuICAgICAgICBhYSAqPSAtMSBpZiBkb3QoY3JzcywgYXYpIDwgMFxuICAgICAgICBcbiAgICAgICAgYnYgPSBzdWIgdmVydHNbYl0sIG1pZHBcbiAgICAgICAgYmIgPSBhbmdsZSBmcnN0LCBidlxuICAgICAgICBiYiAqPSAtMSBpZiBkb3QoY3JzcywgYnYpIDwgMFxuICAgICAgICBcbiAgICAgICAgYmIgLSBhYVxuICAgICAgICAgICAgICAgIFxuICAgIGluZGljZXNcbiAgICBcbiMgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwIDAwMCAgIFxuIyAwMDAwMDAwICAgIDAwMDAwMDAwMCAgICAwMDAwMCAgICBcbiMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgXG4jIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIFxuXG5yYXlQbGFuZSA9IChyYXlQb3MsIHJheURpcmVjdGlvbiwgcGxhbmVQb3MsIHBsYW5lTm9ybWFsKSAtPlxuICAgIFxuICAgIHggPSBkb3Qoc3ViKHBsYW5lUG9zLCByYXlQb3MpLCBwbGFuZU5vcm1hbCkgLyBkb3QocmF5RGlyZWN0aW9uLCBwbGFuZU5vcm1hbClcbiAgICBhZGQgcmF5UG9zLCBtdWx0IHgsIHJheURpcmVjdGlvblxuICBcbnJheVJheT0gKHJheUEsIHJheUIpIC0+XG5cbiAgICBBID0gcmF5QVswXVxuICAgIEIgPSByYXlCWzBdXG4gICAgYSA9IHN1YiByYXlBWzFdLCBBXG4gICAgYiA9IHN1YiByYXlCWzFdLCBCXG4gICAgYyA9IHN1YiBCLCBBXG4gICAgYWEgPSBkb3QgYSwgYVxuICAgIGFiID0gZG90IGEsIGJcbiAgICBhYyA9IGRvdCBhLCBjXG4gICAgYmMgPSBkb3QgYiwgY1xuICAgIGJiID0gZG90IGIsIGJcbiAgICBEID0gYWRkIEEsIG11bHQgKC1hYipiYythYypiYikvKGFhKmJiLWFiKmFiKSwgYVxuICAgIEUgPSBhZGQgQiwgbXVsdCAoIGFiKmFjLWJjKmFhKS8oYWEqYmItYWIqYWIpLCBiXG4gICAgXG4gICAgaWYgMC4xIDwgbWFnIHN1YiBELCBFXG4gICAgICAgIGtsb2cgJ25vIGludGVyc2VjdD8nIG1hZyBzdWIgRCwgRVxuICAgIG11bHQgMC41LCBhZGQgRCwgRVxuICAgIFxuIyBmaW5kIHZlY3RvciBvcnRob2dvbmFsIHRvIHBsYW5lIG9mIDMgcHRzXG5vcnRob2dvbmFsID0gKHYxLHYyLHYzKSAtPiBjcm9zcyBzdWIodjIsIHYxKSwgc3ViKHYzLCB2MilcblxuIyBmaW5kIGZpcnN0IGVsZW1lbnQgY29tbW9uIHRvIDMgc2V0cyBieSBicnV0ZSBmb3JjZSBzZWFyY2hcbmludGVyc2VjdCA9IChzZXQxLCBzZXQyLCBzZXQzKSAtPlxuICAgIGZvciBzMSBpbiBzZXQxXG4gICAgICAgIGZvciBzMiBpbiBzZXQyXG4gICAgICAgICAgICBpZiBzMSA9PSBzMlxuICAgICAgICAgICAgICAgIGZvciBzMyBpbiBzZXQzXG4gICAgICAgICAgICAgICAgICAgIGlmIHMxID09IHMzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gczFcbiAgICBudWxsICMgZW1wdHkgaW50ZXJzZWN0aW9uXG5cbmNhbGNDZW50cm9pZCA9ICh2ZXJ0aWNlcykgLT5cbiAgICBjZW50cm9pZFYgPSBbMCAwIDBdXG4gICAgZm9yIHYgaW4gdmVydGljZXNcbiAgICAgICAgY2VudHJvaWRWID0gYWRkIGNlbnRyb2lkViwgdlxuICAgIG11bHQgMSAvIHZlcnRpY2VzLmxlbmd0aCwgY2VudHJvaWRWIFxuXG4jIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAgICAgICBcbiMgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgIFxuIyAwMDAgMCAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgICAgXG4jIDAwMCAgMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAwIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICBcbiMgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgIFxuXG5ub3JtYWwgPSAodmVydGljZXMpIC0+XG5cbiAgICBudiA9IFswIDAgMF0gXG4gICAgW3YxLCB2Ml0gPSB2ZXJ0aWNlcy5zbGljZSAtMlxuICAgIGZvciB2MyBpbiB2ZXJ0aWNlc1xuICAgICAgICBudiA9IGFkZCBudiwgb3J0aG9nb25hbCB2MSwgdjIsIHYzXG4gICAgICAgIFt2MSwgdjJdID0gW3YyLCB2M11cbiAgICB1bml0IG52XG4gICAgXG5jZW50ZXIgPSAodmVydGljZXMpIC0+XG5cbiAgICBjdHIgPSBbMCAwIDBdXG4gICAgZm9yIHYgaW4gdmVydGljZXNcbiAgICAgICAgY3RyID0gYWRkIGN0ciwgdlxuICAgIG11bHQgMS4wL3ZlcnRpY2VzLmxlbmd0aCwgY3RyXG5cbmNvcHlWZWNBcnJheSA9ICh2ZWNBcnJheSkgLT4gIyBjb3BpZXMgYXJyYXkgb2YgYXJyYXlzIGJ5IHZhbHVlIChkZWVwIGNvcHkpXG4gICAgXG4gICAgbmV3VmVjQXJyYXkgPSBuZXcgQXJyYXkgdmVjQXJyYXkubGVuZ3RoXG4gICAgZW5kID0gdmVjQXJyYXkubGVuZ3RoXG4gICAgZm9yIGkgaW4gWzAuLi5lbmRdXG4gICAgICAgIG5ld1ZlY0FycmF5W2ldID0gdmVjQXJyYXlbaV0uc2xpY2UgMFxuICAgIG5ld1ZlY0FycmF5XG5cbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgXG4jIDAwMCAwIDAwMCAgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAgMDAwICAgICAgIFxuIyAwMDAwMDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgIDAwMDAgIDAwMDAwMDAgICBcbiMgMDAwICAgMDAwICAwMDAgIDAwMCAgMDAwMCAgMDAwICAgMDAwICAgICAgIDAwMCAgXG4jIDAwICAgICAwMCAgMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuXG5mYWNlc1RvV2luZ3MgPSAoZmFjZXMpIC0+XG4gICAgXG4gICAgbnZlcnQgPSB7fVxuICAgIHB2ZXJ0ID0ge31cbiAgICBlcG9vbCA9IFtdXG4gICAgZm9yIGZpIGluIFswLi4uZmFjZXMubGVuZ3RoXVxuICAgICAgICBlZGdlcyA9IGZhY2VUb0VkZ2VzIGZhY2VzW2ZpXVxuICAgICAgICBlZGdlcy5mb3JFYWNoIChlZGdlKSAtPiBcbiAgICAgICAgICAgIG52ZXJ0W2ZpXSA/PSB7fVxuICAgICAgICAgICAgcHZlcnRbZmldID89IHt9XG4gICAgICAgICAgICBudmVydFtmaV1bZWRnZVswXV0gPSBlZGdlWzFdXG4gICAgICAgICAgICBwdmVydFtmaV1bZWRnZVsxXV0gPSBlZGdlWzBdXG4gICAgICAgICAgICBlZGdlLnB1c2ggZnI6ZmlcbiAgICAgICAgZXBvb2wgPSBlcG9vbC5jb25jYXQgZWRnZXNcbiAgICAgICAgXG4gICAgd2luZ3MgPSBbXVxuICAgIFxuICAgIHdoaWxlIGVwb29sLmxlbmd0aFxuICAgICAgICBlZGdlID0gZXBvb2wuc2hpZnQoKVxuICAgICAgICBlZGdlWzJdLm5yID0gbnZlcnRbZWRnZVsyXS5mcl1bZWRnZVsxXV1cbiAgICAgICAgZWRnZVsyXS5wciA9IHB2ZXJ0W2VkZ2VbMl0uZnJdW2VkZ2VbMF1dXG4gICAgICAgIGZvciBvaSBpbiBbMC4uLmVwb29sLmxlbmd0aF1cbiAgICAgICAgICAgIG90aGVyID0gZXBvb2xbb2ldXG4gICAgICAgICAgICBpZiBvdGhlclswXSA9PSBlZGdlWzFdIGFuZCBvdGhlclsxXSA9PSBlZGdlWzBdXG4gICAgICAgICAgICAgICAgZWRnZVsyXS5mbCA9IG90aGVyWzJdLmZyXG4gICAgICAgICAgICAgICAgZWRnZVsyXS5ubCA9IHB2ZXJ0W2VkZ2VbMl0uZmxdW2VkZ2VbMV1dXG4gICAgICAgICAgICAgICAgZWRnZVsyXS5wbCA9IG52ZXJ0W2VkZ2VbMl0uZmxdW2VkZ2VbMF1dXG4gICAgICAgICAgICAgICAgZXBvb2wuc3BsaWNlIG9pLCAxXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgXG4gICAgICAgIHdpbmdzLnB1c2ggZWRnZVxuXG4gICAgd2luZ3NcblxuZmFjZVRvRWRnZXMgPSAoZmFjZSkgLT4gXG4gICAgIyBhcnJheSBvZiBlZGdlcyBbdjEsdjJdIGZvciBsaXN0IG9mIHZlcnRpY2VzXG4gICAgZWRnZXMgPSBbXVxuICAgIHYxID0gZmFjZVstMV1cbiAgICBmb3IgdjIgaW4gZmFjZVxuICAgICAgICBlZGdlcy5wdXNoIFt2MSwgdjJdXG4gICAgICAgIHYxID0gdjJcbiAgICBlZGdlc1xuICAgIFxuIyAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAwMCAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMDAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwMCAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwICAgICAgICAwMDAgMDAwICAgXG4jICAgIDAwMCAgICAgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMCAgMDAwMDAwMCAgIDAwMCAwIDAwMCAgICAgMDAwICAgICAwMDAgIDAwMDAwMCAgICAgIDAwMDAwICAgIFxuIyAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgIDAwMDAgICAgIDAwMCAgICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICBcbiMgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgXG5cbnRhbmdlbnRpZnkgPSAodmVydGljZXMsIGVkZ2VzKSAtPlxuICAgICMgYWRqdXN0cyB2ZXJ0aWNlcyBvbiBlZGdlcyBzdWNoIHRoYXQgZWFjaCBlZGdlIGlzIHRhbmdlbnQgdG8gYW4gb3JpZ2luIHNwaGVyZVxuICAgIG5ld1ZzID0gY29weVZlY0FycmF5IHZlcnRpY2VzXG4gICAgZm9yIGUgaW4gZWRnZXNcbiAgICAgICAgdCA9IHRhbmdlbnRQb2ludCBuZXdWc1tlWzBdXSwgbmV3VnNbZVsxXV0gXG4gICAgICAgIGMgPSBtdWx0ICgxLXNxcnQoZG90KHQsdCkpKSowLjA1LCB0XG4gICAgICAgIG5ld1ZzW2VbMF1dID0gYWRkIG5ld1ZzW2VbMF1dLCBjXG4gICAgICAgIG5ld1ZzW2VbMV1dID0gYWRkIG5ld1ZzW2VbMV1dLCBjXG4gICAgbmV3VnNcblxuIyAwMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4jIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgIDAwMCAgIDAwMCAgICAgICBcbiMgMDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwICAgIDAwMCAgICAwMDAgICAgMDAwMDAwMCAgIFxuIyAwMDAgICAgICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4jIDAwMCAgICAgICAgMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMDAwMDAgIDAwMDAwMDAwICBcblxucGxhbmFyaXplID0gKHZlcnRpY2VzLCBmYWNlcykgLT5cbiAgICAjIGFkanVzdHMgdmVydGljZXMgaW4gZWFjaCBmYWNlIHRvIGltcHJvdmUgaXRzIHBsYW5hcml0eVxuICAgIFNUQUJJTElUWV9GQUNUT1IgPSAwLjEgIyBIYWNrIHRvIGltcHJvdmUgY29udmVyZ2VuY2VcbiAgICBuZXdWcyA9IGNvcHlWZWNBcnJheSB2ZXJ0aWNlcyAjIGNvcHkgdmVydGljZXNcbiAgICBmb3IgZiBpbiBmYWNlc1xuICAgICAgICBjb29yZHMgPSBmLm1hcCAodikgLT4gdmVydGljZXNbdl1cbiAgICAgICAgbiA9IG5vcm1hbCBjb29yZHMgIyBmaW5kIGF2ZyBvZiBub3JtYWxzIGZvciBlYWNoIHZlcnRleCB0cmlwbGV0XG4gICAgICAgIGMgPSBjYWxjQ2VudHJvaWQgY29vcmRzICMgZmluZCBwbGFuYXIgY2VudHJvaWRcbiAgICAgICAgaWYgZG90KG4sIGMpIDwgMCAjIGNvcnJlY3Qgc2lnbiBpZiBuZWVkZWRcbiAgICAgICAgICAgIG4gPSBtdWx0IC0xLjAsIG5cbiAgICAgICAgZm9yIHYgaW4gZiAjIHByb2plY3QgKHZlcnRleCAtIGNlbnRyb2lkKSBvbnRvIG5vcm1hbCwgc3VidHJhY3Qgb2ZmIHRoaXMgY29tcG9uZW50XG4gICAgICAgICAgICBuZXdWc1t2XSA9IGFkZCBuZXdWc1t2XSwgbXVsdCBkb3QobXVsdChTVEFCSUxJVFlfRkFDVE9SLCBuKSwgc3ViKGMsIHZlcnRpY2VzW3ZdKSksIG5cbiAgICBuZXdWc1xuICAgIFxubW9kdWxlLmV4cG9ydHMgPVxuICAgIHZlYzogICAgICAgICAgICB2ZWNcbiAgICBhZGQ6ICAgICAgICAgICAgYWRkXG4gICAgc3ViOiAgICAgICAgICAgIHN1YlxuICAgIGRvdDogICAgICAgICAgICBkb3RcbiAgICBtYWc6ICAgICAgICAgICAgbWFnXG4gICAgbmVnOiAgICAgICAgICAgIG5lZ1xuICAgIHF1YXQ6ICAgICAgICAgICBxdWF0XG4gICAgbXVsdDogICAgICAgICAgIG11bHRcbiAgICB1bml0OiAgICAgICAgICAgdW5pdFxuICAgIGFuZ2xlOiAgICAgICAgICBhbmdsZVxuICAgIGNyb3NzOiAgICAgICAgICBjcm9zc1xuICAgIHR3ZWVuOiAgICAgICAgICB0d2VlblxuICAgIG5vcm1hbDogICAgICAgICBub3JtYWxcbiAgICBjZW50ZXI6ICAgICAgICAgY2VudGVyXG4gICAgcm90YXRlOiAgICAgICAgIHJvdGF0ZVxuICAgIHJheVJheTogICAgICAgICByYXlSYXlcbiAgICBlZGdlRGlzdDogICAgICAgZWRnZURpc3RcbiAgICBvbmVUaGlyZDogICAgICAgb25lVGhpcmRcbiAgICBtaWRwb2ludDogICAgICAgbWlkcG9pbnRcbiAgICByYXlQbGFuZTogICAgICAgcmF5UGxhbmVcbiAgICBpbnRlcnNlY3Q6ICAgICAgaW50ZXJzZWN0XG4gICAgY2xvY2t3aXNlOiAgICAgIGNsb2Nrd2lzZVxuICAgIHBsYW5hcml6ZTogICAgICBwbGFuYXJpemVcbiAgICB0YW5nZW50aWZ5OiAgICAgdGFuZ2VudGlmeVxuICAgIG9ydGhvZ29uYWw6ICAgICBvcnRob2dvbmFsXG4gICAgZmFjZVRvRWRnZXM6ICAgIGZhY2VUb0VkZ2VzXG4gICAgcG9pbnRSYXlEaXN0OiAgIHBvaW50UmF5RGlzdFxuICAgIGZhY2VzVG9XaW5nczogICBmYWNlc1RvV2luZ3NcbiAgICBjYWxjQ2VudHJvaWQ6ICAgY2FsY0NlbnRyb2lkXG4gICAgY29weVZlY0FycmF5OiAgIGNvcHlWZWNBcnJheVxuICAgIHRhbmdlbnRQb2ludDogICB0YW5nZW50UG9pbnRcbiAgICBwb2ludFBsYW5lRGlzdDogcG9pbnRQbGFuZURpc3RcbiAgICBcbiAgICAiXX0=
//# sourceURL=../../coffee/poly/math.coffee