// koffee 1.6.0

/*
00     00   0000000   000000000  000   000
000   000  000   000     000     000   000
000000000  000000000     000     000000000
000 0 000  000   000     000     000   000
000   000  000   000     000     000   000
 */
var E, Quat, Vect, _mult, add, angle, calcCentroid, center, clockwise, clone, copyVecArray, cross, dot, edgeDist, faceToEdges, facesToWings, intersect, klog, mag, mag2, midpoint, mult, neg, normal, oneThird, orthogonal, planarize, pointPlaneDist, pointRayDist, quat, rayPlane, rayRay, rotate, sqrt, sub, tangentPoint, tangentify, tween, unit, vec;

klog = require('kxk').klog;

E = Math.E, sqrt = Math.sqrt;

Vect = require('../vect');

Quat = require('../quat');

vec = function(x, y, z) {
    return new Vect(x, y, z);
};

quat = function(x, y, z, w) {
    return new Quat(x, y, z, w);
};

clone = function(obj) {
    var key, newInstance;
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
        newInstance[key] = clone(obj[key]);
    }
    return newInstance;
};

neg = function(v) {
    return [-v[0], -v[1], -v[2]];
};

mult = function(c, v) {
    return [c * v[0], c * v[1], c * v[2]];
};

_mult = function(v1, v2) {
    return [v1[0] * v2[0], v1[1] * v2[1], v1[2] * v2[2]];
};

add = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

sub = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

dot = function(v1, v2) {
    return (v1[0] * v2[0]) + (v1[1] * v2[1]) + (v1[2] * v2[2]);
};

cross = function(d1, d2) {
    return [(d1[1] * d2[2]) - (d1[2] * d2[1]), (d1[2] * d2[0]) - (d1[0] * d2[2]), (d1[0] * d2[1]) - (d1[1] * d2[0])];
};

mag = function(v) {
    return sqrt(dot(v, v));
};

mag2 = function(v) {
    return dot(v, v);
};

unit = function(v) {
    var l;
    if (l = mag(v)) {
        return mult(1 / l, v);
    } else {
        return [1, 0, 0];
    }
};

tween = function(v1, v2, t) {
    return [((1 - t) * v1[0]) + (t * v2[0]), ((1 - t) * v1[1]) + (t * v2[1]), ((1 - t) * v1[2]) + (t * v2[2])];
};

midpoint = function(v1, v2) {
    return mult(0.5, add(v1, v2));
};

oneThird = function(v1, v2) {
    return tween(v1, v2, 1 / 3.0);
};

angle = function(v1, v2) {
    return vec(v1).angle(vec(v2));
};

rotate = function(v, axis, angle) {
    var res, rot;
    rot = Quat.axisAngle(vec(axis), angle);
    res = rot.rotated(v);
    return res.coords();
};

tangentPoint = function(v1, v2) {
    var d, l2;
    d = sub(v2, v1);
    l2 = mag2(d);
    if (l2 === 0) {
        return v1;
    }
    return sub(v1, mult(dot(d, v1) / l2, d));
};

edgeDist = function(v1, v2) {
    return sqrt(mag2(tangentPoint(v1, v2)));
};

pointRayDist = function(v, rp, rd) {
    var cr, pn, vp;
    vp = sub(rp, v);
    cr = cross(rd, vp);
    pn = cross(cr, rd);
    return pointPlaneDist(v, rp, pn);
};

pointPlaneDist = function(v, pp, pn) {
    var rp;
    rp = rayPlane(v, pn, pp, pn);
    return mag(sub(rp, v));
};

clockwise = function(verts, indices) {
    var crss, frst, midp, vl;
    vl = indices.map(function(vi) {
        return verts[vi];
    });
    midp = center(vl);
    frst = sub(vl[0], midp);
    crss = cross(frst, midp);
    indices.sort(function(a, b) {
        var aa, av, bb, bv;
        av = sub(verts[a], midp);
        aa = angle(frst, av);
        if (dot(crss, av) < 0) {
            aa *= -1;
        }
        bv = sub(verts[b], midp);
        bb = angle(frst, bv);
        if (dot(crss, bv) < 0) {
            bb *= -1;
        }
        return bb - aa;
    });
    return indices;
};

rayPlane = function(rayPos, rayDirection, planePos, planeNormal) {
    var x;
    x = dot(sub(planePos, rayPos), planeNormal) / dot(rayDirection, planeNormal);
    return add(rayPos, mult(x, rayDirection));
};

rayRay = function(rayA, rayB) {
    var A, B, D, a, aa, ab, ac, b, bb, bc, c;
    A = rayA[0];
    B = rayB[0];
    a = sub(rayA[1], A);
    b = sub(rayB[1], B);
    c = sub(B, A);
    aa = dot(a, a);
    ab = dot(a, b);
    ac = dot(a, c);
    bc = dot(b, c);
    bb = dot(b, b);
    D = add(A, mult((-ab * bc + ac * bb) / (aa * bb - ab * ab), a));
    E = add(B, mult((ab * ac - bc * aa) / (aa * bb - ab * ab), b));
    if (0.1 < mag(sub(D, E))) {
        klog('no intersect?', mag(sub(D, E)));
    }
    return mult(0.5, add(D, E));
};

orthogonal = function(v1, v2, v3) {
    return cross(sub(v2, v1), sub(v3, v2));
};

intersect = function(set1, set2, set3) {
    var j, k, len, len1, len2, m, s1, s2, s3;
    for (j = 0, len = set1.length; j < len; j++) {
        s1 = set1[j];
        for (k = 0, len1 = set2.length; k < len1; k++) {
            s2 = set2[k];
            if (s1 === s2) {
                for (m = 0, len2 = set3.length; m < len2; m++) {
                    s3 = set3[m];
                    if (s1 === s3) {
                        return s1;
                    }
                }
            }
        }
    }
    return null;
};

calcCentroid = function(vertices) {
    var centroidV, j, len, v;
    centroidV = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        centroidV = add(centroidV, v);
    }
    return mult(1 / vertices.length, centroidV);
};

normal = function(vertices) {
    var j, len, nv, ref, ref1, v1, v2, v3;
    nv = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        nv = add(nv, orthogonal(v1, v2, v3));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return unit(nv);
};

center = function(vertices) {
    var ctr, j, len, v;
    ctr = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        ctr = add(ctr, v);
    }
    return mult(1.0 / vertices.length, ctr);
};

copyVecArray = function(vecArray) {
    var end, i, j, newVecArray, ref;
    newVecArray = new Array(vecArray.length);
    end = vecArray.length;
    for (i = j = 0, ref = end; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        newVecArray[i] = vecArray[i].slice(0);
    }
    return newVecArray;
};

facesToWings = function(faces) {
    var edge, edges, epool, fi, j, k, nvert, oi, other, pvert, ref, ref1, wings;
    nvert = {};
    pvert = {};
    epool = [];
    for (fi = j = 0, ref = faces.length; 0 <= ref ? j < ref : j > ref; fi = 0 <= ref ? ++j : --j) {
        edges = faceToEdges(faces[fi]);
        edges.forEach(function(edge) {
            if (nvert[fi] != null) {
                nvert[fi];
            } else {
                nvert[fi] = {};
            }
            if (pvert[fi] != null) {
                pvert[fi];
            } else {
                pvert[fi] = {};
            }
            nvert[fi][edge[0]] = edge[1];
            pvert[fi][edge[1]] = edge[0];
            return edge.push({
                fr: fi
            });
        });
        epool = epool.concat(edges);
    }
    wings = [];
    while (epool.length) {
        edge = epool.shift();
        edge[2].nr = nvert[edge[2].fr][edge[1]];
        edge[2].pr = pvert[edge[2].fr][edge[0]];
        for (oi = k = 0, ref1 = epool.length; 0 <= ref1 ? k < ref1 : k > ref1; oi = 0 <= ref1 ? ++k : --k) {
            other = epool[oi];
            if (other[0] === edge[1] && other[1] === edge[0]) {
                edge[2].fl = other[2].fr;
                edge[2].nl = pvert[edge[2].fl][edge[1]];
                edge[2].pl = nvert[edge[2].fl][edge[0]];
                epool.splice(oi, 1);
                break;
            }
        }
        wings.push(edge);
    }
    return wings;
};

faceToEdges = function(face) {
    var edges, j, len, v1, v2;
    edges = [];
    v1 = face.slice(-1)[0];
    for (j = 0, len = face.length; j < len; j++) {
        v2 = face[j];
        edges.push([v1, v2]);
        v1 = v2;
    }
    return edges;
};

tangentify = function(vertices, edges) {
    var c, e, j, len, newVs, t;
    newVs = copyVecArray(vertices);
    for (j = 0, len = edges.length; j < len; j++) {
        e = edges[j];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * 0.05, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, j, k, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = faces.length; j < len; j++) {
        f = faces[j];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (k = 0, len1 = f.length; k < len1; k++) {
            v = f[k];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

module.exports = {
    vec: vec,
    add: add,
    sub: sub,
    dot: dot,
    mag: mag,
    neg: neg,
    quat: quat,
    mult: mult,
    unit: unit,
    angle: angle,
    cross: cross,
    tween: tween,
    normal: normal,
    center: center,
    rotate: rotate,
    rayRay: rayRay,
    edgeDist: edgeDist,
    oneThird: oneThird,
    midpoint: midpoint,
    rayPlane: rayPlane,
    intersect: intersect,
    clockwise: clockwise,
    planarize: planarize,
    tangentify: tangentify,
    orthogonal: orthogonal,
    faceToEdges: faceToEdges,
    pointRayDist: pointRayDist,
    facesToWings: facesToWings,
    calcCentroid: calcCentroid,
    copyVecArray: copyVecArray,
    tangentPoint: tangentPoint,
    pointPlaneDist: pointPlaneDist
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/math.coffee