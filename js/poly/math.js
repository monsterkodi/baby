// koffee 1.6.0

/*
00     00   0000000   000000000  000   000
000   000  000   000     000     000   000
000000000  000000000     000     000000000
000 0 000  000   000     000     000   000
000   000  000   000     000     000   000
 */
var E, Quat, Vect, _, _mult, abs, add, calcCentroid, clone, copyVecArray, cross, dot, edgeDist, faceSignature, floor, intersect, klog, linePointDist2, mag, mag2, midpoint, mult, neg, normal, oneThird, orthogonal, planararea, planarize, pointPlaneDist, pow, project2dface, rad2deg, random, randomchoice, rayPlane, rayRay, recenter, reciprocal, reciprocalC, reciprocalN, ref, rescale, rotate, round, sigfigs, sqrt, sub, tangentPoint, tangentify, tween, unit;

ref = require('kxk'), _ = ref._, klog = ref.klog, rad2deg = ref.rad2deg;

E = Math.E, abs = Math.abs, floor = Math.floor, pow = Math.pow, random = Math.random, round = Math.round, sqrt = Math.sqrt;

Vect = require('../vect');

Quat = require('../quat');

sigfigs = function(N, nsigs) {
    var mantissa, truncated_mantissa;
    mantissa = N / pow(10, floor(console.log(N) / LN10));
    truncated_mantissa = round(mantissa * pow(10, nsigs - 1));
    return "" + truncated_mantissa;
};

clone = function(obj) {
    var key, newInstance;
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
        newInstance[key] = clone(obj[key]);
    }
    return newInstance;
};

randomchoice = function(array) {
    return array[floor(random() * array.length)];
};

neg = function(vec) {
    return [-vec[0], -vec[1], -vec[2]];
};

mult = function(c, vec) {
    return [c * vec[0], c * vec[1], c * vec[2]];
};

_mult = function(v1, v2) {
    return [v1[0] * v2[0], v1[1] * v2[1], v1[2] * v2[2]];
};

add = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

sub = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

dot = function(v1, v2) {
    return (v1[0] * v2[0]) + (v1[1] * v2[1]) + (v1[2] * v2[2]);
};

cross = function(d1, d2) {
    return [(d1[1] * d2[2]) - (d1[2] * d2[1]), (d1[2] * d2[0]) - (d1[0] * d2[2]), (d1[0] * d2[1]) - (d1[1] * d2[0])];
};

mag = function(vec) {
    return sqrt(dot(vec, vec));
};

mag2 = function(vec) {
    return dot(vec, vec);
};

unit = function(vec) {
    return mult(1 / sqrt(mag2(vec)), vec);
};

tween = function(v1, v2, t) {
    return [((1 - t) * v1[0]) + (t * v2[0]), ((1 - t) * v1[1]) + (t * v2[1]), ((1 - t) * v1[2]) + (t * v2[2])];
};

midpoint = function(v1, v2) {
    return mult(0.5, add(v1, v2));
};

oneThird = function(v1, v2) {
    return tween(v1, v2, 1 / 3.0);
};

rotate = function(vec, axis, angle) {
    var res, rot;
    rot = Quat.axisAngle(new Vect(axis), rad2deg(angle));
    res = rot.rotated(vec);
    return res.coords();
};

reciprocal = function(vec) {
    return mult(1.0 / mag2(vec), vec);
};

tangentPoint = function(v1, v2) {
    var d, l2;
    d = sub(v2, v1);
    l2 = mag2(d);
    if (l2 === 0) {
        return v1;
    }
    return sub(v1, mult(dot(d, v1) / l2, d));
};

edgeDist = function(v1, v2) {
    return sqrt(mag2(tangentPoint(v1, v2)));
};

linePointDist2 = function(v1, v2, v3) {
    var d13, d21, d23, m2, result, t;
    d21 = sub(v2, v1);
    d13 = sub(v1, v3);
    d23 = sub(v2, v3);
    m2 = mag2(d21);
    t = -dot(d13, d21) / m2;
    if (t <= 0) {
        result = mag2(d13);
    } else if (t >= 1) {
        result = mag2(d23);
    } else {
        result = mag2(cross(d21, d13)) / m2;
    }
    return result;
};

pointPlaneDist = function(pos, planePos, planeNormal) {
    return mag(sub(pos, rayPlane(pos, planeNormal, planePos, planeNormal)));
};

rayPlane = function(rayPos, rayDirection, planePos, planeNormal) {
    var x;
    x = dot(sub(planePos, rayPos), planeNormal) / dot(rayDirection, planeNormal);
    return add(rayPos, mult(x, rayDirection));
};

rayRay = function(rayA, rayB) {
    var A, B, D, a, aa, ab, ac, b, bb, bc, c;
    A = rayA[0];
    B = rayB[0];
    a = sub(rayA[1], A);
    b = sub(rayB[1], B);
    c = sub(B, A);
    aa = dot(a, a);
    ab = dot(a, b);
    ac = dot(a, c);
    bc = dot(b, c);
    bb = dot(b, b);
    D = add(A, mult((-ab * bc + ac * bb) / (aa * bb - ab * ab), a));
    E = add(B, mult((ab * ac - bc * aa) / (aa * bb - ab * ab), b));
    if (0.1 < mag(sub(D, E))) {
        klog('no intersect?', mag(sub(D, E)));
    }
    return mult(0.5, add(D, E));
};

orthogonal = function(v1, v2, v3) {
    return cross(sub(v2, v1), sub(v3, v2));
};

intersect = function(set1, set2, set3) {
    var j, k, l, len, len1, len2, s1, s2, s3;
    for (j = 0, len = set1.length; j < len; j++) {
        s1 = set1[j];
        for (k = 0, len1 = set2.length; k < len1; k++) {
            s2 = set2[k];
            if (s1 === s2) {
                for (l = 0, len2 = set3.length; l < len2; l++) {
                    s3 = set3[l];
                    if (s1 === s3) {
                        return s1;
                    }
                }
            }
        }
    }
    return null;
};

calcCentroid = function(vertices) {
    var centroidV, j, len, v;
    centroidV = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        centroidV = add(centroidV, v);
    }
    return mult(1 / vertices.length, centroidV);
};

normal = function(vertices) {
    var j, len, normalV, ref1, ref2, v1, v2, v3;
    normalV = [0, 0, 0];
    ref1 = vertices.slice(-2), v1 = ref1[0], v2 = ref1[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        normalV = add(normalV, orthogonal(v1, v2, v3));
        ref2 = [v2, v3], v1 = ref2[0], v2 = ref2[1];
    }
    return unit(normalV);
};

planararea = function(vertices) {
    var area, j, len, ref1, ref2, v1, v2, v3, vsum;
    area = 0.0;
    vsum = [0, 0, 0];
    ref1 = vertices.slice(-2), v1 = ref1[0], v2 = ref1[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        vsum = add(vsum, cross(v1, v2));
        ref2 = [v2, v3], v1 = ref2[0], v2 = ref2[1];
    }
    return area = abs(dot(normal(vertices), vsum) / 2.0);
};

faceSignature = function(vertices, sensitivity) {
    var cross_array, j, k, l, len, len1, len2, ref1, ref2, ref3, sig, v1, v2, v3, x;
    cross_array = [];
    ref1 = vertices.slice(-2), v1 = ref1[0], v2 = ref1[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        cross_array.push(mag(cross(sub(v1, v2), sub(v3, v2))));
        ref2 = [v2, v3], v1 = ref2[0], v2 = ref2[1];
    }
    cross_array.sort(function(a, b) {
        return a - b;
    });
    sig = '';
    for (k = 0, len1 = cross_array.length; k < len1; k++) {
        x = cross_array[k];
        sig += sigfigs(x, sensitivity);
    }
    ref3 = cross_array.reverse();
    for (l = 0, len2 = ref3.length; l < len2; l++) {
        x = ref3[l];
        sig += sigfigs(x, sensitivity);
    }
    return sig;
};

project2dface = function(verts) {
    var c, n, p, tmpverts, v0;
    tmpverts = clone(verts);
    v0 = verts[0];
    tmpverts = _.map(function(tmpverts, x) {
        return x - v0;
    });
    n = normal(verts);
    c = unit(calcCentroid(verts));
    p = cross(n, c);
    return tmpverts.map(function(v) {
        return [dot(n, v), dot(p, v)];
    });
};

copyVecArray = function(vecArray) {
    var end, i, j, newVecArray, ref1;
    newVecArray = new Array(vecArray.length);
    end = vecArray.length;
    for (i = j = 0, ref1 = end; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        newVecArray[i] = vecArray[i].slice(0);
    }
    return newVecArray;
};

tangentify = function(vertices, edges) {
    var c, e, j, len, newVs, t;
    newVs = copyVecArray(vertices);
    for (j = 0, len = edges.length; j < len; j++) {
        e = edges[j];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * 0.05, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

recenter = function(vertices, edges) {
    var edgecenters, j, len, polycenter, v;
    edgecenters = edges.map(function(arg) {
        var a, b;
        a = arg[0], b = arg[1];
        return tangentPoint(vertices[a], vertices[b]);
    });
    polycenter = [0, 0, 0];
    for (j = 0, len = edgecenters.length; j < len; j++) {
        v = edgecenters[j];
        polycenter = add(polycenter, v);
    }
    polycenter = mult(1 / edges.length, polycenter);
    return _.map(vertices, function(x) {
        return sub(x, polycenter);
    });
};

rescale = function(vertices) {
    var maxExtent, polycenter, s;
    polycenter = [0, 0, 0];
    maxExtent = _.max(_.map(vertices, function(x) {
        return mag(x);
    }));
    s = 1 / maxExtent;
    return _.map(vertices, function(x) {
        return [s * x[0], s * x[1], s * x[2]];
    });
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, j, k, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = faces.length; j < len; j++) {
        f = faces[j];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (k = 0, len1 = f.length; k < len1; k++) {
            v = f[k];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

reciprocalC = function(poly) {
    var c, centers, j, len;
    centers = poly.centers();
    for (j = 0, len = centers.length; j < len; j++) {
        c = centers[j];
        c = mult(1.0 / dot(c, c), c);
    }
    return centers;
};

reciprocalN = function(poly) {
    var ans, avgEdgeDist, centroid, f, j, k, len, len1, normalV, ref1, ref2, ref3, tmp, v1, v2, v3;
    ans = [];
    ref1 = poly.faces;
    for (j = 0, len = ref1.length; j < len; j++) {
        f = ref1[j];
        centroid = [0, 0, 0];
        normalV = [0, 0, 0];
        avgEdgeDist = 0.0;
        ref2 = f.slice(-2), v1 = ref2[0], v2 = ref2[1];
        for (k = 0, len1 = f.length; k < len1; k++) {
            v3 = f[k];
            centroid = add(centroid, poly.vertices[v3]);
            normalV = add(normalV, orthogonal(poly.vertices[v1], poly.vertices[v2], poly.vertices[v3]));
            avgEdgeDist += edgeDist(poly.vertices[v1], poly.vertices[v2]);
            ref3 = [v2, v3], v1 = ref3[0], v2 = ref3[1];
        }
        centroid = mult(1.0 / f.length, centroid);
        normalV = unit(normalV);
        avgEdgeDist = avgEdgeDist / f.length;
        tmp = reciprocal(mult(dot(centroid, normalV), normalV));
        ans.push(mult((1 + avgEdgeDist) / 2, tmp));
    }
    return ans;
};

module.exports = {
    add: add,
    sub: sub,
    dot: dot,
    mag: mag,
    neg: neg,
    mult: mult,
    unit: unit,
    cross: cross,
    tween: tween,
    normal: normal,
    rotate: rotate,
    rayRay: rayRay,
    oneThird: oneThird,
    midpoint: midpoint,
    calcCentroid: calcCentroid,
    copyVecArray: copyVecArray,
    reciprocal: reciprocal,
    edgeDist: edgeDist,
    intersect: intersect,
    orthogonal: orthogonal,
    tangentPoint: tangentPoint,
    pointPlaneDist: pointPlaneDist,
    rayPlane: rayPlane,
    rescale: rescale,
    recenter: recenter,
    planarize: planarize,
    reciprocalN: reciprocalN,
    reciprocalC: reciprocalC,
    tangentify: tangentify
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/math.coffee