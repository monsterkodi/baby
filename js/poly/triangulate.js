// koffee 1.6.0

/*
000000000  00000000   000   0000000   000   000   0000000   000   000  000       0000000   000000000  00000000  
   000     000   000  000  000   000  0000  000  000        000   000  000      000   000     000     000       
   000     0000000    000  000000000  000 0 000  000  0000  000   000  000      000000000     000     0000000   
   000     000   000  000  000   000  000  0000  000   000  000   000  000      000   000     000     000       
   000     000   000  000  000   000  000   000   0000000    0000000   0000000  000   000     000     00000000
 */
var Polyhedron, diagsToTris, getDiagonals, triEq, triangulate;

Polyhedron = require('./polyhedron').Polyhedron;

getDiagonals = function(verts) {
    var Area2, Between, Collinear, Diagonal, Diagonalie, InCone, Intersect, IntersectProp, Left, LeftOn, XOR, broke, diagonals, ear, facelen, head, k, limiter, n, origIdx, results, v0, v1, v2, v3, v4, y, z;
    limiter = 999;
    diagonals = [];
    ear = [];
    facelen = verts.length;
    XOR = function(x, y) {
        return (x || y) && !(x && y);
    };
    Area2 = function(Va, Vb, Vc) {
        return ((Vb[0] - Va[0]) * (Vc[1] - Va[1])) - ((Vc[0] - Va[0]) * (Vb[1] - Va[1]));
    };
    Left = function(Va, Vb, Vc) {
        return Area2(Va, Vb, Vc) > 0;
    };
    LeftOn = function(Va, Vb, Vc) {
        return Area2(Va, Vb, Vc) >= 0;
    };
    Collinear = function(Va, Vb, Vc) {
        return Area2(Va, Vb, Vc) === 0;
    };
    Between = function(Va, Vb, Vc) {
        if (Collinear(Va, Vb, Vc)) {
            return false;
        }
        if (Va[0] !== Vb[0]) {
            return ((Va[0] <= Vc[0]) && (Vc[0] <= Vb[0])) || ((Va[0] >= Vc[0]) && (Vc[0] >= Vb[0]));
        } else {
            return ((Va[1] <= Vc[1]) && (Vc[1] <= Vb[1])) || ((Va[1] >= Vc[1]) && (Vc[1] >= Vb[1]));
        }
    };
    IntersectProp = function(Va, Vb, Vc, Vd) {
        if (Collinear(Va, Vb, Vc) || Collinear(Va, Vb, Vd) || Collinear(Vc, Vd, Va) || Collinear(Vc, Vd, Vb)) {
            return false;
        }
        return XOR(Left(Va, Vb, Vc), Left(Va, Vb, Vd)) && XOR(Left(Vc, Vd, Va), Left(Vc, Vd, Vb));
    };
    Intersect = function(Va, Vb, Vc, Vd) {
        if (IntersectProp(Va, Vb, Vc, Vd)) {
            return true;
        } else {
            return Between(Va, Vb, Vc) || Between(Va, Vb, Vd) || Between(Vc, Vd, Va) || Between(Vc, Vd, Vb);
        }
    };
    InCone = function(a, b) {
        var a0, a1;
        a1 = (a + 1 + facelen) % facelen;
        a0 = ((a - 1) + facelen) % facelen;
        if (LeftOn(verts[a], verts[a1], verts[a0])) {
            return Left(verts[a], verts[b], verts[a0]) && Left(verts[b], verts[a], verts[a1]);
        }
        return !(LeftOn(verts[a], verts[b], verts[a1]) && LeftOn(verts[b], verts[a], verts[a0]));
    };
    Diagonalie = function(a, b) {
        var c, c1;
        c = 0;
        while (true) {
            c1 = (c + 1 + facelen) % facelen;
            if ((c !== a) && (c1 !== a) && (c !== b) && (c1 !== b) && IntersectProp(verts[a], verts[b], verts[c], verts[c1])) {
                return false;
            }
            c = (c + 1 + facelen) % facelen;
            if (c === 0) {
                break;
            }
        }
        return true;
    };
    Diagonal = function(a, b) {
        return InCone(a, b) && InCone(b, a) && Diagonalie(a, b);
    };
    v1 = 0;
    while (true) {
        v2 = (v1 + 1 + facelen) % facelen;
        v0 = ((v1 - 1) + facelen) % facelen;
        ear[v1] = Diagonal(v0, v2);
        v1 = (v1 + 1 + facelen) % facelen;
        if (v1 === 0) {
            break;
        }
    }
    origIdx = (function() {
        results = [];
        for (var k = 0; 0 <= facelen ? k < facelen : k > facelen; 0 <= facelen ? k++ : k--){ results.push(k); }
        return results;
    }).apply(this);
    n = facelen;
    z = limiter;
    head = 0;
    while ((z > 0) && (n > 3)) {
        z -= 1;
        v2 = head;
        y = limiter;
        while (true) {
            y -= 1;
            broke = false;
            if (ear[v2]) {
                v3 = (v2 + 1 + facelen) % facelen;
                v4 = (v3 + 1 + facelen) % facelen;
                v1 = ((v2 - 1) + facelen) % facelen;
                v0 = ((v1 - 1) + facelen) % facelen;
                diagonals.push([origIdx[v1], origIdx[v3]]);
                ear[v1] = Diagonal(v0, v3);
                ear[v3] = Diagonal(v1, v4);
                verts = verts.slice(0, +v2 + 1 || void 0).concat(verts.slice(v3));
                origIdx = origIdx.slice(0, +v2 + 1 || void 0).concat(origIdx.slice(v3));
                if (v0 > v2) {
                    v0 -= 1;
                }
                if (v1 > v2) {
                    v1 -= 1;
                }
                if (v3 > v2) {
                    v3 -= 1;
                }
                if (v4 > v2) {
                    v4 -= 1;
                }
                facelen--;
                head = v3;
                n--;
                broke = true;
            }
            v2 = (v2 + 1 + facelen) % facelen;
            if (y <= 0 || broke || v2 === head) {
                break;
            }
        }
    }
    return diagonals;
};

triEq = function(tri1, tri2) {
    return ((tri1[0] === tri2[0]) && (tri1[1] === tri2[1]) && (tri1[2] === tri2[2])) || ((tri1[0] === tri2[1]) && (tri1[1] === tri2[2]) && (tri1[2] === tri2[0])) || ((tri1[0] === tri2[2]) && (tri1[1] === tri2[0]) && (tri1[2] === tri2[1]));
};

diagsToTris = function(f, diags) {
    var already_present, d, e1, e2, edges, extant_tri, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, m, o, p, q, r, redges, ref, ref1, ref2, ref3, ref4, ref5, ref6, results, s, t, tri, tris, u, uniques, v1, v2;
    edges = [];
    redges = [];
    ref1 = (function() {
        results = [];
        for (var l = 0, ref = f.length; 0 <= ref ? l < ref : l > ref; 0 <= ref ? l++ : l--){ results.push(l); }
        return results;
    }).apply(this).map(function(i) {
        return [i, (i + 1) % f.length];
    });
    for (k = 0, len = ref1.length; k < len; k++) {
        ref2 = ref1[k], v1 = ref2[0], v2 = ref2[1];
        edges[v1] = [v2];
        redges[v2] = [v1];
    }
    for (m = 0, len1 = diags.length; m < len1; m++) {
        d = diags[m];
        edges[d[0]].push(d[1]);
        edges[d[1]].push(d[0]);
        redges[d[0]].push(d[1]);
        redges[d[1]].push(d[0]);
    }
    tris = [];
    for (o = 0, len2 = diags.length; o < len2; o++) {
        d = diags[o];
        ref3 = edges[d[1]];
        for (p = 0, len3 = ref3.length; p < len3; p++) {
            e1 = ref3[p];
            ref4 = redges[d[0]];
            for (q = 0, len4 = ref4.length; q < len4; q++) {
                e2 = ref4[q];
                if (e1 === e2) {
                    tris.push([d[0], d[1], e1]);
                }
            }
        }
        ref5 = edges[d[0]];
        for (r = 0, len5 = ref5.length; r < len5; r++) {
            e1 = ref5[r];
            ref6 = redges[d[1]];
            for (s = 0, len6 = ref6.length; s < len6; s++) {
                e2 = ref6[s];
                if (e1 === e2) {
                    tris.push([d[1], d[0], e1]);
                }
            }
        }
    }
    uniques = [tris.pop()];
    for (t = 0, len7 = tris.length; t < len7; t++) {
        tri = tris[t];
        already_present = false;
        for (u = 0, len8 = uniques.length; u < len8; u++) {
            extant_tri = uniques[u];
            if (triEq(tri, extant_tri)) {
                already_present = true;
                break;
            }
        }
        if (!already_present) {
            uniques.push(tri);
        }
    }
    return uniques;
};

triangulate = function(poly, colors) {
    var TwoDface, diags, f, k, l, newpoly, ref, ref1, ref2, ref3, tri, tris;
    klog("triangulate " + poly.name);
    newpoly = new Polyhedron(poly.name);
    newpoly.vertices = clone(poly.vertices);
    newpoly.face_classes = [];
    for (k = ref = i, ref1 = poly.faces.length; ref <= ref1 ? k < ref1 : k > ref1; ref <= ref1 ? k++ : k--) {
        f = poly.faces[i];
        if (f.length > 3) {
            TwoDface = project2dface(f.map(function(v) {
                return poly.vertices[v];
            }));
            diags = getDiagonals(TwoDface);
            tris = diagsToTris(f, diags);
            for (l = ref2 = j, ref3 = tris.length; ref2 <= ref3 ? l < ref3 : l > ref3; ref2 <= ref3 ? l++ : l--) {
                tri = tris[j];
                newpoly.faces.push([f[tri[0]], f[tri[1]], f[tri[2]]]);
                if (colors) {
                    newpoly.face_classes.push(poly.face_classes[i]);
                }
            }
        } else {
            newpoly.faces.push([f[0], f[1], f[2]]);
            if (colors) {
                newpoly.face_classes.push(poly.face_classes[i]);
            }
        }
    }
    return newpoly;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/triangulate.coffee