// koffee 1.6.0

/*
 0000000   00000000  000   000  00000000  00000000    0000000   000000000  00000000  
000        000       0000  000  000       000   000  000   000     000     000       
000  0000  0000000   000 0 000  0000000   0000000    000000000     000     0000000   
000   000  000       000  0000  000       000   000  000   000     000     000       
 0000000   00000000  000   000  00000000  000   000  000   000     000     00000000
 */
var PEG, alias, basemap, generate, klog, opmap, parser, poly, recenter, ref, replacements, rescale, topo;

klog = require('kxk').klog;

ref = require('./math'), recenter = ref.recenter, rescale = ref.rescale;

poly = require('./poly');

topo = require('./topo');

PEG = require('pegjs');

parser = PEG.generate("start  = opspec+\n\nopspec \n    = lettr:opcode args:opargs {return {\"op\":lettr,\"args\":args};}\n    / lettr:opcode float:float {return {\"op\":lettr,\"args\":[float]};}\n    / lettr:opcode             {return {\"op\":lettr,\"args\":[]};}\n\nopargs = \"(\"\n         num:( float:float \",\"? {return float} )+\n         \")\" {return num;}\n\nopcode = op:[a-zA-Z] {return op;}\n\nint   = digits:[0-9-]+   { return parseInt(digits.join(\"\"), 10); }\nfloat = digits:[0-9.-]+  { return parseFloat(digits.join(\"\"), 10); }");

basemap = {
    T: poly.tetrahedron,
    C: poly.cube,
    O: poly.octahedron,
    D: poly.dodecahedron,
    I: poly.icosahedron,
    P: poly.prism,
    A: poly.antiprism,
    Y: poly.pyramid,
    U: poly.cupola,
    V: poly.anticupola
};

opmap = {
    d: topo.dual,
    a: topo.ambo,
    k: topo.kis,
    t: topo.truncate,
    c: topo.chamfer,
    g: topo.gyro,
    w: topo.whirl,
    n: topo.inset,
    x: topo.extrude,
    p: topo.perspectiva,
    q: topo.quinto,
    u: topo.trisub,
    h: topo.hollow,
    f: topo.flatten,
    v: topo.canonicalize,
    z: topo.zirkularize,
    r: topo.sphericalize
};

replacements = [[/e/g, 'aa'], [/b/g, 'ta'], [/o/g, 'jj'], [/m/g, 'kj'], [/j/g, 'da'], [/s/g, 'dg'], [/dd/g, ''], [/ad/g, 'a'], [/gd/g, 'g'], [/aO/g, 'aC'], [/aI/g, 'aD'], [/gO/g, 'gC'], [/gI/g, 'gD']];

alias = {
    'rhombicosidodecahedron1': 'aD',
    'rhombicosidodecahedron3': 'vdaD',
    'rhombicosidodecahedron4': 'avdaD',
    'rhombicosidodecahedron': 'adaD'
};

generate = function(notation, normalize) {
    var baseargs, basefunc, dispatch, equiv, expanded, i, j, len, len1, op, opargs, opfunc, oplist, orig, ref1;
    if (normalize == null) {
        normalize = true;
    }
    dispatch = function(fn, arg) {
        return fn.apply(fn, arg || []);
    };
    expanded = notation;
    for (i = 0, len = replacements.length; i < len; i++) {
        ref1 = replacements[i], orig = ref1[0], equiv = ref1[1];
        expanded = expanded.replace(orig, equiv);
    }
    oplist = parser.parse(expanded).reverse();
    op = oplist.shift();
    basefunc = basemap[op['op']];
    baseargs = op['args'];
    poly = dispatch(basefunc, baseargs);
    for (j = 0, len1 = oplist.length; j < len1; j++) {
        op = oplist[j];
        opfunc = opmap[op['op']];
        opargs = [poly].concat(op['args']);
        poly = dispatch(opfunc, opargs);
    }
    if (normalize) {
        poly.vertices = recenter(poly.vertices, poly.edges());
        poly.vertices = rescale(poly.vertices);
    }
    poly.vertex = poly.vertices;
    poly.face = poly.faces;
    return poly;
};

generate.alias = alias;

module.exports = generate;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/generate.coffee