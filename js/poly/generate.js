// koffee 1.7.0

/*
 0000000   00000000  000   000  00000000  00000000    0000000   000000000  00000000  
000        000       0000  000  000       000   000  000   000     000     000       
000  0000  0000000   000 0 000  0000000   0000000    000000000     000     0000000   
000   000  000       000  0000  000       000   000  000   000     000     000       
 0000000   00000000  000   000  00000000  000   000  000   000     000     00000000
 */
var PEG, alias, basemap, generate, klog, opmap, parser, poly, replacements, topo;

klog = require('kxk').klog;

poly = require('./poly');

topo = require('./topo');

PEG = require('pegjs');

parser = PEG.generate("start  = opspec+\n\nopspec \n    = lettr:opcode args:opargs {return {\"op\":lettr,\"args\":args};}\n    / lettr:opcode float:float {return {\"op\":lettr,\"args\":[float]};}\n    / lettr:opcode             {return {\"op\":lettr,\"args\":[]};}\n\nopargs = \"(\"\n         num:( float:float \",\"? {return float} )+\n         \")\" {return num;}\n\nopcode = op:[a-zA-Z] {return op;}\n\nint   = digits:[0-9-]+   { return parseInt(digits.join(\"\"), 10); }\nfloat = digits:[0-9.-]+  { return parseFloat(digits.join(\"\"), 10); }");

basemap = {
    T: poly.tetrahedron,
    C: poly.cube,
    O: poly.octahedron,
    D: poly.dodecahedron,
    I: poly.icosahedron,
    P: poly.prism,
    A: poly.antiprism,
    Y: poly.pyramid,
    U: poly.cupola,
    V: poly.anticupola
};

opmap = {
    a: topo.ambo,
    b: topo.bevel,
    c: topo.chamfer,
    d: topo.dual,
    e: topo.expand,
    f: topo.flatten,
    g: topo.gyro,
    h: topo.hollow,
    k: topo.kis,
    n: topo.inset,
    p: topo.perspectiva,
    q: topo.quinto,
    r: topo.sphericalize,
    t: topo.truncate,
    u: topo.trisub,
    v: topo.canonicalize,
    w: topo.whirl,
    x: topo.extrude,
    z: topo.zirkularize
};

replacements = [[/o/g, 'jj'], [/m/g, 'kj'], [/j/g, 'da'], [/s/g, 'dg'], [/dd/g, ''], [/ad/g, 'a'], [/gd/g, 'g'], [/aO/g, 'aC'], [/aI/g, 'aD'], [/gO/g, 'gC'], [/gI/g, 'gD']];

alias = {
    cube: 'C',
    tetrahedron: 'T',
    octahedron: 'O',
    dodecahedron: 'D',
    icosahedron: 'I',
    'truncated tetrahedron': 't.6667T',
    'truncated cube': 't.5858C',
    'truncated octahedron': 't.6667O',
    'truncated dodecahedron': 't.5528D',
    'truncated icosahedron': 't.667I',
    'truncated cuboctahedron': 'z1.151b.667C',
    'truncated icosidodecahedron': 'z1.226b.667D',
    'cuboctahedron': 'djC',
    'icosidodecahedron': 'djD',
    'rhombicuboctahedron': 'e1.414C',
    'rhombicosidodecahedron': 'e.8541D',
    'snub cube': 'dgC',
    'snub dodecahedron': 'dgD',
    'triakis tetrahedron': 'vdtT',
    'triakis octahedron': 'vdtC',
    'tetrakis hexahedron': 'rdtO',
    'triakis icosahedron': 'vdtD',
    'pentakis dodecahedron': 'rkD',
    'disdyakis triacontahedron': 'rmD',
    'disdyakis dodecahedron': 'vmC',
    'rhombic dodecahedron': 'vjC',
    'rhombic triacontahedron': 'vjD',
    'deltoidal icositetrahedron': 'voC',
    'deltoidal hexecontahedron': 'oD',
    'pentagonal icositetrahedron': 'gC',
    'pentagonal hexecontahedron': 'gD'
};

generate = function(notation, normalize) {
    var baseargs, basefunc, dispatch, equiv, expanded, i, j, len, len1, op, opargs, opfunc, oplist, orig, ref;
    if (normalize == null) {
        normalize = true;
    }
    dispatch = function(fn, arg) {
        return fn.apply(fn, arg || []);
    };
    expanded = notation;
    for (i = 0, len = replacements.length; i < len; i++) {
        ref = replacements[i], orig = ref[0], equiv = ref[1];
        expanded = expanded.replace(orig, equiv);
    }
    oplist = parser.parse(expanded).reverse();
    op = oplist.shift();
    basefunc = basemap[op['op']];
    baseargs = op['args'];
    poly = dispatch(basefunc, baseargs);
    for (j = 0, len1 = oplist.length; j < len1; j++) {
        op = oplist[j];
        opfunc = opmap[op['op']];
        opargs = [poly].concat(op['args']);
        poly = dispatch(opfunc, opargs);
    }
    if (normalize) {
        poly.normalize();
    }
    return poly;
};

generate.alias = alias;

module.exports = generate;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/generate.coffee