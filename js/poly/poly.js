// koffee 1.6.0

/*
00000000    0000000   000      000   000
000   000  000   000  000       000 000 
00000000   000   000  000        00000  
000        000   000  000         000   
000         0000000   0000000     000
 */
var PI, Polyhedron, add, anticupola, antiprism, canonicalXYZ, cos, cube, cupola, dodecahedron, flatten, icosahedron, mult, normal, octahedron, pow, prism, pyramid, ref, ref1, sin, sqrt, tetrahedron;

ref = require('./math'), add = ref.add, mult = ref.mult, normal = ref.normal;

ref1 = require('./topo'), flatten = ref1.flatten, canonicalXYZ = ref1.canonicalXYZ;

sqrt = Math.sqrt, sin = Math.sin, cos = Math.cos, pow = Math.pow, PI = Math.PI;

Polyhedron = require('./polyhedron');

tetrahedron = function() {
    return new Polyhedron('T', [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]], [[1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, -1.0, 1.0]]);
};

cube = function() {
    return new Polyhedron('C', [[3, 0, 1, 2], [3, 4, 5, 0], [0, 5, 6, 1], [1, 6, 7, 2], [2, 7, 4, 3], [5, 4, 7, 6]], [[0.707, 0.707, 0.707], [-0.707, 0.707, 0.707], [-0.707, -0.707, 0.707], [0.707, -0.707, 0.707], [0.707, -0.707, -0.707], [0.707, 0.707, -0.707], [-0.707, 0.707, -0.707], [-0.707, -0.707, -0.707]]);
};

octahedron = function() {
    return new Polyhedron('O', [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [1, 4, 5], [1, 5, 2], [2, 5, 3], [3, 5, 4]], [[0, 0, 1.414], [1.414, 0, 0], [0, 1.414, 0], [-1.414, 0, 0], [0, -1.414, 0], [0, 0, -1.414]]);
};

icosahedron = function() {
    return new Polyhedron('I', [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 1], [1, 5, 7], [1, 7, 6], [1, 6, 2], [2, 6, 8], [2, 8, 3], [3, 8, 9], [3, 9, 4], [4, 9, 10], [4, 10, 5], [5, 10, 7], [6, 7, 11], [6, 11, 8], [7, 10, 11], [8, 11, 9], [9, 11, 10]], [[0, 0, 1.176], [1.051, 0, 0.526], [0.324, 1.0, 0.525], [-0.851, 0.618, 0.526], [-0.851, -0.618, 0.526], [0.325, -1.0, 0.526], [0.851, 0.618, -0.526], [0.851, -0.618, -0.526], [-0.325, 1.0, -0.526], [-1.051, 0, -0.526], [-0.325, -1.0, -0.526], [0, 0, -1.176]]);
};

dodecahedron = function() {
    return new Polyhedron('D', [[0, 1, 4, 7, 2], [0, 2, 6, 9, 3], [0, 3, 8, 5, 1], [1, 5, 11, 10, 4], [2, 7, 13, 12, 6], [3, 9, 15, 14, 8], [4, 10, 16, 13, 7], [5, 8, 14, 17, 11], [6, 12, 18, 15, 9], [10, 11, 17, 19, 16], [12, 13, 16, 19, 18], [14, 15, 18, 19, 17]], [[0, 0, 1.07047], [0.713644, 0, 0.797878], [-0.356822, 0.618, 0.797878], [-0.356822, -0.618, 0.797878], [0.797878, 0.618034, 0.356822], [0.797878, -0.618, 0.356822], [-0.934172, 0.381966, 0.356822], [0.136294, 1.0, 0.356822], [0.136294, -1.0, 0.356822], [-0.934172, -0.381966, 0.356822], [0.934172, 0.381966, -0.356822], [0.934172, -0.381966, -0.356822], [-0.797878, 0.618, -0.356822], [-0.136294, 1.0, -0.356822], [-0.136294, -1.0, -0.356822], [-0.797878, -0.618034, -0.356822], [0.356822, 0.618, -0.797878], [0.356822, -0.618, -0.797878], [-0.713644, 0, -0.797878], [0, 0, -1.07047]]);
};

prism = function(n) {
    var h, i, j, k, l, m, o, poly, ref2, ref3, ref4, ref5, ref6, results, results1, theta;
    theta = (2 * PI) / n;
    h = sin(theta / 2);
    poly = new Polyhedron("P" + n);
    for (i = j = 0, ref2 = n; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), -h]);
    }
    for (i = k = 0, ref3 = n; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), h]);
    }
    poly.faces.push((function() {
        results = [];
        for (var l = ref4 = n - 1; ref4 <= 0 ? l <= 0 : l >= 0; ref4 <= 0 ? l++ : l--){ results.push(l); }
        return results;
    }).apply(this));
    poly.faces.push((function() {
        results1 = [];
        for (var m = n, ref5 = 2 * n; n <= ref5 ? m < ref5 : m > ref5; n <= ref5 ? m++ : m--){ results1.push(m); }
        return results1;
    }).apply(this));
    for (i = o = 0, ref6 = n; 0 <= ref6 ? o < ref6 : o > ref6; i = 0 <= ref6 ? ++o : --o) {
        poly.faces.push([i, (i + 1) % n, ((i + 1) % n) + n, i + n]);
    }
    return flatten(poly, 1);
};

antiprism = function(n) {
    var f, h, i, j, k, l, m, o, poly, r, ref2, ref3, ref4, ref5, ref6, results, results1, theta;
    theta = (2 * PI) / n;
    h = sqrt(1 - (4 / ((4 + (2 * cos(theta / 2))) - (2 * cos(theta)))));
    r = sqrt(1 - h * h);
    f = sqrt(h * h + pow(r * cos(theta / 2), 2));
    r = -r / f;
    h = -h / f;
    poly = new Polyhedron("A" + n);
    for (i = j = 0, ref2 = n; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        poly.vertices.push([r * cos(i * theta), r * sin(i * theta), h]);
    }
    for (i = k = 0, ref3 = n; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {
        poly.vertices.push([r * cos((i + 0.5) * theta), r * sin((i + 0.5) * theta), -h]);
    }
    poly.faces.push((function() {
        results = [];
        for (var l = ref4 = n - 1; ref4 <= 0 ? l <= 0 : l >= 0; ref4 <= 0 ? l++ : l--){ results.push(l); }
        return results;
    }).apply(this));
    poly.faces.push((function() {
        results1 = [];
        for (var m = n, ref5 = (2 * n) - 1; n <= ref5 ? m <= ref5 : m >= ref5; n <= ref5 ? m++ : m--){ results1.push(m); }
        return results1;
    }).apply(this));
    for (i = o = 0, ref6 = n; 0 <= ref6 ? o < ref6 : o > ref6; i = 0 <= ref6 ? ++o : --o) {
        poly.faces.push([i, (i + 1) % n, i + n]);
        poly.faces.push([i, i + n, (((n + i) - 1) % n) + n]);
    }
    return flatten(poly, 1);
};

pyramid = function(n) {
    var height, i, j, k, l, poly, ref2, ref3, ref4, results, theta;
    theta = (2 * PI) / n;
    height = 1;
    poly = new Polyhedron("Y" + n);
    for (i = j = 0, ref2 = n; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), -0.2]);
    }
    poly.vertices.push([0, 0, height]);
    poly.faces.push((function() {
        results = [];
        for (var k = ref3 = n - 1; ref3 <= 0 ? k <= 0 : k >= 0; ref3 <= 0 ? k++ : k--){ results.push(k); }
        return results;
    }).apply(this));
    for (i = l = 0, ref4 = n; 0 <= ref4 ? l < ref4 : l > ref4; i = 0 <= ref4 ? ++l : --l) {
        poly.faces.push([i, (i + 1) % n, n]);
    }
    return canonicalXYZ(poly, 3);
};

cupola = function(n, alpha, height) {
    var i, j, k, l, m, o, poly, rb, ref2, ref3, ref4, ref5, ref6, ref7, results, results1, rt, s;
    if (n != null) {
        n;
    } else {
        n = 3;
    }
    if (alpha != null) {
        alpha;
    } else {
        alpha = 0.0;
    }
    poly = new Polyhedron("U" + n);
    if (n < 2) {
        return poly;
    }
    s = 1.0;
    rb = s / 2 / sin(PI / 2 / n);
    rt = s / 2 / sin(PI / n);
    if (!height) {
        height = rb - rt;
        if ((2 <= n && n <= 5)) {
            height = s * sqrt(1 - 1 / 4 / sin(PI / n) / sin(PI / n));
        }
    }
    for (i = j = 0, ref2 = 3 * n; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        poly.vertices.push([0, 0, 0]);
    }
    for (i = k = 0, ref3 = n; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {
        poly.vertices[2 * i] = [rb * cos(PI * (2 * i) / n + PI / 2 / n + alpha), rb * sin(PI * (2 * i) / n + PI / 2 / n + alpha), 0.0];
        poly.vertices[2 * i + 1] = [rb * cos(PI * (2 * i + 1) / n + PI / 2 / n - alpha), rb * sin(PI * (2 * i + 1) / n + PI / 2 / n - alpha), 0.0];
        poly.vertices[2 * n + i] = [rt * cos(2 * PI * i / n), rt * sin(2 * PI * i / n), height];
    }
    poly.faces.push((function() {
        results = [];
        for (var l = ref4 = 2 * n - 1; ref4 <= 0 ? l <= 0 : l >= 0; ref4 <= 0 ? l++ : l--){ results.push(l); }
        return results;
    }).apply(this));
    poly.faces.push((function() {
        results1 = [];
        for (var m = ref5 = 2 * n, ref6 = 3 * n - 1; ref5 <= ref6 ? m <= ref6 : m >= ref6; ref5 <= ref6 ? m++ : m--){ results1.push(m); }
        return results1;
    }).apply(this));
    for (i = o = 0, ref7 = n; 0 <= ref7 ? o < ref7 : o > ref7; i = 0 <= ref7 ? ++o : --o) {
        poly.faces.push([(2 * i + 1) % (2 * n), (2 * i + 2) % (2 * n), 2 * n + (i + 1) % n]);
        poly.faces.push([2 * i, (2 * i + 1) % (2 * n), 2 * n + (i + 1) % n, 2 * n + i]);
    }
    return poly;
};

anticupola = function(n, alpha, height) {
    var i, j, k, l, m, o, poly, rb, ref2, ref3, ref4, ref5, ref6, ref7, results, results1, rt, s;
    if (n != null) {
        n;
    } else {
        n = 3;
    }
    if (alpha != null) {
        alpha;
    } else {
        alpha = 0.0;
    }
    poly = new Polyhedron("U" + n);
    if (n < 3) {
        return poly;
    }
    s = 1.0;
    rb = s / 2 / sin(PI / 2 / n);
    rt = s / 2 / sin(PI / n);
    if (!height) {
        height = rb - rt;
    }
    for (i = j = 0, ref2 = 3 * n; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        poly.vertices.push([0, 0, 0]);
    }
    for (i = k = 0, ref3 = n; 0 <= ref3 ? k < ref3 : k > ref3; i = 0 <= ref3 ? ++k : --k) {
        poly.vertices[2 * i] = [rb * cos(PI * (2 * i) / n + alpha), rb * sin(PI * (2 * i) / n + alpha), 0.0];
        poly.vertices[2 * i + 1] = [rb * cos(PI * (2 * i + 1) / n - alpha), rb * sin(PI * (2 * i + 1) / n - alpha), 0.0];
        poly.vertices[2 * n + i] = [rt * cos(2 * PI * i / n), rt * sin(2 * PI * i / n), height];
    }
    poly.faces.push((function() {
        results = [];
        for (var l = ref4 = 2 * n - 1; ref4 <= 0 ? l <= 0 : l >= 0; ref4 <= 0 ? l++ : l--){ results.push(l); }
        return results;
    }).apply(this));
    poly.faces.push((function() {
        results1 = [];
        for (var m = ref5 = 2 * n, ref6 = 3 * n - 1; ref5 <= ref6 ? m <= ref6 : m >= ref6; ref5 <= ref6 ? m++ : m--){ results1.push(m); }
        return results1;
    }).apply(this));
    for (i = o = 0, ref7 = n; 0 <= ref7 ? o < ref7 : o > ref7; i = 0 <= ref7 ? ++o : --o) {
        poly.faces.push([(2 * i) % (2 * n), (2 * i + 1) % (2 * n), 2 * n + i % n]);
        poly.faces.push([2 * n + (i + 1) % n, (2 * i + 1) % (2 * n), (2 * i + 2) % (2 * n)]);
        poly.faces.push([2 * n + (i + 1) % n, 2 * n + i % n, (2 * i + 1) % (2 * n)]);
    }
    return poly;
};

module.exports = {
    cube: cube,
    octahedron: octahedron,
    tetrahedron: tetrahedron,
    icosahedron: icosahedron,
    dodecahedron: dodecahedron,
    prism: prism,
    cupola: cupola,
    pyramid: pyramid,
    antiprism: antiprism,
    anticupola: anticupola
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/poly.coffee