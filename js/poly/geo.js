// koffee 1.6.0

/*
 0000000   00000000   0000000   
000        000       000   000  
000  0000  0000000   000   000  
000   000  000       000   000  
 0000000   00000000   0000000
 */
var Polyhedron, _, add, calcCentroid, copyVecArray, dot, edgeDist, mag, mult, normal, orthogonal, planarize, recenter, reciprocal, reciprocalC, reciprocalN, ref, rescale, sqrt, sub, tangentPoint, tangentify, unit;

Polyhedron = require('./polyhedron');

_ = require('kxk')._;

ref = require('./math'), add = ref.add, sub = ref.sub, dot = ref.dot, mag = ref.mag, mult = ref.mult, unit = ref.unit, normal = ref.normal, orthogonal = ref.orthogonal, reciprocal = ref.reciprocal, edgeDist = ref.edgeDist, tangentPoint = ref.tangentPoint, calcCentroid = ref.calcCentroid, copyVecArray = ref.copyVecArray;

sqrt = Math.sqrt;

tangentify = function(vertices, edges) {
    var c, e, i, len, newVs, t;
    newVs = copyVecArray(vertices);
    for (i = 0, len = edges.length; i < len; i++) {
        e = edges[i];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * 0.05, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

recenter = function(vertices, edges) {
    var edgecenters, i, len, polycenter, v;
    edgecenters = edges.map(function(arg) {
        var a, b;
        a = arg[0], b = arg[1];
        return tangentPoint(vertices[a], vertices[b]);
    });
    polycenter = [0, 0, 0];
    for (i = 0, len = edgecenters.length; i < len; i++) {
        v = edgecenters[i];
        polycenter = add(polycenter, v);
    }
    polycenter = mult(1 / edges.length, polycenter);
    return _.map(vertices, function(x) {
        return sub(x, polycenter);
    });
};

rescale = function(vertices) {
    var maxExtent, polycenter, s;
    polycenter = [0, 0, 0];
    maxExtent = _.max(_.map(vertices, function(x) {
        return mag(x);
    }));
    s = 1 / maxExtent;
    return _.map(vertices, function(x) {
        return [s * x[0], s * x[1], s * x[2]];
    });
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, i, j, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (i = 0, len = faces.length; i < len; i++) {
        f = faces[i];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (j = 0, len1 = f.length; j < len1; j++) {
            v = f[j];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

reciprocalC = function(poly) {
    var c, centers, i, len;
    centers = poly.centers();
    for (i = 0, len = centers.length; i < len; i++) {
        c = centers[i];
        c = mult(1.0 / dot(c, c), c);
    }
    return centers;
};

reciprocalN = function(poly) {
    var ans, avgEdgeDist, centroid, f, i, j, len, len1, normalV, ref1, ref2, ref3, tmp, v1, v2, v3;
    ans = [];
    ref1 = poly.faces;
    for (i = 0, len = ref1.length; i < len; i++) {
        f = ref1[i];
        centroid = [0, 0, 0];
        normalV = [0, 0, 0];
        avgEdgeDist = 0.0;
        ref2 = f.slice(-2), v1 = ref2[0], v2 = ref2[1];
        for (j = 0, len1 = f.length; j < len1; j++) {
            v3 = f[j];
            centroid = add(centroid, poly.vertices[v3]);
            normalV = add(normalV, orthogonal(poly.vertices[v1], poly.vertices[v2], poly.vertices[v3]));
            avgEdgeDist += edgeDist(poly.vertices[v1], poly.vertices[v2]);
            ref3 = [v2, v3], v1 = ref3[0], v2 = ref3[1];
        }
        centroid = mult(1.0 / f.length, centroid);
        normalV = unit(normalV);
        avgEdgeDist = avgEdgeDist / f.length;
        tmp = reciprocal(mult(dot(centroid, normalV), normalV));
        ans.push(mult((1 + avgEdgeDist) / 2, tmp));
    }
    return ans;
};

module.exports = {
    rescale: rescale,
    recenter: recenter,
    planarize: planarize,
    reciprocalN: reciprocalN,
    reciprocalC: reciprocalC,
    tangentify: tangentify
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/geo.coffee