// koffee 1.6.0

/*
 0000000   00000000   0000000   
000        000       000   000  
000  0000  0000000   000   000  
000   000  000       000   000  
 0000000   00000000   0000000
 */
var LN10, PI, _, _mult, abs, acos, add, adjustXYZ, asin, atan, calcCentroid, canonicalXYZ, canonicalize, clone, copyVecArray, cos, cross, dot, edgeDist, eye3, faceSignature, floor, getVec2VecRotM, intersect, invperspT, linePointDist2, log, mag, mag2, midpoint, mm3, mult, mv3, normal, oneThird, orthogonal, perspT, planararea, planarize, pow, project2dface, random, randomchoice, recenter, reciprocal, reciprocalC, reciprocalN, rescale, rotm, round, sigfigs, sin, sqrt, sub, tan, tangentPoint, tangentify, tween, unit, vec_rotm;

_ = require('kxk')._;

random = Math.random, round = Math.round, floor = Math.floor, sqrt = Math.sqrt, sin = Math.sin, cos = Math.cos, tan = Math.tan, asin = Math.asin, acos = Math.acos, atan = Math.atan, abs = Math.abs, pow = Math.pow, log = Math.log, PI = Math.PI, LN10 = Math.LN10;

sigfigs = function(N, nsigs) {
    var mantissa, truncated_mantissa;
    mantissa = N / pow(10, floor(console.log(N) / LN10));
    truncated_mantissa = round(mantissa * pow(10, nsigs - 1));
    return "" + truncated_mantissa;
};

clone = function(obj) {
    var key, newInstance;
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
        newInstance[key] = clone(obj[key]);
    }
    return newInstance;
};

randomchoice = function(array) {
    return array[floor(random() * array.length)];
};

mult = function(c, vec) {
    return [c * vec[0], c * vec[1], c * vec[2]];
};

_mult = function(v1, v2) {
    return [v1[0] * v2[0], v1[1] * v2[1], v1[2] * v2[2]];
};

add = function(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1], v1[2] + v2[2]];
};

sub = function(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]];
};

dot = function(v1, v2) {
    return (v1[0] * v2[0]) + (v1[1] * v2[1]) + (v1[2] * v2[2]);
};

cross = function(d1, d2) {
    return [(d1[1] * d2[2]) - (d1[2] * d2[1]), (d1[2] * d2[0]) - (d1[0] * d2[2]), (d1[0] * d2[1]) - (d1[1] * d2[0])];
};

mag = function(vec) {
    return sqrt(dot(vec, vec));
};

mag2 = function(vec) {
    return dot(vec, vec);
};

unit = function(vec) {
    return mult(1 / sqrt(mag2(vec)), vec);
};

tween = function(v1, v2, t) {
    return [((1 - t) * v1[0]) + (t * v2[0]), ((1 - t) * v1[1]) + (t * v2[1]), ((1 - t) * v1[2]) + (t * v2[2])];
};

midpoint = (function(_this) {
    return function(v1, v2) {
        return mult(1 / 2.0, add(v1, v2));
    };
})(this);

oneThird = (function(_this) {
    return function(v1, v2) {
        return tween(v1, v2, 1 / 3.0);
    };
})(this);

reciprocal = function(vec) {
    return mult(1.0 / mag2(vec), vec);
};

tangentPoint = function(v1, v2) {
    var d;
    d = sub(v2, v1);
    return sub(v1, mult(dot(d, v1) / mag2(d), d));
};

edgeDist = function(v1, v2) {
    return sqrt(mag2(tangentPoint(v1, v2)));
};

linePointDist2 = function(v1, v2, v3) {
    var d13, d21, d23, m2, result, t;
    d21 = sub(v2, v1);
    d13 = sub(v1, v3);
    d23 = sub(v2, v3);
    m2 = mag2(d21);
    t = -dot(d13, d21) / m2;
    if (t <= 0) {
        result = mag2(d13);
    } else if (t >= 1) {
        result = mag2(d23);
    } else {
        result = mag2(cross(d21, d13)) / m2;
    }
    return result;
};

orthogonal = function(v1, v2, v3) {
    return cross(sub(v2, v1), sub(v3, v2));
};

intersect = function(set1, set2, set3) {
    var j, k, l, len, len1, len2, s1, s2, s3;
    for (j = 0, len = set1.length; j < len; j++) {
        s1 = set1[j];
        for (k = 0, len1 = set2.length; k < len1; k++) {
            s2 = set2[k];
            if (s1 === s2) {
                for (l = 0, len2 = set3.length; l < len2; l++) {
                    s3 = set3[l];
                    if (s1 === s3) {
                        return s1;
                    }
                }
            }
        }
    }
    return null;
};

calcCentroid = function(vertices) {
    var centroidV, j, len, v;
    centroidV = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        centroidV = add(centroidV, v);
    }
    return mult(1 / vertices.length, centroidV);
};

normal = function(vertices) {
    var j, len, normalV, ref, ref1, v1, v2, v3;
    normalV = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        normalV = add(normalV, orthogonal(v1, v2, v3));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return unit(normalV);
};

planararea = function(vertices) {
    var area, j, len, ref, ref1, v1, v2, v3, vsum;
    area = 0.0;
    vsum = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        vsum = add(vsum, cross(v1, v2));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return area = abs(dot(normal(vertices), vsum) / 2.0);
};

faceSignature = function(vertices, sensitivity) {
    var cross_array, j, k, l, len, len1, len2, ref, ref1, ref2, sig, v1, v2, v3, x;
    cross_array = [];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        cross_array.push(mag(cross(sub(v1, v2), sub(v3, v2))));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    cross_array.sort(function(a, b) {
        return a - b;
    });
    sig = '';
    for (k = 0, len1 = cross_array.length; k < len1; k++) {
        x = cross_array[k];
        sig += sigfigs(x, sensitivity);
    }
    ref2 = cross_array.reverse();
    for (l = 0, len2 = ref2.length; l < len2; l++) {
        x = ref2[l];
        sig += sigfigs(x, sensitivity);
    }
    return sig;
};

project2dface = function(verts) {
    var c, n, p, tmpverts, v0;
    tmpverts = clone(verts);
    v0 = verts[0];
    tmpverts = _.map(function(tmpverts, x) {
        return x - v0;
    });
    n = normal(verts);
    c = unit(calcCentroid(verts));
    p = cross(n, c);
    return tmpverts.map((function(_this) {
        return function(v) {
            return [dot(n, v), dot(p, v)];
        };
    })(this));
};

copyVecArray = function(vecArray) {
    var end, i, j, newVecArray, ref;
    newVecArray = new Array(vecArray.length);
    end = vecArray.length;
    for (i = j = 0, ref = end; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        newVecArray[i] = vecArray[i].slice(0);
    }
    return newVecArray;
};

mv3 = function(mat, vec) {
    return [(mat[0][0] * vec[0]) + (mat[0][1] * vec[1]) + (mat[0][2] * vec[2]), (mat[1][0] * vec[0]) + (mat[1][1] * vec[1]) + (mat[1][2] * vec[2]), (mat[2][0] * vec[0]) + (mat[2][1] * vec[1]) + (mat[2][2] * vec[2])];
};

mm3 = function(A, B) {
    return [[(A[0][0] * B[0][0]) + (A[0][1] * B[1][0]) + (A[0][2] * B[2][0]), (A[0][0] * B[0][1]) + (A[0][1] * B[1][1]) + (A[0][2] * B[2][1]), (A[0][0] * B[0][2]) + (A[0][1] * B[1][2]) + (A[0][2] * B[2][2])], [(A[1][0] * B[0][0]) + (A[1][1] * B[1][0]) + (A[1][2] * B[2][0]), (A[1][0] * B[0][1]) + (A[1][1] * B[1][1]) + (A[1][2] * B[2][1]), (A[1][0] * B[0][2]) + (A[1][1] * B[1][2]) + (A[1][2] * B[2][2])], [(A[2][0] * B[0][0]) + (A[2][1] * B[1][0]) + (A[2][2] * B[2][0]), (A[2][0] * B[0][1]) + (A[2][1] * B[1][1]) + (A[2][2] * B[2][1]), (A[2][0] * B[0][2]) + (A[2][1] * B[1][2]) + (A[2][2] * B[2][2])]];
};

eye3 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];

rotm = function(phi, theta, psi) {
    var xy_mat, xz_mat, yz_mat;
    xy_mat = [[cos(phi), -1.0 * sin(phi), 0.0], [sin(phi), cos(phi), 0.0], [0.0, 0.0, 1.0]];
    yz_mat = [[cos(theta), 0, -1.0 * sin(theta)], [0, 1, 0], [sin(theta), 0, cos(theta)]];
    xz_mat = [[1.0, 0, 0], [0, cos(psi), -1.0 * sin(psi)], [0, sin(psi), cos(psi)]];
    return mm3(xz_mat, mm3(yz_mat, xy_mat));
};

vec_rotm = function(angle, x, y, z) {
    var cosA, length, m, ref, ref1, sinA, sinA2, x2, y2, z2;
    angle /= 2;
    sinA = sin(angle);
    cosA = cos(angle);
    sinA2 = sinA * sinA;
    length = mag([x, y, z]);
    if (length === 0) {
        ref = [0, 0, 1], x = ref[0], y = ref[1], z = ref[2];
    }
    if (length !== 1) {
        ref1 = unit([x, y, z]), x = ref1[0], y = ref1[1], z = ref1[2];
    }
    if ((x === 1) && (y === 0) && (z === 0)) {
        m = [[1, 0, 0], [0, 1 - (2 * sinA2), 2 * sinA * cosA], [0, -2 * sinA * cosA, 1 - (2 * sinA2)]];
    } else if ((x === 0) && (y === 1) && (z === 0)) {
        m = [[1 - (2 * sinA2), 0, -2 * sinA * cosA], [0, 1, 0], [2 * sinA * cosA, 0, 1 - (2 * sinA2)]];
    } else if ((x === 0) && (y === 0) && (z === 1)) {
        m = [[1 - (2 * sinA2), 2 * sinA * cosA, 0], [-2 * sinA * cosA, 1 - (2 * sinA2), 0], [0, 0, 1]];
    } else {
        x2 = x * x;
        y2 = y * y;
        z2 = z * z;
        m = [[1 - (2 * (y2 + z2) * sinA2), 2 * ((x * y * sinA2) + (z * sinA * cosA)), 2 * ((x * z * sinA2) - (y * sinA * cosA))], [2 * ((y * x * sinA2) - (z * sinA * cosA)), 1 - (2 * (z2 + x2) * sinA2), 2 * ((y * z * sinA2) + (x * sinA * cosA))], [2 * ((z * x * sinA2) + (y * sinA * cosA)), 2 * ((z * y * sinA2) - (x * sinA * cosA)), 1 - (2 * (x2 + y2) * sinA2)]];
    }
    return m;
};

perspT = function(vec3, max_real_depth, min_real_depth, desired_ratio, desired_length) {
    var scalefactor, z0;
    z0 = ((max_real_depth * desired_ratio) - min_real_depth) / (1 - desired_ratio);
    scalefactor = (desired_length * desired_ratio) / (1 - desired_ratio);
    return [(scalefactor * vec3[0]) / (vec3[2] + z0), (scalefactor * vec3[1]) / (vec3[2] + z0)];
};

invperspT = function(x, y, dx, dy, max_real_depth, min_real_depth, desired_ratio, desired_length) {
    var s, s2, xp, xp2, xsphere, yp, yp2, ysphere, z0, z02, zsphere;
    z0 = ((max_real_depth * desired_ratio) - min_real_depth) / (1 - desired_ratio);
    s = (desired_length * desired_ratio) / (1 - desired_ratio);
    xp = x - dx;
    yp = y - dy;
    s2 = s * s;
    z02 = z0 * z0;
    xp2 = xp * xp;
    yp2 = yp * yp;
    xsphere = ((2 * s * xp * z0) + sqrt((4 * s2 * xp2 * z02) + (4 * xp2 * (s2 + xp2 + yp2) * (1 - z02)))) / (2.0 * (s2 + xp2 + yp2));
    ysphere = ((s * yp * z0) / (s2 + xp2 + yp2)) + ((yp * sqrt((4 * s2 * z02) + (4 * (s2 + xp2 + yp2) * (1 - z02)))) / (2.0 * (s2 + xp2 + yp2)));
    zsphere = sqrt(1 - (xsphere * xsphere) - (ysphere * ysphere));
    return [xsphere, ysphere, zsphere];
};

getVec2VecRotM = function(vec1, vec2) {
    var angle, axis;
    axis = cross(vec1, vec2);
    angle = acos(dot(vec1, vec2));
    return vec_rotm(-1 * angle, axis[0], axis[1], axis[2]);
};

tangentify = function(vertices, edges) {
    var STABILITY_FACTOR, c, e, j, len, newVs, t;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = edges.length; j < len; j++) {
        e = edges[j];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * STABILITY_FACTOR / 2, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

recenter = function(vertices, edges) {
    var edgecenters, j, len, polycenter, v;
    edgecenters = edges.map(function(arg) {
        var a, b;
        a = arg[0], b = arg[1];
        return tangentPoint(vertices[a], vertices[b]);
    });
    polycenter = [0, 0, 0];
    for (j = 0, len = edgecenters.length; j < len; j++) {
        v = edgecenters[j];
        polycenter = add(polycenter, v);
    }
    polycenter = mult(1 / edges.length, polycenter);
    return _.map(vertices, function(x) {
        return sub(x, polycenter);
    });
};

rescale = function(vertices) {
    var maxExtent, polycenter, s;
    polycenter = [0, 0, 0];
    maxExtent = _.max(_.map(vertices, function(x) {
        return mag(x);
    }));
    s = 1 / maxExtent;
    return _.map(vertices, function(x) {
        return [s * x[0], s * x[1], s * x[2]];
    });
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, j, k, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = faces.length; j < len; j++) {
        f = faces[j];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (k = 0, len1 = f.length; k < len1; k++) {
            v = f[k];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

canonicalize = function(poly, Niter) {
    var edges, faces, i, j, maxChange, newVs, newpoly, oldVs, ref;
    if (Niter != null) {
        Niter;
    } else {
        Niter = 1;
    }
    console.log("Canonicalizing " + poly.name + "...");
    faces = poly.faces;
    edges = poly.edges();
    newVs = poly.vertices;
    maxChange = 1.0;
    for (i = j = 0, ref = Niter; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        oldVs = copyVecArray(newVs);
        newVs = tangentify(newVs, edges);
        newVs = recenter(newVs, edges);
        newVs = planarize(newVs, faces);
        maxChange = _.max(_.map(_.zip(newVs, oldVs), function(arg) {
            var x, y;
            x = arg[0], y = arg[1];
            return mag(sub(x, y));
        }));
        if (maxChange < 1e-8) {
            break;
        }
    }
    console.log("[canonicalization done, last |deltaV|=" + maxChange + "]");
    newpoly = new Polyhedron(newVs, poly.faces, poly.name);
    console.log("canonicalize", newpoly);
    return newpoly;
};

reciprocalC = function(poly) {
    var c, centers, j, len;
    centers = poly.centers();
    for (j = 0, len = centers.length; j < len; j++) {
        c = centers[j];
        c = mult(1.0 / dot(c, c), c);
    }
    return centers;
};

reciprocalN = function(poly) {
    var ans, avgEdgeDist, centroid, f, j, k, len, len1, normalV, ref, ref1, ref2, tmp, v1, v2, v3;
    ans = [];
    ref = poly.faces;
    for (j = 0, len = ref.length; j < len; j++) {
        f = ref[j];
        centroid = [0, 0, 0];
        normalV = [0, 0, 0];
        avgEdgeDist = 0.0;
        ref1 = f.slice(-2), v1 = ref1[0], v2 = ref1[1];
        for (k = 0, len1 = f.length; k < len1; k++) {
            v3 = f[k];
            centroid = add(centroid, poly.vertices[v3]);
            normalV = add(normalV, orthogonal(poly.vertices[v1], poly.vertices[v2], poly.vertices[v3]));
            avgEdgeDist += edgeDist(poly.vertices[v1], poly.vertices[v2]);
            ref2 = [v2, v3], v1 = ref2[0], v2 = ref2[1];
        }
        centroid = mult(1.0 / f.length, centroid);
        normalV = unit(normalV);
        avgEdgeDist = avgEdgeDist / f.length;
        tmp = reciprocal(mult(dot(centroid, normalV), normalV));
        ans.push(mult((1 + avgEdgeDist) / 2, tmp));
    }
    return ans;
};

canonicalXYZ = function(poly, nIterations) {
    var count, dpoly, j, ref;
    if (nIterations != null) {
        nIterations;
    } else {
        nIterations = 1;
    }
    dpoly = dual(poly);
    console.log("Pseudo-canonicalizing " + poly.name + "...");
    for (count = j = 0, ref = nIterations; 0 <= ref ? j < ref : j > ref; count = 0 <= ref ? ++j : --j) {
        dpoly.vertices = reciprocalN(poly);
        poly.vertices = reciprocalN(dpoly);
    }
    return new Polyhedron(poly.vertices, poly.faces, poly.name);
};

adjustXYZ = function(poly, nIterations) {
    var count, dpoly, j, ref;
    if (nIterations != null) {
        nIterations;
    } else {
        nIterations = 1;
    }
    dpoly = dual(poly);
    console.log("Planarizing " + poly.name + "...");
    for (count = j = 0, ref = nIterations; 0 <= ref ? j < ref : j > ref; count = 0 <= ref ? ++j : --j) {
        dpoly.vertices = reciprocalC(poly);
        poly.vertices = reciprocalC(dpoly);
    }
    return new Polyhedron(poly.vertices, poly.faces, poly.name);
};

module.exports = {
    rescale: rescale,
    tangentify: tangentify,
    recenter: recenter,
    planarize: planarize,
    canonicalize: canonicalize,
    reciprocalN: reciprocalN,
    reciprocalC: reciprocalC,
    adjustXYZ: adjustXYZ,
    canonicalXYZ: canonicalXYZ,
    add: add,
    sub: sub,
    mult: mult,
    intersect: intersect,
    tangentPoint: tangentPoint
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFtQkUsSUFBTSxPQUFBLENBQVEsS0FBUjs7QUFDTixvQkFBRixFQUFVLGtCQUFWLEVBQWlCLGtCQUFqQixFQUF3QixnQkFBeEIsRUFBOEIsY0FBOUIsRUFBbUMsY0FBbkMsRUFBd0MsY0FBeEMsRUFBNkMsZ0JBQTdDLEVBQW1ELGdCQUFuRCxFQUF5RCxnQkFBekQsRUFBK0QsY0FBL0QsRUFBb0UsY0FBcEUsRUFBeUUsY0FBekUsRUFBOEUsWUFBOUUsRUFBa0Y7O0FBRWxGLE9BQUEsR0FBVSxTQUFDLENBQUQsRUFBSSxLQUFKO0FBRVIsUUFBQTtJQUFBLFFBQUEsR0FBVyxDQUFBLEdBQUksR0FBQSxDQUFJLEVBQUosRUFBUSxLQUFBLENBQUksT0FBQSxDQUFFLEdBQUYsQ0FBTSxDQUFOLENBQUEsR0FBUyxJQUFiLENBQVI7SUFDZixrQkFBQSxHQUFxQixLQUFBLENBQU0sUUFBQSxHQUFXLEdBQUEsQ0FBSSxFQUFKLEVBQVEsS0FBQSxHQUFNLENBQWQsQ0FBakI7V0FDckIsRUFBQSxHQUFHO0FBSks7O0FBTVYsS0FBQSxHQUFRLFNBQUMsR0FBRDtBQUVKLFFBQUE7SUFBQSxJQUFHLENBQUksR0FBSixJQUFXLE9BQU8sR0FBUCxLQUFlLFFBQTdCO0FBQ0ksZUFBTyxJQURYOztJQUVBLFdBQUEsR0FBYyxJQUFJLEdBQUcsQ0FBQyxXQUFSLENBQUE7QUFDZCxTQUFBLFVBQUE7UUFDSSxXQUFZLENBQUEsR0FBQSxDQUFaLEdBQW1CLEtBQUEsQ0FBTSxHQUFJLENBQUEsR0FBQSxDQUFWO0FBRHZCO1dBRUE7QUFQSTs7QUFTUixZQUFBLEdBQWUsU0FBQyxLQUFEO1dBQVcsS0FBTSxDQUFBLEtBQUEsQ0FBTSxNQUFBLENBQUEsQ0FBQSxHQUFTLEtBQUssQ0FBQyxNQUFyQixDQUFBO0FBQWpCOztBQUVmLElBQUEsR0FB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SSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBUCxHQUFVLEdBQUksQ0FBQSxDQUFBLENBQWYsQ0FGdkM7QUFIRTs7QUFRTixHQUFBLEdBQU0sU0FBQyxDQUFELEVBQUcsQ0FBSDtXQUNGLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBQUEsR0FBa0IsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQUFsQixHQUFvQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBQXJDLEVBQ0EsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQUFBLEdBQWtCLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FBbEIsR0FBb0MsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQURwQyxFQUVBLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FBQSxHQUFrQixDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBQWxCLEdBQW9DLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FGcEMsQ0FBRCxFQUdBLENBQUMsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQUFBLEdBQWtCLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FBbEIsR0FBb0MsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQUFyQyxFQUNDLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FBQSxHQUFrQixDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBQWxCLEdBQW9DLENBQUMsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBTCxHQUFRLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQWQsQ0FEckMsRUFFQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBQUEsR0FBa0IsQ0FBQyxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFMLEdBQVEsQ0FBRSxDQUFBLENBQUEsQ0FBRyxDQUFBLENBQUEsQ0FBZCxDQUFsQixHQUFvQyxDQUFDLENBQUUsQ0FBQSxDQUFBLENBQUcsQ0FBQSxDQUFBLENBQUwsR0FBUSxDQUFFLENBQUEsQ0FBQSxDQUFHLENBQUEsQ0FBQSxDQUFkLENBRnJDLENBSEEsRUFNQSxDQUFDLENBQUMsQ0FBRSxDQUFBLENB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O0lBR0EsU0FBQSxFQUFnQixTQUhoQjtJQUlBLFlBQUEsRUFBZ0IsWUFKaEI7SUFLQSxXQUFBLEVBQWdCLFdBTGhCO0lBTUEsV0FBQSxFQUFnQixXQU5oQjtJQU9BLFNBQUEsRUFBZ0IsU0FQaEI7SUFRQSxZQUFBLEVBQWdCLFlBUmhCO0lBU0EsR0FBQSxFQUFnQixHQVRoQjtJQVVBLEdBQUEsRUFBZ0IsR0FWaEI7SUFXQSxJQUFBLEVBQWdCLElBWGhCO0lBWUEsU0FBQSxFQUFnQixTQVpoQjtJQWFBLFlBQUEsRUFBZ0IsWUFiaEIiLCJzb3VyY2VzQ29udGVudCI6WyIjIyNcbiAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAwMDAwICAgXG4wMDAgICAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwICAwMDAwICAwMDAwMDAwICAgMDAwICAgMDAwICBcbjAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuIyMjXG4jIFBvbHlow6lkcm9uaXNtZVxuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jIEEgdG95IGZvciBjb25zdHJ1Y3RpbmcgYW5kIG1hbmlwdWxhdGluZyBwb2x5aGVkcmEgYW5kIG90aGVyIG1lc2hlc1xuIyAgICBcbiMgSW5jbHVkZXMgaW1wbGVtZW50YXRpb24gb2YgdGhlIGNvbndheSBwb2x5aGVkcmFsIG9wZXJhdG9ycyBkZXJpdmVkXG4jIGZyb20gY29kZSBieSBtYXRoZW1hdGljaWFuIGFuZCBtYXRoZW1hdGljYWwgc2N1bHB0b3IgR2VvcmdlIFcuIEhhcnQgaHR0cDojd3d3Lmdlb3JnZWhhcnQuY29tL1xuI1xuIyBDb3B5cmlnaHQgMjAxOSwgQW5zZWxtIExldnNrYXlhXG4jIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuI1xuIz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgXG57IF8gfSA9IHJlcXVpcmUgJ2t4aydcbnsgcmFuZG9tLCByb3VuZCwgZmxvb3IsIHNxcnQsIHNpbiwgY29zLCB0YW4sIGFzaW4sIGFjb3MsIGF0YW4sIGFicywgcG93LCBsb2csIFBJLCBMTjEwIH0gPSBNYXRoXG5cbnNpZ2ZpZ3MgPSAoTiwgbnNpZ3MpIC0+ICMgc3RyaW5nIHdpdGggbnNpZ3MgZGlnaXRzIGlnbm9yaW5nIG1hZ25pdHVkZVxuICAgIFxuICBtYW50aXNzYSA9IE4gLyBwb3cgMTAsIGZsb29yIGxvZyhOKS9MTjEwXG4gIHRydW5jYXRlZF9tYW50aXNzYSA9IHJvdW5kIG1hbnRpc3NhICogcG93IDEwLCBuc2lncy0xXG4gIFwiI3t0cnVuY2F0ZWRfbWFudGlzc2F9XCJcblxuY2xvbmUgPSAob2JqKSAtPiAjIGRlZXAtY29weVxuICAgIFxuICAgIGlmIG5vdCBvYmogb3IgdHlwZW9mKG9iaikgIT0gJ29iamVjdCdcbiAgICAgICAgcmV0dXJuIG9ialxuICAgIG5ld0luc3RhbmNlID0gbmV3IG9iai5jb25zdHJ1Y3RvcigpXG4gICAgZm9yIGtleSBvZiBvYmogXG4gICAgICAgIG5ld0luc3RhbmNlW2tleV0gPSBjbG9uZSBvYmpba2V5XVxuICAgIG5ld0luc3RhbmNlXG5cbnJhbmRvbWNob2ljZSA9IChhcnJheSkgLT4gYXJyYXlbZmxvb3IgcmFuZG9tKCkqYXJyYXkubGVuZ3RoXVxuXG5tdWx0ICAgICA9IChjLCB2ZWMpIC0+IFtjKnZlY1swXSwgYyp2ZWNbMV0sIGMqdmVjWzJdXVxuX211bHQgICAgPSAodjEsIHYyKSAtPiBbdjFbMF0qdjJbMF0sIHYxWzFdKnYyWzFdLCB2MVsyXSp2MlsyXV1cbmFkZCAgICAgID0gKHYxLCB2MikgLT4gW3YxWzBdK3YyWzBdLCB2MVsxXSt2MlsxXSwgdjFbMl0rdjJbMl1dXG5zdWIgICAgICA9ICh2MSwgdjIpIC0+IFt2MVswXS12MlswXSwgdjFbMV0tdjJbMV0sIHYxWzJdLXYyWzJdXVxuZG90ICAgICAgPSAodjEsIHYyKSAtPiAodjFbMF0qdjJbMF0pICsgKHYxWzFdKnYyWzFdKSArICh2MVsyXSp2MlsyXSlcbmNyb3NzICAgID0gKGQxLCBkMikgLT4gWyhkMVsxXSpkMlsyXSkgLSAoZDFbMl0qZDJbMV0pLCAoZDFbMl0qZDJbMF0pIC0gKGQxWzBdKmQyWzJdKSwgKGQxWzBdKmQyWzFdKSAtIChkMVsxXSpkMlswXSldXG5tYWcgICAgICA9ICh2ZWMpIC0+IHNxcnQgZG90IHZlYywgdmVjXG5tYWcyICAgICA9ICh2ZWMpIC0+IGRvdCB2ZWMsIHZlY1xudW5pdCAgICAgPSAodmVjKSAtPiBtdWx0IDEvc3FydChtYWcyKHZlYykpLCB2ZWNcbnR3ZWVuICAgID0gKHYxLCB2MiwgdCkgLT4gWygoMS10KSp2MVswXSkgKyAodCp2MlswXSksICgoMS10KSp2MVsxXSkgKyAodCp2MlsxXSksICgoMS10KSp2MVsyXSkgKyAodCp2MlsyXSldXG5taWRwb2ludCA9ICh2MSwgdjIpID0+IG11bHQgMS8yLjAsIGFkZCB2MSwgdjJcbm9uZVRoaXJkID0gKHYxLCB2MikgPT4gdHdlZW4gdjEsIHYyLCAxLzMuMFxuXG5yZWNpcHJvY2FsID0gKHZlYykgLT4gbXVsdCgxLjAgLyBtYWcyKHZlYyksIHZlYykgIyByZWZsZWN0IGluIHVuaXQgc3BoZXJlXG5cbnRhbmdlbnRQb2ludCA9ICh2MSwgdjIpIC0+ICMgcG9pbnQgd2hlcmUgbGluZSB2MS4uLnYyIHRhbmdlbnQgdG8gYW4gb3JpZ2luIHNwaGVyZVxuICBkID0gc3ViIHYyLCB2MVxuICBzdWIgdjEsIG11bHQgZG90KGQsIHYxKS9tYWcyKGQpLCBkXG5cbmVkZ2VEaXN0ID0gKHYxLCB2MikgLT4gc3FydCBtYWcyIHRhbmdlbnRQb2ludCB2MSwgdjIgIyBkaXN0YW5jZSBvZiBsaW5lIHYxLi4udjIgdG8gb3JpZ2luXG5cbiMgc3F1YXJlIG9mIGRpc3RhbmNlIGZyb20gcG9pbnQgdjMgdG8gbGluZSBzZWdtZW50IHYxLi4udjJcbiMgaHR0cDojbWF0aHdvcmxkLndvbGZyYW0uY29tL1BvaW50LUxpbmVEaXN0YW5jZTMtRGltZW5zaW9uYWwuaHRtbFxuIyBjYWxjdWxhdGVzIG1pbiBkaXN0YW5jZSBmcm9tIHBvaW50IHYzIHRvIGZpbml0ZSBsaW5lIHNlZ21lbnQgYmV0d2VlbiB2MSBhbmQgdjJcblxubGluZVBvaW50RGlzdDIgPSAodjEsIHYyLCB2MykgLT5cblxuICAgIGQyMSA9IHN1YiB2MiwgdjFcbiAgICBkMTMgPSBzdWIgdjEsIHYzXG4gICAgZDIzID0gc3ViIHYyLCB2M1xuICAgIG0yID0gbWFnMiBkMjFcbiAgICB0ID0gLWRvdChkMTMsIGQyMSkvbTJcbiAgICBpZiB0IDw9IDBcbiAgICAgICAgIyBjbG9zZXN0IHRvIHBvaW50IGJleW9uZCB2MSwgY2xpcCB0byB8djMtdjF8XjJcbiAgICAgICAgcmVzdWx0ID0gbWFnMiBkMTNcbiAgICBlbHNlIGlmICh0ID49IDEpIFxuICAgICAgICAjIGNsb3Nlc3QgdG8gcG9pbnQgYmV5b25kIHYyLCBjbGlwIHRvIHx2My12MnxeMlxuICAgICAgICByZXN1bHQgPSBtYWcyIGQyM1xuICAgIGVsc2VcbiAgICAgICAgIyBjbG9zZXN0IGluLWJldHdlZW4gdjEsIHYyXG4gICAgICAgIHJlc3VsdCA9IG1hZzIoY3Jvc3MgZDIxLCBkMTMpL20yXG4gICAgcmVzdWx0XG4gIFxuIyBmaW5kIHZlY3RvciBvcnRob2dvbmFsIHRvIHBsYW5lIG9mIDMgcHRzXG5vcnRob2dvbmFsID0gKHYxLHYyLHYzKSAtPiBjcm9zcyBzdWIodjIsIHYxKSwgc3ViKHYzLCB2MilcblxuIyBmaW5kIGZpcnN0IGVsZW1lbnQgY29tbW9uIHRvIDMgc2V0cyBieSBicnV0ZSBmb3JjZSBzZWFyY2hcbmludGVyc2VjdCA9IChzZXQxLCBzZXQyLCBzZXQzKSAtPlxuICAgIGZvciBzMSBpbiBzZXQxXG4gICAgICAgIGZvciBzMiBpbiBzZXQyXG4gICAgICAgICAgICBpZiBzMSA9PSBzMlxuICAgICAgICAgICAgICAgIGZvciBzMyBpbiBzZXQzXG4gICAgICAgICAgICAgICAgICAgIGlmIHMxID09IHMzXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gczFcbiAgICBudWxsICMgZW1wdHkgaW50ZXJzZWN0aW9uXG5cbmNhbGNDZW50cm9pZCA9ICh2ZXJ0aWNlcykgLT5cbiAgICBjZW50cm9pZFYgPSBbMCAwIDBdXG4gICAgZm9yIHYgaW4gdmVydGljZXNcbiAgICAgICAgY2VudHJvaWRWID0gYWRkIGNlbnRyb2lkViwgdlxuICAgIG11bHQgMSAvIHZlcnRpY2VzLmxlbmd0aCwgY2VudHJvaWRWIFxuXG4jIGNhbGN1bGF0ZSBhdmVyYWdlIG5vcm1hbCB2ZWN0b3IgZm9yIGFycmF5IG9mIHZlcnRpY2VzXG5ub3JtYWwgPSAodmVydGljZXMpIC0+XG4gICAgbm9ybWFsViA9IFswIDAgMF0gXG4gICAgW3YxLCB2Ml0gPSB2ZXJ0aWNlcy5zbGljZSAtMlxuICAgIGZvciB2MyBpbiB2ZXJ0aWNlc1xuICAgICAgICBub3JtYWxWID0gYWRkIG5vcm1hbFYsIG9ydGhvZ29uYWwgdjEsIHYyLCB2M1xuICAgICAgICBbdjEsIHYyXSA9IFt2MiwgdjNdXG4gICAgdW5pdCBub3JtYWxWXG5cbiMgY2FsY3VsYXRlcyBhcmVhIHBsYW5hciBmYWNlIGJ5IHN1bW1pbmcgb3ZlciBzdWJ0cmlhbmdsZSBhcmVhcywgYXNzdW1lcyBwbGFuYXJpdHkuXG5wbGFuYXJhcmVhID0gKHZlcnRpY2VzKSAtPlxuICAgIGFyZWEgPSAwLjBcbiAgICB2c3VtID0gWzAgMCAwXVxuICAgIFt2MSwgdjJdID0gdmVydGljZXMuc2xpY2UoLTIpXG4gICAgZm9yIHYzIGluIHZlcnRpY2VzXG4gICAgICAgIHZzdW0gPSBhZGQgdnN1bSwgY3Jvc3MgdjEsIHYyXG4gICAgICAgIFt2MSwgdjJdID0gW3YyLCB2M11cbiAgICBhcmVhID0gYWJzIGRvdChub3JtYWwodmVydGljZXMpLCB2c3VtKSAvIDIuMFxuXG4jIGNvbmdydWVuY2Ugc2lnbmF0dXJlIGZvciBhc3NpZ25pbmcgc2FtZSBjb2xvcnMgdG8gY29uZ3J1ZW50IGZhY2VzXG5mYWNlU2lnbmF0dXJlID0gKHZlcnRpY2VzLCBzZW5zaXRpdml0eSkgLT5cblxuICAgIGNyb3NzX2FycmF5ID0gW11cbiAgICBbdjEsIHYyXSA9IHZlcnRpY2VzLnNsaWNlIC0yXG4gICAgZm9yIHYzIGluIHZlcnRpY2VzXG4gICAgICAgICMgYWNjdW11bGF0ZSBpbm5lciBhbmdsZXNcbiAgICAgICAgY3Jvc3NfYXJyYXkucHVzaCBtYWcgY3Jvc3Mgc3ViKHYxLCB2MiksIHN1Yih2MywgdjIpXG4gICAgICAgIFt2MSwgdjJdID0gW3YyLCB2M11cblxuICAgICMgc29ydCBhbmdsZXMgdG8gY3JlYXRlIHVuaXF1ZSBzZXF1ZW5jZVxuICAgIGNyb3NzX2FycmF5LnNvcnQgKGEsYikgLT4gYS1iXG4gIFxuICAgICMgcmVuZGVyIHNvcnRlZCBhbmdsZXMgYXMgcXVhbnRpemVkIGRpZ2l0IHN0cmluZ3NcbiAgICAjIHRoaXMgaXMgdGhlIGNvbmdydWVuY2Ugc2lnbmF0dXJlXG4gICAgc2lnID0gJydcbiAgICBmb3IgeCBpbiBjcm9zc19hcnJheSBcbiAgICAgICAgc2lnICs9IHNpZ2ZpZ3MgeCwgc2Vuc2l0aXZpdHlcbiAgICAjIGhhY2sgdG8gbWFrZSByZWZsZWN0ZWQgZmFjZXMgc2hhcmUgdGhlIHNhbWUgc2lnbmF0dXJlXG4gICAgZm9yIHggaW4gY3Jvc3NfYXJyYXkucmV2ZXJzZSgpIFxuICAgICAgICBzaWcgKz0gc2lnZmlncyB4LCBzZW5zaXRpdml0eVxuICAgIHNpZ1xuXG4jIHByb2plY3RzIDNkIHBvbHloZWRyYWwgZmFjZSB0byAyZCBwb2x5Z29uIGZvciB0cmlhbmd1bGF0aW9uIGFuZCBmYWNlIGRpc3BsYXlcbnByb2plY3QyZGZhY2UgPSAodmVydHMpIC0+XG4gICAgdG1wdmVydHMgPSBjbG9uZSB2ZXJ0c1xuICAgIHYwID0gdmVydHNbMF1cbiAgICB0bXB2ZXJ0cyA9IF8ubWFwICh0bXB2ZXJ0cyx4KSAtPiB4LXYwXG4gIFxuICAgIG4gPSBub3JtYWwgdmVydHNcbiAgICBjID0gdW5pdCBjYWxjQ2VudHJvaWQgdmVydHMgI1hYWDogY29ycmVjdD9cbiAgICBwID0gY3Jvc3MgbiwgY1xuICBcbiAgICB0bXB2ZXJ0cy5tYXAgKHYpID0+IFtkb3QobiwgdiksIGRvdChwLCB2KV1cblxuIyBjb3BpZXMgYXJyYXkgb2YgYXJyYXlzIGJ5IHZhbHVlIChkZWVwIGNvcHkpXG5jb3B5VmVjQXJyYXkgPSAodmVjQXJyYXkpIC0+XG4gICAgbmV3VmVjQXJyYXkgPSBuZXcgQXJyYXkgdmVjQXJyYXkubGVuZ3RoXG4gICAgZW5kID0gdmVjQXJyYXkubGVuZ3RoXG4gICAgZm9yIGkgaW4gWzAuLi5lbmRdXG4gICAgICAgIG5ld1ZlY0FycmF5W2ldID0gdmVjQXJyYXlbaV0uc2xpY2UgMFxuICAgIG5ld1ZlY0FycmF5XG5cbiMgM2QgbWF0cml4IHZlY3RvciBtdWx0aXBseVxubXYzID0gKG1hdCx2ZWMpIC0+XG4gICAgI0doZXR0byBjdXN0b20gZGVmIG9mIG1hdHJpeC12ZWN0b3IgbXVsdFxuICAgICNleGFtcGxlIG1hdHJpeDogW1thLGIsY10sW2QsZSxmXSxbZyxoLGldXVxuICAgIFsobWF0WzBdWzBdKnZlY1swXSkrKG1hdFswXVsxXSp2ZWNbMV0pKyhtYXRbMF1bMl0qdmVjWzJdKSxcbiAgICAgKG1hdFsxXVswXSp2ZWNbMF0pKyhtYXRbMV1bMV0qdmVjWzFdKSsobWF0WzFdWzJdKnZlY1syXSksXG4gICAgIChtYXRbMl1bMF0qdmVjWzBdKSsobWF0WzJdWzFdKnZlY1sxXSkrKG1hdFsyXVsyXSp2ZWNbMl0pXVxuXG4jIDNkIG1hdHJpeCBtYXRyaXggbXVsdGlwbHlcbm1tMyA9IChBLEIpIC0+XG4gICAgW1soQVswXVswXSpCWzBdWzBdKSsoQVswXVsxXSpCWzFdWzBdKSsoQVswXVsyXSpCWzJdWzBdKSxcbiAgICAgKEFbMF1bMF0qQlswXVsxXSkrKEFbMF1bMV0qQlsxXVsxXSkrKEFbMF1bMl0qQlsyXVsxXSksXG4gICAgIChBWzBdWzBdKkJbMF1bMl0pKyhBWzBdWzFdKkJbMV1bMl0pKyhBWzBdWzJdKkJbMl1bMl0pXSxcbiAgICBbKEFbMV1bMF0qQlswXVswXSkrKEFbMV1bMV0qQlsxXVswXSkrKEFbMV1bMl0qQlsyXVswXSksXG4gICAgIChBWzFdWzBdKkJbMF1bMV0pKyhBWzFdWzFdKkJbMV1bMV0pKyhBWzFdWzJdKkJbMl1bMV0pLFxuICAgICAoQVsxXVswXSpCWzBdWzJdKSsoQVsxXVsxXSpCWzFdWzJdKSsoQVsxXVsyXSpCWzJdWzJdKV0sXG4gICAgWyhBWzJdWzBdKkJbMF1bMF0pKyhBWzJdWzFdKkJbMV1bMF0pKyhBWzJdWzJdKkJbMl1bMF0pLFxuICAgICAoQVsyXVswXSpCWzBdWzFdKSsoQVsyXVsxXSpCWzFdWzFdKSsoQVsyXVsyXSpCWzJdWzFdKSxcbiAgICAgKEFbMl1bMF0qQlswXVsyXSkrKEFbMl1bMV0qQlsxXVsyXSkrKEFbMl1bMl0qQlsyXVsyXSldXVxuXG5leWUzID0gW1sxIDAgMF0sIFswIDEgMF0sIFswIDAgMV1dXG5cbiMgUm90YXRpb24gTWF0cml4XG4jIFRvdGFsbHkgZ2hldHRvLCBub3QgYXQgYWxsIGluIGFncmVlbWVudCB3aXRoIGV1bGVyIGFuZ2xlcyFcbiMgdXNlIHF1YXRlcm5pb25zIGluc3RlYWRcbnJvdG0gPSAocGhpLCB0aGV0YSwgcHNpKSAtPlxuICAgIHh5X21hdCA9IFtcbiAgICAgICAgW2NvcyhwaGkpLCAtMS4wKnNpbihwaGkpLCAgMC4wXVxuICAgICAgICBbc2luKHBoaSksICAgICAgY29zKHBoaSksICAwLjBdXG4gICAgICAgIFswLjAsICAgICAgICAgICAgICAgIDAuMCwgIDEuMF1dXG4gICAgeXpfbWF0ID0gW1xuICAgICAgICBbY29zKHRoZXRhKSwgMCwgLTEuMCpzaW4odGhldGEpXVxuICAgICAgICBbICAgICAgICAgMCwgMSwgICAgICAgICAgICAgICAwXVxuICAgICAgICBbc2luKHRoZXRhKSwgMCwgICAgICBjb3ModGhldGEpXV1cbiAgICB4el9tYXQgPSBbXG4gICAgICAgIFsxLjAsICAgICAgICAwLCAgICAgICAgICAgICAwXVxuICAgICAgICBbICAwLCBjb3MocHNpKSwgLTEuMCpzaW4ocHNpKV1cbiAgICAgICAgWyAgMCwgc2luKHBzaSksICAgICAgY29zKHBzaSldXVxuICAgIG1tMyh4el9tYXQsIG1tMyh5el9tYXQseHlfbWF0KSlcblxuIyBSb3RhdGlvbiBNYXRyaXggZGVmaW5lZCBieSByb3RhdGlvbiBhYm91dCAodW5pdCkgYXhpcyBbeCx5LHpdIGZvciBhbmdsZSByYWRpYW5zXG52ZWNfcm90bSA9IChhbmdsZSwgeCwgeSwgeikgLT5cblxuICAgIGFuZ2xlIC89IDJcbiAgICBzaW5BID0gc2luIGFuZ2xlXG4gICAgY29zQSA9IGNvcyBhbmdsZVxuICAgIHNpbkEyID0gc2luQSpzaW5BXG4gICAgbGVuZ3RoID0gbWFnIFt4LHksel1cbiAgICBpZiBsZW5ndGggPT0gMFxuICAgICAgICBbeCwgeSwgel0gPSBbMCAwIDFdXG4gICAgXG4gICAgaWYgbGVuZ3RoICE9IDFcbiAgICAgICAgW3gsIHksIHpdID0gdW5pdCBbeCwgeSwgel1cblxuICAgIGlmICgoeCA9PSAxKSAmJiAoeSA9PSAwKSAmJiAoeiA9PSAwKSkgXG4gICAgICAgIG0gPSBbWzEsICAgICAgICAgICAgICAwLCAgICAgICAgICAgMF1cbiAgICAgICAgICAgICBbMCwgICAgMS0oMipzaW5BMiksIDIqc2luQSpjb3NBXVxuICAgICAgICAgICAgIFswLCAgIC0yKnNpbkEqY29zQSwgMS0oMipzaW5BMildXVxuICAgIGVsc2UgaWYgKCh4ID09IDApICYmICh5ID09IDEpICYmICh6ID09IDApKSBcbiAgICAgICAgbSA9IFtbMS0oMipzaW5BMiksIDAsICAtMipzaW5BKmNvc0FdXG4gICAgICAgICAgICAgWyAgICAgICAgICAwLCAxLCAgICAgICAgICAgICAwXVxuICAgICAgICAgICAgIFsyKnNpbkEqY29zQSwgMCwgICAxLSgyKnNpbkEyKV1dXG4gICAgZWxzZSBpZiAoKHggPT0gMCkgJiYgKHkgPT0gMCkgJiYgKHogPT0gMSkpIFxuICAgICAgICBtID0gW1sgICAxLSgyKnNpbkEyKSwgICAyKnNpbkEqY29zQSwgMF1cbiAgICAgICAgICAgICBbICAtMipzaW5BKmNvc0EsICAgMS0oMipzaW5BMiksIDBdXG4gICAgICAgICAgICAgWyAgICAgICAgICAgICAwLCAgICAgICAgICAgICAwLCAxXV1cbiAgICBlbHNlIFxuICAgICAgICB4MiA9IHgqeFxuICAgICAgICB5MiA9IHkqeVxuICAgICAgICB6MiA9IHoqelxuICAgICAgICBtID0gW1xuICAgICAgICAgIFsxLSgyKih5Mit6Mikqc2luQTIpLCAyKigoeCp5KnNpbkEyKSsoeipzaW5BKmNvc0EpKSwgMiooKHgqeipzaW5BMiktKHkqc2luQSpjb3NBKSldXG4gICAgICAgICAgWzIqKCh5Kngqc2luQTIpLSh6KnNpbkEqY29zQSkpLCAxLSgyKih6Mit4Mikqc2luQTIpLCAyKigoeSp6KnNpbkEyKSsoeCpzaW5BKmNvc0EpKV1cbiAgICAgICAgICBbMiooKHoqeCpzaW5BMikrKHkqc2luQSpjb3NBKSksIDIqKCh6Knkqc2luQTIpLSh4KnNpbkEqY29zQSkpLCAxLSgyKih4Mit5Mikqc2luQTIpXV1cbiAgICBtXG5cbiMgUGVyc3BlY3RpdmUgVHJhbnNmb3JtXG4jIGFzc3VtZXMgd29ybGQncyBiZWVuIHJvdGF0ZWQgYXBwcm9wcmlhdGVseSBzdWNoIHRoYXQgWiBpcyBkZXB0aFxuIyBzY2FsZXMgcGVyc3BlY3RpdmUgc3VjaCB0aGF0IGluc2lkZSBkZXB0aCByZWdpb25zIG1pbl9yZWFsX2RlcHRoIDwtLT4gbWF4X3JlYWxfZGVwdGhcbiMgcGVyc3BlY3RpdmUgbGVuZ3RocyB2YXJ5IG5vIG1vcmUgdGhhbjogICBkZXNpcmVkX3JhdGlvXG4jIHdpdGggdGFyZ2V0IGRpbWVuc2lvbiBvZiByb3VnaGx5IGxlbmd0aDogZGVzaXJlZF9sZW5ndGhcbnBlcnNwVCA9ICh2ZWMzLCBtYXhfcmVhbF9kZXB0aCwgbWluX3JlYWxfZGVwdGgsIGRlc2lyZWRfcmF0aW8sIGRlc2lyZWRfbGVuZ3RoKSAtPlxuICAgIHowID0gKChtYXhfcmVhbF9kZXB0aCAqIGRlc2lyZWRfcmF0aW8pIC0gbWluX3JlYWxfZGVwdGgpIC8gKDEtZGVzaXJlZF9yYXRpbylcbiAgICBzY2FsZWZhY3RvciA9IChkZXNpcmVkX2xlbmd0aCAqIGRlc2lyZWRfcmF0aW8pIC8gKDEtZGVzaXJlZF9yYXRpbylcbiAgICAjIHByb2plY3RlZCBbWCwgWV1cbiAgICBbKHNjYWxlZmFjdG9yKnZlYzNbMF0pLyh2ZWMzWzJdK3owKSwgKHNjYWxlZmFjdG9yKnZlYzNbMV0pLyh2ZWMzWzJdK3owKV1cblxuIyBJbnZlcnNlcyBwZXJzcGVjdGl2ZSB0cmFuc2Zvcm0gYnkgcHJvamVjdGluZyBwbGFuZSBvbnRvIGEgdW5pdCBzcGhlcmUgYXQgb3JpZ2luXG5pbnZwZXJzcFQgPSAoeCwgeSwgZHgsIGR5LCBtYXhfcmVhbF9kZXB0aCwgbWluX3JlYWxfZGVwdGgsIGRlc2lyZWRfcmF0aW8sIGRlc2lyZWRfbGVuZ3RoKSAtPlxuICAgIHowID0gKChtYXhfcmVhbF9kZXB0aCAqIGRlc2lyZWRfcmF0aW8pIC0gbWluX3JlYWxfZGVwdGgpLygxLWRlc2lyZWRfcmF0aW8pXG4gICAgcyA9IChkZXNpcmVkX2xlbmd0aCAqIGRlc2lyZWRfcmF0aW8pLygxLWRlc2lyZWRfcmF0aW8pXG4gICAgeHAgPSB4LWR4XG4gICAgeXAgPSB5LWR5XG4gICAgczIgPSBzKnNcbiAgICB6MDIgPSB6MCp6MFxuICAgIHhwMiA9IHhwKnhwXG4gICAgeXAyID0geXAqeXBcbiAgXG4gICAgeHNwaGVyZSA9ICgoMipzKnhwKnowKSArIHNxcnQoKDQqczIqeHAyKnowMikgKyAoNCp4cDIqKHMyK3hwMit5cDIpKigxLXowMikpKSkvKDIuMCooczIreHAyK3lwMikpXG4gICAgeXNwaGVyZSA9ICgoKHMqeXAqejApLyhzMit4cDIreXAyKSkgKyAoKHlwKnNxcnQoKDQqczIqejAyKSArICg0KihzMit4cDIreXAyKSooMS16MDIpKSkpLygyLjAqKHMyK3hwMit5cDIpKSkpXG4gICAgenNwaGVyZSA9IHNxcnQoMSAtICh4c3BoZXJlKnhzcGhlcmUpIC0gKHlzcGhlcmUqeXNwaGVyZSkpXG4gIFxuICAgIFt4c3BoZXJlLCB5c3BoZXJlLCB6c3BoZXJlXVxuXG4jIFJldHVybnMgcm90YXRpb24gbWF0cml4IHRoYXQgdGFrZXMgdmVjMSB0byB2ZWMyXG5nZXRWZWMyVmVjUm90TSA9ICh2ZWMxLCB2ZWMyKSAtPlxuICAgIGF4aXMgID0gY3Jvc3ModmVjMSwgdmVjMilcbiAgICBhbmdsZSA9IGFjb3MoZG90KHZlYzEsIHZlYzIpKVxuICAgIHZlY19yb3RtKC0xKmFuZ2xlLCBheGlzWzBdLCBheGlzWzFdLCBheGlzWzJdKVxuXG4jIFNsb3cgQ2Fub25pY2FsaXphdGlvbiBBbGdvcml0aG1cbiNcbiMgVGhpcyBhbGdvcml0aG0gaGFzIHNvbWUgY29udmVyZ2VuY2UgcHJvYmxlbXMsIHdoYXQgcmVhbGx5IG5lZWRzIHRvIGJlIGRvbmUgaXMgdG9cbiMgc3VtIHRoZSB0aHJlZSBmb3JjaW5nIGZhY3RvcnMgdG9nZXRoZXIgYXMgYSBjb25oZXJlbnQgZm9yY2UgYW5kIHRvIHVzZSBhIGhhbGYtZGVjZW50XG4jIGludGVncmF0b3IgdG8gbWFrZSBzdXJlIHRoYXQgaXQgY29udmVyZ2VzIHdlbGwgYXMgb3Bwb3NlZCB0byB0aGUgY3VycmVudCBoYWNrIG9mXG4jIGFkLWhvYyBzdGFiaWxpdHkgbXVsdGlwbGllcnMuICBJZGVhbGx5IG9uZSB3b3VsZCBpbXBsZW1lbnQgYSBjb25qdWdhdGUgZ3JhZGllbnRcbiMgZGVzY2VudCBvciBzaW1pbGFyIHByZXR0eSB0aGluZy5cbiNcbiMgT25seSB0cnkgdG8gdXNlIHRoaXMgb24gY29udmV4IHBvbHloZWRyYSB0aGF0IGhhdmUgYSBjaGFuY2Ugb2YgYmVpbmcgY2Fub25pY2FsaXplZCxcbiMgb3RoZXJ3aXNlIGl0IHdpbGwgcHJvYmFibHkgYmxvdyB1cCB0aGUgZ2VvbWV0cnkuICBBIG11Y2ggdHJpY2tpZXIgLyBzbWFydGVyIHNlZWQtc3ltbWV0cnlcbiMgYmFzZWQgZ2VvbWV0cmljYWwgcmVndWxhcml6ZXIgc2hvdWxkIGJlIHVzZWQgZm9yIGZhbmNpZXIvd2VpcmRlciBwb2x5aGVkcmEuXG4gICAgXG4jIGFkanVzdHMgdmVydGljZXMgb24gZWRnZXMgc3VjaCB0aGF0IGVhY2ggZWRnZSBpcyB0YW5nZW50IHRvIGFuIG9yaWdpbiBzcGhlcmVcbnRhbmdlbnRpZnkgPSAodmVydGljZXMsIGVkZ2VzKSAtPlxuICAgICMgaGFjayB0byBpbXByb3ZlIGNvbnZlcmdlbmNlXG4gICAgU1RBQklMSVRZX0ZBQ1RPUiA9IDAuMVxuICAgICMgY29weSB2ZXJ0aWNlc1xuICAgIG5ld1ZzID0gY29weVZlY0FycmF5IHZlcnRpY2VzXG4gICAgZm9yIGUgaW4gZWRnZXNcbiAgICAgICAgIyB0aGUgcG9pbnQgY2xvc2VzdCB0byBvcmlnaW5cbiAgICAgICAgdCA9IHRhbmdlbnRQb2ludCBuZXdWc1tlWzBdXSwgbmV3VnNbZVsxXV0gXG4gICAgICAgICMgYWRqdXN0bWVudCBmcm9tIHNwaGVyZVxuICAgICAgICBjID0gbXVsdCAoMS1zcXJ0KGRvdCh0LHQpKSkqU1RBQklMSVRZX0ZBQ1RPUi8yLCB0XG4gICAgICAgIG5ld1ZzW2VbMF1dID0gYWRkIG5ld1ZzW2VbMF1dLCBjXG4gICAgICAgIG5ld1ZzW2VbMV1dID0gYWRkIG5ld1ZzW2VbMV1dLCBjXG4gICAgbmV3VnNcblxuIyByZWNlbnRlcnMgZW50aXJlIHBvbHloZWRyb24gc3VjaCB0aGF0IGNlbnRlciBvZiBtYXNzIGlzIGF0IG9yaWdpblxucmVjZW50ZXIgPSAodmVydGljZXMsIGVkZ2VzKSAtPlxuICAgICNjZW50ZXJzIG9mIGVkZ2VzXG4gICAgZWRnZWNlbnRlcnMgPSBlZGdlcy5tYXAgKFthLCBiXSkgLT4gdGFuZ2VudFBvaW50IHZlcnRpY2VzW2FdLCB2ZXJ0aWNlc1tiXVxuICAgIHBvbHljZW50ZXIgPSBbMCAwIDBdXG4gICAgIyBzdW0gY2VudGVycyB0byBmaW5kIGNlbnRlciBvZiBncmF2aXR5XG4gICAgZm9yIHYgaW4gZWRnZWNlbnRlcnNcbiAgICAgICAgcG9seWNlbnRlciA9IGFkZCBwb2x5Y2VudGVyLCB2XG4gICAgcG9seWNlbnRlciA9IG11bHQgMS9lZGdlcy5sZW5ndGgsIHBvbHljZW50ZXJcbiAgICAjIHN1YnRyYWN0IG9mZiBhbnkgZGV2aWF0aW9uIGZyb20gY2VudGVyXG4gICAgXy5tYXAgdmVydGljZXMsICh4KSAtPiBzdWIgeCwgcG9seWNlbnRlclxuXG4jIHJlc2NhbGVzIG1heGltdW0gcmFkaXVzIG9mIHBvbHloZWRyb24gdG8gMVxucmVzY2FsZSA9ICh2ZXJ0aWNlcykgLT5cbiAgICBwb2x5Y2VudGVyID0gWzAgMCAwXVxuICAgIG1heEV4dGVudCA9IF8ubWF4IF8ubWFwIHZlcnRpY2VzLCAoeCkgLT4gbWFnIHhcbiAgICBzID0gMSAvIG1heEV4dGVudFxuICAgIF8ubWFwIHZlcnRpY2VzLCAoeCkgLT4gW3MqeFswXSwgcyp4WzFdLCBzKnhbMl1dXG5cbiMgYWRqdXN0cyB2ZXJ0aWNlcyBpbiBlYWNoIGZhY2UgdG8gaW1wcm92ZSBpdHMgcGxhbmFyaXR5XG5wbGFuYXJpemUgPSAodmVydGljZXMsIGZhY2VzKSAtPlxuICAgIFNUQUJJTElUWV9GQUNUT1IgPSAwLjEgIyBIYWNrIHRvIGltcHJvdmUgY29udmVyZ2VuY2VcbiAgICBuZXdWcyA9IGNvcHlWZWNBcnJheSB2ZXJ0aWNlcyAjIGNvcHkgdmVydGljZXNcbiAgICBmb3IgZiBpbiBmYWNlc1xuICAgICAgICBjb29yZHMgPSBmLm1hcCAodikgLT4gdmVydGljZXNbdl1cbiAgICAgICAgbiA9IG5vcm1hbCBjb29yZHMgIyBmaW5kIGF2ZyBvZiBub3JtYWxzIGZvciBlYWNoIHZlcnRleCB0cmlwbGV0XG4gICAgICAgIGMgPSBjYWxjQ2VudHJvaWQgY29vcmRzICMgZmluZCBwbGFuYXIgY2VudHJvaWRcbiAgICAgICAgaWYgZG90KG4sIGMpIDwgMCAjIGNvcnJlY3Qgc2lnbiBpZiBuZWVkZWRcbiAgICAgICAgICAgIG4gPSBtdWx0IC0xLjAsIG5cbiAgICAgICAgZm9yIHYgaW4gZiAjIHByb2plY3QgKHZlcnRleCAtIGNlbnRyb2lkKSBvbnRvIG5vcm1hbCwgc3VidHJhY3Qgb2ZmIHRoaXMgY29tcG9uZW50XG4gICAgICAgICAgICBuZXdWc1t2XSA9IGFkZCBuZXdWc1t2XSwgbXVsdCBkb3QobXVsdChTVEFCSUxJVFlfRkFDVE9SLCBuKSwgc3ViKGMsIHZlcnRpY2VzW3ZdKSksIG5cbiAgICBuZXdWc1xuXG4jIGNvbWJpbmVzIGFib3ZlIHRocmVlIGNvbnN0cmFpbnQgYWRqdXN0bWVudHMgaW4gaXRlcmF0aXZlIGN5Y2xlXG5jYW5vbmljYWxpemUgPSAocG9seSwgTml0ZXIpIC0+XG4gICAgTml0ZXIgPz0gMVxuICAgIGNvbnNvbGUubG9nIFwiQ2Fub25pY2FsaXppbmcgI3twb2x5Lm5hbWV9Li4uXCJcbiAgICBmYWNlcyA9IHBvbHkuZmFjZXNcbiAgICBlZGdlcyA9IHBvbHkuZWRnZXMoKVxuICAgIG5ld1ZzID0gcG9seS52ZXJ0aWNlc1xuICAgIG1heENoYW5nZSA9IDEuMCAjIGNvbnZlcmdlbmNlIHRyYWNrZXJcbiAgICBmb3IgaSBpbiBbMC4uTml0ZXJdXG4gICAgICAgIG9sZFZzID0gY29weVZlY0FycmF5IG5ld1ZzICNjb3B5IHZlcnRpY2VzXG4gICAgICAgIG5ld1ZzID0gdGFuZ2VudGlmeSBuZXdWcywgZWRnZXNcbiAgICAgICAgbmV3VnMgPSByZWNlbnRlciBuZXdWcywgZWRnZXNcbiAgICAgICAgbmV3VnMgPSBwbGFuYXJpemUgbmV3VnMsIGZhY2VzXG4gICAgICAgIG1heENoYW5nZSA9IF8ubWF4IF8ubWFwIF8uemlwKG5ld1ZzLCBvbGRWcyksIChbeCwgeV0pIC0+IG1hZyBzdWIgeCwgeVxuICAgICAgICBpZiBtYXhDaGFuZ2UgPCAxZS04XG4gICAgICAgICAgICBicmVha1xuICAgICMgb25lIHNob3VsZCBub3cgcmVzY2FsZSwgYnV0IG5vdCByZXNjYWxpbmcgaGVyZSBtYWtlcyBmb3IgdmVyeSBpbnRlcmVzdGluZyBudW1lcmljYWxcbiAgICAjIGluc3RhYmlsaXRpZXMgdGhhdCBtYWtlIGludGVyZXN0aW5nIG11dGFudHMgb24gbXVsdGlwbGUgYXBwbGljYXRpb25zLi4uXG4gICAgIyBtb3JlIGV4cGVyaWVuY2Ugd2lsbCB0ZWxsIHdoYXQgdG8gZG9cbiAgICAjbmV3VnMgPSByZXNjYWxlKG5ld1ZzKVxuICAgIGNvbnNvbGUubG9nIFwiW2Nhbm9uaWNhbGl6YXRpb24gZG9uZSwgbGFzdCB8ZGVsdGFWfD0je21heENoYW5nZX1dXCJcbiAgICBuZXdwb2x5ID0gbmV3IFBvbHloZWRyb24gbmV3VnMsIHBvbHkuZmFjZXMsIHBvbHkubmFtZVxuICAgIGNvbnNvbGUubG9nIFwiY2Fub25pY2FsaXplXCIgbmV3cG9seVxuICAgIG5ld3BvbHlcblxuIyBIYWNreSBDYW5vbmljYWxpemF0aW9uIEFsZ29yaXRobVxuIyBVc2luZyBjZW50ZXIgb2YgZ3Jhdml0eSBvZiB2ZXJ0aWNlcyBmb3IgZWFjaCBmYWNlIHRvIHBsYW5hcml6ZSBmYWNlc1xuXG4jIGdldCB0aGUgc3BoZXJpY2FsIHJlY2lwcm9jYWxzIG9mIGZhY2UgY2VudGVyc1xucmVjaXByb2NhbEMgPSAocG9seSkgLT5cbiAgICBjZW50ZXJzID0gcG9seS5jZW50ZXJzKClcbiAgICBmb3IgYyBpbiBjZW50ZXJzXG4gICAgICAgIGMgPSBtdWx0IDEuMC9kb3QoYyxjKSwgY1xuICAgIGNlbnRlcnNcblxuIyBtYWtlIGFycmF5IG9mIHZlcnRpY2VzIHJlY2lwcm9jYWwgdG8gZ2l2ZW4gcGxhbmVzXG5yZWNpcHJvY2FsTiA9IChwb2x5KSAtPlxuICAgIGFucyA9IFtdXG4gICAgZm9yIGYgaW4gcG9seS5mYWNlcyAjZm9yIGVhY2ggZmFjZVxuICAgICAgICBjZW50cm9pZCAgICA9IFswIDAgMF0gIyBydW5uaW5nIHN1bSBvZiB2ZXJ0ZXggY29vcmRzXG4gICAgICAgIG5vcm1hbFYgICAgID0gWzAgMCAwXSAjIHJ1bm5pbmcgc3VtIG9mIG5vcm1hbCB2ZWN0b3JzXG4gICAgICAgIGF2Z0VkZ2VEaXN0ID0gMC4wICMgcnVubmluZyBzdW0gZm9yIGF2ZyBlZGdlIGRpc3RhbmNlXG4gICAgXG4gICAgICAgIFt2MSwgdjJdID0gZi5zbGljZSAtMlxuICAgICAgICBmb3IgdjMgaW4gZlxuICAgICAgICAgICAgY2VudHJvaWQgICAgID0gYWRkIGNlbnRyb2lkLCBwb2x5LnZlcnRpY2VzW3YzXVxuICAgICAgICAgICAgbm9ybWFsViAgICAgID0gYWRkIG5vcm1hbFYsIG9ydGhvZ29uYWwgcG9seS52ZXJ0aWNlc1t2MV0sIHBvbHkudmVydGljZXNbdjJdLCBwb2x5LnZlcnRpY2VzW3YzXVxuICAgICAgICAgICAgYXZnRWRnZURpc3QgKz0gZWRnZURpc3QgcG9seS52ZXJ0aWNlc1t2MV0sIHBvbHkudmVydGljZXNbdjJdXG4gICAgICAgICAgICBbdjEsIHYyXSA9IFt2MiwgdjNdXG4gICAgXG4gICAgICAgIGNlbnRyb2lkICAgID0gbXVsdCAxLjAvZi5sZW5ndGgsIGNlbnRyb2lkXG4gICAgICAgIG5vcm1hbFYgICAgID0gdW5pdCBub3JtYWxWXG4gICAgICAgIGF2Z0VkZ2VEaXN0ID0gYXZnRWRnZURpc3QgLyBmLmxlbmd0aFxuICAgICAgICB0bXAgICA9IHJlY2lwcm9jYWwgbXVsdCBkb3QoY2VudHJvaWQsIG5vcm1hbFYpLCBub3JtYWxWICMgYmFzZWQgb24gZmFjZVxuICAgICAgICBhbnMucHVzaCBtdWx0ICgxICsgYXZnRWRnZURpc3QpIC8gMiwgdG1wXG4gICAgYW5zXG5cbmNhbm9uaWNhbFhZWiA9IChwb2x5LCBuSXRlcmF0aW9ucykgLT5cbiAgICBuSXRlcmF0aW9ucyA/PSAxXG4gICAgZHBvbHkgPSBkdWFsKHBvbHkpXG4gICAgY29uc29sZS5sb2cgXCJQc2V1ZG8tY2Fub25pY2FsaXppbmcgI3twb2x5Lm5hbWV9Li4uXCJcbiAgXG4gICAgIyBpdGVyYXRpdmVseSByZWNpcHJvY2F0ZSBmYWNlIG5vcm1hbHNcbiAgICBmb3IgY291bnQgaW4gWzAuLi5uSXRlcmF0aW9uc11cbiAgICAgICAgZHBvbHkudmVydGljZXMgPSByZWNpcHJvY2FsTiBwb2x5XG4gICAgICAgIHBvbHkudmVydGljZXMgID0gcmVjaXByb2NhbE4gZHBvbHlcbiAgXG4gICAgbmV3IFBvbHloZWRyb24gcG9seS52ZXJ0aWNlcywgcG9seS5mYWNlcywgcG9seS5uYW1lXG5cbmFkanVzdFhZWiA9IChwb2x5LCBuSXRlcmF0aW9ucykgLT4gIyBxdWljayBwbGFuYXJpemF0aW9uXG4gICAgbkl0ZXJhdGlvbnMgPz0gMVxuICAgIGRwb2x5ID0gZHVhbCBwb2x5ICMgdidzIG9mIGR1YWwgYXJlIGluIG9yZGVyIG9mIGFyZydzIGYnc1xuICAgIGNvbnNvbGUubG9nIFwiUGxhbmFyaXppbmcgI3twb2x5Lm5hbWV9Li4uXCJcbiAgXG4gICAgZm9yIGNvdW50IGluIFswLi4ubkl0ZXJhdGlvbnNdXG4gICAgICAgICMgcmVjaXByb2NhdGUgZmFjZSBjZW50ZXJzXG4gICAgICAgIGRwb2x5LnZlcnRpY2VzID0gcmVjaXByb2NhbEMgcG9seVxuICAgICAgICBwb2x5LnZlcnRpY2VzICA9IHJlY2lwcm9jYWxDIGRwb2x5XG4gIFxuICAgIG5ldyBQb2x5aGVkcm9uIHBvbHkudmVydGljZXMsIHBvbHkuZmFjZXMsIHBvbHkubmFtZVxuXG5tb2R1bGUuZXhwb3J0cyA9IFxuICAgIHJlc2NhbGU6ICAgICAgICByZXNjYWxlXG4gICAgdGFuZ2VudGlmeTogICAgIHRhbmdlbnRpZnlcbiAgICByZWNlbnRlcjogICAgICAgcmVjZW50ZXJcbiAgICBwbGFuYXJpemU6ICAgICAgcGxhbmFyaXplXG4gICAgY2Fub25pY2FsaXplOiAgIGNhbm9uaWNhbGl6ZVxuICAgIHJlY2lwcm9jYWxOOiAgICByZWNpcHJvY2FsTlxuICAgIHJlY2lwcm9jYWxDOiAgICByZWNpcHJvY2FsQ1xuICAgIGFkanVzdFhZWjogICAgICBhZGp1c3RYWVpcbiAgICBjYW5vbmljYWxYWVo6ICAgY2Fub25pY2FsWFlaXG4gICAgYWRkOiAgICAgICAgICAgIGFkZFxuICAgIHN1YjogICAgICAgICAgICBzdWJcbiAgICBtdWx0OiAgICAgICAgICAgbXVsdFxuICAgIGludGVyc2VjdDogICAgICBpbnRlcnNlY3RcbiAgICB0YW5nZW50UG9pbnQ6ICAgdGFuZ2VudFBvaW50XG4gICAgIl19
//# sourceURL=../../coffee/poly/geo.coffee