// koffee 1.6.0

/*
 0000000   00000000   0000000   
000        000       000   000  
000  0000  0000000   000   000  
000   000  000       000   000  
 0000000   00000000   0000000
 */
var Polyhedron, add, adjustXYZ, canonicalXYZ, canonicalize, dot, dual, edgeDist, mult, orthogonal, planarize, recenter, reciprocal, reciprocalC, reciprocalN, ref, rescale, tangentify, unit;

Polyhedron = require('./polyhedron');

dual = require('./topo').dual;

ref = require('./math'), add = ref.add, dot = ref.dot, mult = ref.mult, unit = ref.unit, orthogonal = ref.orthogonal, reciprocal = ref.reciprocal, edgeDist = ref.edgeDist;

tangentify = function(vertices, edges) {
    var STABILITY_FACTOR, c, e, j, len, newVs, t;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = edges.length; j < len; j++) {
        e = edges[j];
        t = tangentPoint(newVs[e[0]], newVs[e[1]]);
        c = mult((1 - sqrt(dot(t, t))) * STABILITY_FACTOR / 2, t);
        newVs[e[0]] = add(newVs[e[0]], c);
        newVs[e[1]] = add(newVs[e[1]], c);
    }
    return newVs;
};

recenter = function(vertices, edges) {
    var edgecenters, j, len, polycenter, v;
    edgecenters = edges.map(function(arg) {
        var a, b;
        a = arg[0], b = arg[1];
        return tangentPoint(vertices[a], vertices[b]);
    });
    polycenter = [0, 0, 0];
    for (j = 0, len = edgecenters.length; j < len; j++) {
        v = edgecenters[j];
        polycenter = add(polycenter, v);
    }
    polycenter = mult(1 / edges.length, polycenter);
    return _.map(vertices, function(x) {
        return sub(x, polycenter);
    });
};

rescale = function(vertices) {
    var maxExtent, polycenter, s;
    polycenter = [0, 0, 0];
    maxExtent = _.max(_.map(vertices, function(x) {
        return mag(x);
    }));
    s = 1 / maxExtent;
    return _.map(vertices, function(x) {
        return [s * x[0], s * x[1], s * x[2]];
    });
};

planarize = function(vertices, faces) {
    var STABILITY_FACTOR, c, coords, f, j, k, len, len1, n, newVs, v;
    STABILITY_FACTOR = 0.1;
    newVs = copyVecArray(vertices);
    for (j = 0, len = faces.length; j < len; j++) {
        f = faces[j];
        coords = f.map(function(v) {
            return vertices[v];
        });
        n = normal(coords);
        c = calcCentroid(coords);
        if (dot(n, c) < 0) {
            n = mult(-1.0, n);
        }
        for (k = 0, len1 = f.length; k < len1; k++) {
            v = f[k];
            newVs[v] = add(newVs[v], mult(dot(mult(STABILITY_FACTOR, n), sub(c, vertices[v])), n));
        }
    }
    return newVs;
};

canonicalize = function(poly, Niter) {
    var edges, faces, i, j, maxChange, newVs, newpoly, oldVs, ref1;
    Polyhedron = require('./polyhedron').Polyhedron;
    if (Niter != null) {
        Niter;
    } else {
        Niter = 1;
    }
    klog("canonicalize " + poly.name);
    faces = poly.faces;
    edges = poly.edges();
    newVs = poly.vertices;
    maxChange = 1.0;
    for (i = j = 0, ref1 = Niter; 0 <= ref1 ? j <= ref1 : j >= ref1; i = 0 <= ref1 ? ++j : --j) {
        oldVs = copyVecArray(newVs);
        newVs = tangentify(newVs, edges);
        newVs = recenter(newVs, edges);
        newVs = planarize(newVs, faces);
        maxChange = _.max(_.map(_.zip(newVs, oldVs), function(arg) {
            var x, y;
            x = arg[0], y = arg[1];
            return mag(sub(x, y));
        }));
        if (maxChange < 1e-8) {
            break;
        }
    }
    klog("[canonicalization done, last |deltaV|=" + maxChange + "]");
    newpoly = new Polyhedron(poly.name, poly.faces, newVs);
    klog("canonicalize", newpoly);
    return newpoly;
};

reciprocalC = function(poly) {
    var c, centers, j, len;
    centers = poly.centers();
    for (j = 0, len = centers.length; j < len; j++) {
        c = centers[j];
        c = mult(1.0 / dot(c, c), c);
    }
    return centers;
};

reciprocalN = function(poly) {
    var ans, avgEdgeDist, centroid, f, j, k, len, len1, normalV, ref1, ref2, ref3, tmp, v1, v2, v3;
    ans = [];
    ref1 = poly.faces;
    for (j = 0, len = ref1.length; j < len; j++) {
        f = ref1[j];
        centroid = [0, 0, 0];
        normalV = [0, 0, 0];
        avgEdgeDist = 0.0;
        ref2 = f.slice(-2), v1 = ref2[0], v2 = ref2[1];
        for (k = 0, len1 = f.length; k < len1; k++) {
            v3 = f[k];
            centroid = add(centroid, poly.vertices[v3]);
            normalV = add(normalV, orthogonal(poly.vertices[v1], poly.vertices[v2], poly.vertices[v3]));
            avgEdgeDist += edgeDist(poly.vertices[v1], poly.vertices[v2]);
            ref3 = [v2, v3], v1 = ref3[0], v2 = ref3[1];
        }
        centroid = mult(1.0 / f.length, centroid);
        normalV = unit(normalV);
        avgEdgeDist = avgEdgeDist / f.length;
        tmp = reciprocal(mult(dot(centroid, normalV), normalV));
        ans.push(mult((1 + avgEdgeDist) / 2, tmp));
    }
    return ans;
};

canonicalXYZ = function(poly, nIterations) {
    var count, dpoly, j, ref1;
    if (nIterations != null) {
        nIterations;
    } else {
        nIterations = 1;
    }
    dpoly = dual(poly);
    for (count = j = 0, ref1 = nIterations; 0 <= ref1 ? j < ref1 : j > ref1; count = 0 <= ref1 ? ++j : --j) {
        dpoly.vertices = reciprocalN(poly);
        poly.vertices = reciprocalN(dpoly);
    }
    return new Polyhedron(poly.name, poly.faces, poly.vertices);
};

adjustXYZ = function(poly, nIterations) {
    var count, dpoly, j, ref1;
    if (nIterations != null) {
        nIterations;
    } else {
        nIterations = 1;
    }
    dpoly = dual(poly);
    for (count = j = 0, ref1 = nIterations; 0 <= ref1 ? j < ref1 : j > ref1; count = 0 <= ref1 ? ++j : --j) {
        dpoly.vertices = reciprocalC(poly);
        poly.vertices = reciprocalC(dpoly);
    }
    return new Polyhedron(poly.name, poly.faces, poly.vertices);
};

module.exports = {
    rescale: rescale,
    tangentify: tangentify,
    recenter: recenter,
    planarize: planarize,
    canonicalize: canonicalize,
    reciprocalN: reciprocalN,
    reciprocalC: reciprocalC,
    adjustXYZ: adjustXYZ,
    canonicalXYZ: canonicalXYZ
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/geo.coffee