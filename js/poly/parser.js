// koffee 1.6.0

/*
00000000    0000000   00000000    0000000  00000000  00000000   
000   000  000   000  000   000  000       000       000   000  
00000000   000000000  0000000    0000000   0000000   0000000    
000        000   000  000   000       000  000       000   000  
000        000   000  000   000  0000000   00000000  000   000
 */
var PEG, add, basemap, generate, klog, opmap, parser, poly, recenter, ref, replacements, rescale, topo;

klog = require('kxk').klog;

ref = require('./geo'), add = ref.add, recenter = ref.recenter, rescale = ref.rescale;

poly = require('./poly');

topo = require('./topo');

PEG = require('pegjs');

parser = PEG.generate("start  = opspec+\n\nopspec \n    = lettr:opcode args:opargs {return {\"op\":lettr,\"args\":args};}\n    / lettr:opcode float:float {return {\"op\":lettr,\"args\":[float]};}\n    / lettr:opcode             {return {\"op\":lettr,\"args\":[]};}\n\nopargs = \"(\"\n         num:( float:float \",\"? {return float} )+\n         \")\" {return num;}\n\nopcode = op:[a-zA-Z] {return op;}\n\nint   = digits:[0-9-]+   { return parseInt(digits.join(\"\"), 10); }\nfloat = digits:[0-9.-]+  { return parseFloat(digits.join(\"\"), 10); }");

basemap = {
    T: poly.tetrahedron,
    O: poly.octahedron,
    C: poly.cube,
    I: poly.icosahedron,
    D: poly.dodecahedron,
    P: poly.prism,
    A: poly.antiprism,
    Y: poly.pyramid,
    J: poly.johnson,
    U: poly.cupola,
    V: poly.anticupola
};

opmap = {
    d: topo.dual,
    a: topo.ambo,
    k: topo.kis,
    g: topo.gyro,
    p: topo.propellor,
    r: topo.reflect,
    c: topo.chamfer,
    w: topo.whirl,
    n: topo.inset,
    x: topo.extrude,
    l: topo.loft,
    P: topo.perspectiva,
    q: topo.quinto,
    u: topo.trisub,
    H: topo.hollow,
    C: topo.canonicalize,
    A: topo.adjustXY
};

replacements = [[/e/g, 'aa'], [/b/g, 'ta'], [/o/g, 'jj'], [/m/g, 'kj'], [/t(\d*)/g, 'dk$1d'], [/j/g, 'dad'], [/s/g, 'dgd'], [/dd/g, ''], [/ad/g, 'a'], [/gd/g, 'g'], [/aO/g, 'aC'], [/aI/g, 'aD'], [/gO/g, 'gC'], [/gI/g, 'gD']];

generate = function(notation) {
    var baseargs, basefunc, dispatch, equiv, expanded, i, j, len, len1, op, opargs, opfunc, oplist, orig, ref1;
    dispatch = function(fn, arg) {
        return fn.apply(fn, arg || []);
    };
    expanded = notation;
    for (i = 0, len = replacements.length; i < len; i++) {
        ref1 = replacements[i], orig = ref1[0], equiv = ref1[1];
        expanded = expanded.replace(orig, equiv);
    }
    oplist = parser.parse(expanded).reverse();
    op = oplist.shift();
    basefunc = basemap[op['op']];
    baseargs = op['args'];
    poly = dispatch(basefunc, baseargs);
    for (j = 0, len1 = oplist.length; j < len1; j++) {
        op = oplist[j];
        opfunc = opmap[op['op']];
        opargs = [poly].concat(op['args']);
        poly = dispatch(opfunc, opargs);
    }
    poly.vertex = poly.vertices;
    poly.face = poly.faces;
    return poly;
};

module.exports = {
    generate: generate
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/parser.coffee