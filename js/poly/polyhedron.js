// koffee 1.6.0

/*
00000000    0000000   000      000   000  000   000  00000000  0000000    00000000    0000000   000   000  
000   000  000   000  000       000 000   000   000  000       000   000  000   000  000   000  0000  000  
00000000   000   000  000        00000    000000000  0000000   000   000  0000000    000   000  000 0 000  
000        000   000  000         000     000   000  000       000   000  000   000  000   000  000  0000  
000         0000000   0000000     000     000   000  00000000  0000000    000   000   0000000   000   000
 */
var Polyhedron, Vect, _, add, cross, faceToEdges, facesToWings, mag, min, mult, normal, rad2deg, ref, ref1, sub,
    indexOf = [].indexOf;

ref = require('kxk'), _ = ref._, rad2deg = ref.rad2deg;

ref1 = require('./math'), add = ref1.add, cross = ref1.cross, faceToEdges = ref1.faceToEdges, facesToWings = ref1.facesToWings, mag = ref1.mag, mult = ref1.mult, normal = ref1.normal, sub = ref1.sub;

min = Math.min;

Vect = require('../vect');

Polyhedron = (function() {
    function Polyhedron(name, face1, vertex) {
        this.name = name;
        this.face = face1;
        this.vertex = vertex;
        if (this.face != null) {
            this.face;
        } else {
            this.face = [];
        }
        if (this.vertex != null) {
            this.vertex;
        } else {
            this.vertex = [];
        }
        if (this.name != null) {
            this.name;
        } else {
            this.name = "polyhedron";
        }
    }

    Polyhedron.prototype.neighbors = function() {
        var face, i, j, k, len, neighbors, ni, perp, ref2, ref3, ref4, ref5, ref6, toN0, toVertex, v, vi;
        neighbors = (function() {
            var i, len, ref2, results;
            ref2 = this.vertex;
            results = [];
            for (i = 0, len = ref2.length; i < len; i++) {
                v = ref2[i];
                results.push([]);
            }
            return results;
        }).call(this);
        ref2 = this.face;
        for (i = 0, len = ref2.length; i < len; i++) {
            face = ref2[i];
            for (vi = j = 0, ref3 = face.length; 0 <= ref3 ? j < ref3 : j > ref3; vi = 0 <= ref3 ? ++j : --j) {
                ni = (vi + 1) % face.length;
                if (ref4 = face[ni], indexOf.call(neighbors[face[vi]], ref4) < 0) {
                    neighbors[face[vi]].push(face[ni]);
                }
                if (ref5 = face[vi], indexOf.call(neighbors[face[ni]], ref5) < 0) {
                    neighbors[face[ni]].push(face[vi]);
                }
            }
        }
        for (vi = k = 0, ref6 = neighbors.length; 0 <= ref6 ? k < ref6 : k > ref6; vi = 0 <= ref6 ? ++k : --k) {
            toVertex = this.vert(vi);
            toVertex.normalize();
            toN0 = this.vert(neighbors[vi][0]);
            perp = toVertex.crossed(toN0);
            neighbors[vi].sort((function(_this) {
                return function(a, b) {
                    var aa, bb;
                    aa = Vect.GetAngleBetweenVectors(perp, _this.vert(a), toVertex);
                    bb = Vect.GetAngleBetweenVectors(perp, _this.vert(b), toVertex);
                    return aa - bb;
                };
            })(this));
        }
        return neighbors;
    };

    Polyhedron.prototype.wings = function() {
        return facesToWings(this.face);
    };

    Polyhedron.prototype.edges = function() {
        var a, b, e, edgeSet, faceEdges, i, j, len, len1, uniqEdges;
        uniqEdges = {};
        faceEdges = this.face.map(faceToEdges);
        for (i = 0, len = faceEdges.length; i < len; i++) {
            edgeSet = faceEdges[i];
            for (j = 0, len1 = edgeSet.length; j < len1; j++) {
                e = edgeSet[j];
                if (e[0] < e[1]) {
                    a = e[0], b = e[1];
                } else {
                    b = e[0], a = e[1];
                }
                uniqEdges[a + "~" + b] = e;
            }
        }
        return _.values(uniqEdges);
    };

    Polyhedron.prototype.edge = function(v1, v2) {
        return this.vert(v2).subtract(this.vert(v1));
    };

    Polyhedron.prototype.edgeNormal = function(v1, v2) {
        return this.vertNormal(v1).addInPlace(this.vertNormal(v2)).scale(0.5);
    };

    Polyhedron.prototype.minEdgeLength = function() {
        var edge, i, len, minEdgeLength, ref2;
        minEdgeLength = 2e308;
        ref2 = this.edges();
        for (i = 0, len = ref2.length; i < len; i++) {
            edge = ref2[i];
            minEdgeLength = min(minEdgeLength, this.vert(edge[0]).dist(this.vert(edge[1])));
        }
        return minEdgeLength;
    };

    Polyhedron.prototype.maxEdgeDifference = function() {
        var diffs, edge, face, i, j, len, len1, length, ref2, ref3;
        diffs = [];
        ref2 = this.face;
        for (i = 0, len = ref2.length; i < len; i++) {
            face = ref2[i];
            length = [];
            ref3 = faceToEdges(face);
            for (j = 0, len1 = ref3.length; j < len1; j++) {
                edge = ref3[j];
                length.push(this.vert(edge[0]).to(this.vert(edge[1])).length());
            }
            diffs.push(_.max(length) - _.min(length));
        }
        return _.max(diffs);
    };

    Polyhedron.prototype.vert = function(vi) {
        return new Vect(this.vertex[vi]);
    };

    Polyhedron.prototype.vertNormal = function(vi) {
        var i, len, ni, ref2, sum;
        sum = new Vector3(0, 0, 0);
        ref2 = this.neighbors(vi);
        for (i = 0, len = ref2.length; i < len; i++) {
            ni = ref2[i];
            sum.addInPlace(this.edge(vi, ni));
        }
        sum.normalize();
        return sum;
    };

    Polyhedron.prototype.facesAtVertex = function(vi) {
        var face, faces, fi, i, len, ref2;
        faces = [];
        ref2 = this.face;
        for (fi = i = 0, len = ref2.length; i < len; fi = ++i) {
            face = ref2[fi];
            if (indexOf.call(face, vi) >= 0) {
                faces.push(fi);
            }
        }
        return faces;
    };

    Polyhedron.prototype.centers = function() {
        var centersArray, face, fcenter, i, j, len, len1, ref2, vidx;
        centersArray = [];
        ref2 = this.face;
        for (i = 0, len = ref2.length; i < len; i++) {
            face = ref2[i];
            fcenter = [0, 0, 0];
            for (j = 0, len1 = face.length; j < len1; j++) {
                vidx = face[j];
                fcenter = add(fcenter, this.vertex[vidx]);
            }
            centersArray.push(mult(1.0 / face.length, fcenter));
        }
        return centersArray;
    };

    Polyhedron.prototype.minFaceDist = function() {
        var center, i, len, minFaceDist, ref2;
        minFaceDist = 2e308;
        ref2 = this.centers();
        for (i = 0, len = ref2.length; i < len; i++) {
            center = ref2[i];
            minFaceDist = min(minFaceDist, mag(center));
        }
        return minFaceDist;
    };

    Polyhedron.prototype.normals = function() {
        var face, i, len, normalsArray, ref2;
        normalsArray = [];
        ref2 = this.face;
        for (i = 0, len = ref2.length; i < len; i++) {
            face = ref2[i];
            normalsArray.push(normal(face.map((function(_this) {
                return function(vidx) {
                    return _this.vertex[vidx];
                };
            })(this))));
        }
        return normalsArray;
    };

    Polyhedron.prototype.data = function() {
        var nEdges;
        nEdges = (this.face.length + this.vertex.length) - 2;
        return this.face.length + " faces, " + nEdges + " edges, " + this.vertex.length + " vertices";
    };

    Polyhedron.prototype.colorize = function(method) {
        var colorassign, colormemory;
        if (method == null) {
            method = 'sidedness';
        }
        this.colors = [];
        colormemory = {};
        colorassign = function(hash) {
            return colormemory[hash] != null ? colormemory[hash] : colormemory[hash] = _.size(colormemory);
        };
        switch (method) {
            case 'signature':
                this.colors = this.face.map((function(_this) {
                    return function(f) {
                        return colorassign(_this.signature(f));
                    };
                })(this));
                break;
            default:
                this.colors = this.face.map(function(f) {
                    return f.length - 3;
                });
        }
        return this;
    };

    Polyhedron.prototype.signature = function(face) {
        var angles, i, len, ref2, ref3, v1, v2, v3, vertices;
        vertices = face.map((function(_this) {
            return function(v) {
                return _this.vertex[v];
            };
        })(this));
        angles = [];
        ref2 = vertices.slice(-2), v1 = ref2[0], v2 = ref2[1];
        for (i = 0, len = vertices.length; i < len; i++) {
            v3 = vertices[i];
            angles.push(parseInt(rad2deg(mag(cross(sub(v1, v2), sub(v3, v2))))));
            ref3 = [v2, v3], v1 = ref3[0], v2 = ref3[1];
        }
        return angles.sort().join('_');
    };

    return Polyhedron;

})();

module.exports = Polyhedron;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/polyhedron.coffee