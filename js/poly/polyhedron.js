// koffee 1.6.0

/*
00000000    0000000   000      000   000  000   000  00000000  0000000    00000000    0000000   000   000  
000   000  000   000  000       000 000   000   000  000       000   000  000   000  000   000  0000  000  
00000000   000   000  000        00000    000000000  0000000   000   000  0000000    000   000  000 0 000  
000        000   000  000         000     000   000  000       000   000  000   000  000   000  000  0000  
000         0000000   0000000     000     000   000  00000000  0000000    000   000   0000000   000   000
 */
var Polyhedron, Vect, _, add, mult, normal, ref,
    indexOf = [].indexOf;

_ = require('kxk')._;

ref = require('./math'), add = ref.add, mult = ref.mult, normal = ref.normal;

Vect = require('../vect');

Polyhedron = (function() {
    function Polyhedron(name, faces, vertices) {
        this.name = name;
        this.faces = faces;
        this.vertices = vertices;
        if (this.faces != null) {
            this.faces;
        } else {
            this.faces = [];
        }
        if (this.vertices != null) {
            this.vertices;
        } else {
            this.vertices = [];
        }
        if (this.name != null) {
            this.name;
        } else {
            this.name = "polyhedron";
        }
    }

    Polyhedron.prototype.neighbors = function() {
        var face, i, j, k, len, neighbors, ni, perp, ref1, ref2, ref3, ref4, ref5, toN0, toVertex, v, vi;
        neighbors = (function() {
            var i, len, ref1, results;
            ref1 = this.vertices;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
                v = ref1[i];
                results.push([]);
            }
            return results;
        }).call(this);
        ref1 = this.faces;
        for (i = 0, len = ref1.length; i < len; i++) {
            face = ref1[i];
            for (vi = j = 0, ref2 = face.length; 0 <= ref2 ? j < ref2 : j > ref2; vi = 0 <= ref2 ? ++j : --j) {
                ni = (vi + 1) % face.length;
                if (ref3 = face[ni], indexOf.call(neighbors[face[vi]], ref3) < 0) {
                    neighbors[face[vi]].push(face[ni]);
                }
                if (ref4 = face[vi], indexOf.call(neighbors[face[ni]], ref4) < 0) {
                    neighbors[face[ni]].push(face[vi]);
                }
            }
        }
        for (vi = k = 0, ref5 = neighbors.length; 0 <= ref5 ? k < ref5 : k > ref5; vi = 0 <= ref5 ? ++k : --k) {
            toVertex = this.vert(vi);
            toVertex.normalize();
            toN0 = this.vert(neighbors[vi][0]);
            perp = toVertex.crossed(toN0);
            neighbors[vi].sort((function(_this) {
                return function(a, b) {
                    var aa, bb;
                    aa = Vect.GetAngleBetweenVectors(perp, _this.vert(a), toVertex);
                    bb = Vect.GetAngleBetweenVectors(perp, _this.vert(b), toVertex);
                    return aa - bb;
                };
            })(this));
        }
        return neighbors;
    };

    Polyhedron.prototype.wings = function() {
        var edge, edges, epool, fi, i, j, nvert, oi, other, pvert, ref1, ref2, wings;
        nvert = {};
        pvert = {};
        epool = [];
        for (fi = i = 0, ref1 = this.faces.length; 0 <= ref1 ? i < ref1 : i > ref1; fi = 0 <= ref1 ? ++i : --i) {
            edges = this.faceToEdges(this.faces[fi]);
            edges.forEach(function(edge) {
                if (nvert[fi] != null) {
                    nvert[fi];
                } else {
                    nvert[fi] = {};
                }
                if (pvert[fi] != null) {
                    pvert[fi];
                } else {
                    pvert[fi] = {};
                }
                nvert[fi][edge[0]] = edge[1];
                pvert[fi][edge[1]] = edge[0];
                return edge.push({
                    fr: fi
                });
            });
            epool = epool.concat(edges);
        }
        wings = [];
        while (epool.length) {
            edge = epool.shift();
            edge[2].nr = nvert[edge[2].fr][edge[1]];
            edge[2].pr = pvert[edge[2].fr][edge[0]];
            for (oi = j = 0, ref2 = epool.length; 0 <= ref2 ? j < ref2 : j > ref2; oi = 0 <= ref2 ? ++j : --j) {
                other = epool[oi];
                if (other[0] === edge[1] && other[1] === edge[0]) {
                    edge[2].fl = other[2].fr;
                    edge[2].nl = pvert[edge[2].fl][edge[1]];
                    edge[2].pl = nvert[edge[2].fl][edge[0]];
                    epool.splice(oi, 1);
                    break;
                }
            }
            wings.push(edge);
        }
        return wings;
    };

    Polyhedron.prototype.faceToEdges = function(face) {
        var edges, i, len, v1, v2;
        edges = [];
        v1 = face.slice(-1)[0];
        for (i = 0, len = face.length; i < len; i++) {
            v2 = face[i];
            edges.push([v1, v2]);
            v1 = v2;
        }
        return edges;
    };

    Polyhedron.prototype.edges = function() {
        var a, b, e, edgeSet, faceEdges, i, j, len, len1, uniqEdges;
        uniqEdges = {};
        faceEdges = this.faces.map(this.faceToEdges);
        for (i = 0, len = faceEdges.length; i < len; i++) {
            edgeSet = faceEdges[i];
            for (j = 0, len1 = edgeSet.length; j < len1; j++) {
                e = edgeSet[j];
                if (e[0] < e[1]) {
                    a = e[0], b = e[1];
                } else {
                    b = e[0], a = e[1];
                }
                uniqEdges[a + "~" + b] = e;
            }
        }
        return _.values(uniqEdges);
    };

    Polyhedron.prototype.edge = function(v1, v2) {
        return this.vert(v2).subtract(this.vert(v1));
    };

    Polyhedron.prototype.edgeNormal = function(v1, v2) {
        return this.vertNormal(v1).add(this.vertNormal(v2)).scale(0.5);
    };

    Polyhedron.prototype.vert = function(vi) {
        return new Vect(this.vertices[vi]);
    };

    Polyhedron.prototype.vertNormal = function(vi) {
        var i, len, ni, ref1, sum;
        sum = new Vector3(0, 0, 0);
        ref1 = this.neighbors(vi);
        for (i = 0, len = ref1.length; i < len; i++) {
            ni = ref1[i];
            sum.addInPlace(this.edge(vi, ni));
        }
        sum.normalize();
        return sum;
    };

    Polyhedron.prototype.centers = function() {
        var centersArray, face, fcenter, i, j, len, len1, ref1, vidx;
        centersArray = [];
        ref1 = this.faces;
        for (i = 0, len = ref1.length; i < len; i++) {
            face = ref1[i];
            fcenter = [0, 0, 0];
            for (j = 0, len1 = face.length; j < len1; j++) {
                vidx = face[j];
                fcenter = add(fcenter, this.vertices[vidx]);
            }
            centersArray.push(mult(1.0 / face.length, fcenter));
        }
        return centersArray;
    };

    Polyhedron.prototype.normals = function() {
        var face, i, len, normalsArray, ref1;
        normalsArray = [];
        ref1 = this.faces;
        for (i = 0, len = ref1.length; i < len; i++) {
            face = ref1[i];
            normalsArray.push(normal(face.map((function(_this) {
                return function(vidx) {
                    return _this.vertices[vidx];
                };
            })(this))));
        }
        return normalsArray;
    };

    Polyhedron.prototype.data = function() {
        var nEdges;
        nEdges = (this.faces.length + this.vertices.length) - 2;
        return this.faces.length + " faces, " + nEdges + " edges, " + this.vertices.length + " vertices";
    };

    Polyhedron.prototype.colorize = function(method) {
        var clr, colorassign, colormemory, f, face_verts, i, len, ref1;
        if (method == null) {
            method = 'sidedness';
        }
        this.colors = [];
        colormemory = {};
        colorassign = function(hash) {
            return colormemory[hash] != null ? colormemory[hash] : colormemory[hash] = _.size(colormemory);
        };
        ref1 = this.faces;
        for (i = 0, len = ref1.length; i < len; i++) {
            f = ref1[i];
            switch (method) {
                case 'area':
                    face_verts = f.map((function(_this) {
                        return function(v) {
                            return _this.vertices[v];
                        };
                    })(this));
                    clr = colorassign(sigfigs(planararea(face_verts), 2));
                    break;
                case 'signature':
                    face_verts = f.map((function(_this) {
                        return function(v) {
                            return _this.vertices[v];
                        };
                    })(this));
                    clr = colorassign(faceSignature(face_verts, 2));
                    break;
                default:
                    clr = f.length - 3;
            }
            this.colors.push(clr);
        }
        return this;
    };

    return Polyhedron;

})();

module.exports = Polyhedron;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/poly/polyhedron.coffee