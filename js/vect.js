// koffee 1.6.0

/*
000   000  00000000   0000000  000000000
000   000  000       000          000   
 000 000   0000000   000          000   
   000     000       000          000   
    0      00000000   0000000     000
 */
var Vect, Vector3, abs, acos, rad2deg, randRange, ref, round, sqrt,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), randRange = ref.randRange, rad2deg = ref.rad2deg;

Vector3 = require('babylonjs').Vector3;

round = Math.round, acos = Math.acos, abs = Math.abs, sqrt = Math.sqrt;

Vect = (function(superClass) {
    extend(Vect, superClass);

    Vect.counter = 0;

    Vect.tmp = new Vect;

    function Vect(x, y, z) {
        var ref1, ref2;
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        Vect.counter += 1;
        if ((x.x != null) && (x.y != null)) {
            Vect.__super__.constructor.call(this, x.x, x.y, (ref1 = x.z) != null ? ref1 : 0);
        } else if (Array.isArray(x)) {
            Vect.__super__.constructor.call(this, x[0], x[1], (ref2 = x[2]) != null ? ref2 : 0);
        } else {
            Vect.__super__.constructor.call(this, x, y, z != null ? z : 0);
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Vect.prototype.clone = function() {
        return new Vect(this);
    };

    Vect.prototype.copy = function(v) {
        var ref1;
        this.x = v.x;
        this.y = v.y;
        this.z = (ref1 = v.z) != null ? ref1 : 0;
        return this;
    };

    Vect.prototype.parallel = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vect(dot * n.x, dot * n.y, dot * n.z);
    };

    Vect.prototype.perpendicular = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vect(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vect.prototype.reflect = function(n) {
        var dot;
        dot = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
        return new Vect(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vect.prototype.rotated = function(axis, angle) {
        return this.clone().rotate(axis, angle);
    };

    Vect.prototype.rotate = function(axis, angle) {
        var Quat;
        Quat = require('./quat');
        this.applyQuaternion(Quat.axisAngle(axis, angle));
        return this;
    };

    Vect.prototype.crossed = function(v) {
        return this.clone().cross(v);
    };

    Vect.prototype.cross = function(v) {
        return this.crossVectors(this, v);
    };

    Vect.prototype.normal = function() {
        return this.clone().normalize();
    };

    Vect.prototype.normalize = function() {
        var l;
        l = this.length();
        if (l) {
            l = 1.0 / l;
            this.x *= l;
            this.y *= l;
            this.z *= l;
        }
        return this;
    };

    Vect.prototype.xyperp = function() {
        return new Vect(-this.y, this.x);
    };

    Vect.prototype.rounded = function() {
        return this.clone().round();
    };

    Vect.prototype.round = function() {
        this.x = round(this.x);
        this.y = round(this.y);
        this.z = round(this.z);
        return this;
    };

    Vect.prototype.equals = function(o) {
        return this.manhattan(o) < 0.001;
    };

    Vect.prototype.same = function(o) {
        var z;
        return this.x === o.x && this.y === o.y && (z = o.z);
    };

    Vect.prototype.faded = function(o, val) {
        return this.clone().fade(o, val);
    };

    Vect.prototype.fade = function(o, val) {
        this.x = this.x * (1 - val) + o.x * val;
        this.y = this.y * (1 - val) + o.y * val;
        this.z = this.z * (1 - val) + o.z * val;
        return this;
    };

    Vect.prototype.xyangle = function(v) {
        var otherXY, thisXY;
        thisXY = new Vect(this.x, this.y).normal();
        otherXY = new Vect(v.x, v.y).normal();
        if (thisXY.xyperp().dot(otherXY >= 0)) {
            return rad2deg(acos(thisXY.dot(otherXY)));
        }
        return -rad2deg(acos(thisXY.dot(otherXY)));
    };

    Vect.prototype.paris = function(o) {
        var m;
        m = [abs(o.x - this.x), abs(o.y - this.y), abs(o.z - this.z)];
        m.sort(function(a, b) {
            return b - a;
        });
        return m[0] + 0.2 * m[1] + 0.1 * m[2];
    };

    Vect.prototype.manhattan = function(o) {
        return abs(o.x - this.x) + abs(o.y - this.y) + abs(o.z - this.z);
    };

    Vect.prototype.dist = function(o) {
        return this.minus(o).length();
    };

    Vect.prototype.length = function() {
        return sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Vect.prototype.dot = function(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vect.prototype.mul = function(f) {
        return new Vect(this.x * f, this.y * f, this.z * f);
    };

    Vect.prototype.div = function(d) {
        return new Vect(this.x / d, this.y / d, this.z / d);
    };

    Vect.prototype.plus = function(v) {
        return new Vect(v).add(this);
    };

    Vect.prototype.minus = function(v) {
        return new Vect(v).neg().add(this);
    };

    Vect.prototype.neg = function() {
        return new Vect(-this.x, -this.y, -this.z);
    };

    Vect.prototype.to = function(v) {
        return new Vect(v).sub(this);
    };

    Vect.prototype.angle = function(v) {
        var l, o, p, q, r, x, y, z;
        if (l = this.length()) {
            if (o = v.length()) {
                x = this.x / l;
                y = this.y / l;
                z = this.z / l;
                p = v.x / o;
                q = v.y / o;
                r = v.z / o;
                return rad2deg(acos(x * p + y * q + z * r));
            }
        }
        return 0;
    };

    Vect.prototype.negate = function() {
        return this.scale(-1);
    };

    Vect.prototype.scale = function(f) {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        return this;
    };

    Vect.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        return this;
    };

    Vect.prototype.isZero = function() {
        var ref1, ref2;
        return ((this.x === (ref2 = this.y) && ref2 === (ref1 = this.z)) && ref1 === 0);
    };

    Vect.prototype.randomize = function() {
        this.set(randRange(-1, 1), randRange(-1, 1), randRange(-1, 1));
        this.normalize();
        return this;
    };

    Vect.random = function() {
        return new Vect().randomize();
    };

    Vect.rayPlaneIntersection = function(rayPos, rayDirection, planePos, planeNormal) {
        var x;
        x = planePos.minus(rayPos).dot(planeNormal) / rayDirection.dot(planeNormal);
        return rayPos.plus(rayDirection.mul(x));
    };

    Vect.pointMappedToPlane = function(point, planePos, planeNormal) {
        return point.minus(planeNormal).dot(point.minus(planePos).dot(planeNormal));
    };

    Vect.rayPlaneIntersectionFactor = function(rayPos, rayDir, planePos, planeNormal) {
        var r, rayDot;
        rayDot = rayDir.dot(planeNormal);
        if (Number.isNaN(rayDot)) {
            throw new Error;
        }
        if (rayDot === 0) {
            return 2;
        }
        r = planePos.minus(rayPos).dot(planeNormal) / rayDot;
        if (Number.isNaN(r)) {
            console.log('rayPos', rayPos);
            console.log('rayDir', rayDir);
            console.log('planePos', planePos);
            console.log('planeNormal', planeNormal);
            throw new Error;
        }
        return r;
    };

    Vect.PX = 0;

    Vect.PY = 1;

    Vect.PZ = 2;

    Vect.NX = 3;

    Vect.NY = 4;

    Vect.NZ = 5;

    Vect.unitX = new Vect(1, 0, 0);

    Vect.unitY = new Vect(0, 1, 0);

    Vect.unitZ = new Vect(0, 0, 1);

    Vect.minusX = new Vect(-1, 0, 0);

    Vect.minusY = new Vect(0, -1, 0);

    Vect.minusZ = new Vect(0, 0, -1);

    Vect.normals = [Vect.unitX, Vect.unitY, Vect.unitZ, Vect.minusX, Vect.minusY, Vect.minusZ];

    Vect.perpNormals = function(v) {
        var i;
        i = this.normalIndex(v);
        switch (i) {
            case this.PX:
                return [this.unitY, this.unitZ, this.minusY, this.minusZ];
            case this.PY:
                return [this.minusX, this.unitZ, this.unitX, this.minusZ];
            case this.PZ:
                return [this.unitY, this.minusX, this.minusY, this.unitX];
            case this.NX:
                return [this.unitY, this.minusZ, this.minusY, this.unitZ];
            case this.NY:
                return [this.minusX, this.minusZ, this.unitX, this.unitZ];
            case this.NZ:
                return [this.unitY, this.unitX, this.minusY, this.minusX];
        }
    };

    Vect.normalIndex = function(v) {
        var cn, i, j;
        cn = this.closestNormal(v);
        for (i = j = 0; j < 6; i = ++j) {
            if (Vect.normals[i].equals(cn)) {
                return i;
            }
        }
        return -1;
    };

    Vect.closestNormal = function(v) {
        var angles, j, len, n, ref1;
        Vect.tmp.copy(v);
        Vect.tmp.normalize();
        angles = [];
        ref1 = Vect.normals;
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            if (n.equals(Vect.tmp)) {
                return n;
            }
            angles.push([n.angle(Vect.tmp), n]);
        }
        angles.sort(function(a, b) {
            return a[0] - b[0];
        });
        return angles[0][1];
    };

    return Vect;

})(Vector3);

module.exports = Vect;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/vect.coffee