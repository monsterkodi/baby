// koffee 1.6.0

/*
 0000000   0000000   00     00  00000000  00000000    0000000 
000       000   000  000   000  000       000   000  000   000
000       000000000  000000000  0000000   0000000    000000000
000       000   000  000 0 000  000       000   000  000   000
 0000000  000   000  000   000  00000000  000   000  000   000
 */
var ArcRotateCamera, Camera, FlyCamera, FramingBehavior, Quat, UniversalCamera, Vect, clamp, klog, quat, reduce, ref, ref1, vec,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), reduce = ref.reduce, clamp = ref.clamp, klog = ref.klog;

ref1 = require('babylonjs'), UniversalCamera = ref1.UniversalCamera, ArcRotateCamera = ref1.ArcRotateCamera, FlyCamera = ref1.FlyCamera, FramingBehavior = ref1.FramingBehavior;

Vect = require('./vect');

Quat = require('./quat');

vec = function(x, y, z) {
    return new Vect(x, y, z);
};

quat = function(x, y, z, w) {
    return new Quat(x, y, z, w);
};

Camera = (function(superClass) {
    extend(Camera, superClass);

    function Camera(scene, view, canvas) {
        var height, width;
        this.scene = scene;
        this.setDistFactor = bind(this.setDistFactor, this);
        this.inertZoom = bind(this.inertZoom, this);
        this.onMouseWheel = bind(this.onMouseWheel, this);
        this.moveCenter = bind(this.moveCenter, this);
        this.fadeCenter = bind(this.fadeCenter, this);
        this.pivotCenter = bind(this.pivotCenter, this);
        this.onMouseDrag = bind(this.onMouseDrag, this);
        this.onDblClick = bind(this.onDblClick, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.del = bind(this.del, this);
        width = view.clientWidth;
        height = view.clientHeight;
        this.size = vec(width, height);
        this.elem = view;
        this.dist = 10;
        this.maxDist = this.far / 4;
        this.minDist = 0.9;
        this.center = vec(0, 0, 0);
        this.degree = 60;
        this.rotate = 0;
        this.wheelInert = 0;
        this.pivotX = 0;
        this.pivotY = 0;
        this.moveX = 0;
        this.moveY = 0;
        this.quat = quat();
        this.elem.addEventListener('mousewheel', this.onMouseWheel);
        this.elem.addEventListener('mousedown', this.onMouseDown);
        this.elem.addEventListener('dblclick', this.onDblClick);
        Camera.__super__.constructor.call(this, 'Camera', vec(0, 0, -10), this.scene);
        this.attachControl(canvas, false);
        this.inertia = 0.8;
        this.keysLeft = this.keysLeft.concat([64]);
        klog('keysLeft', this.keysLeft);
    }

    Camera.prototype.getPosition = function() {
        return vec(this.getFrontPosition(0));
    };

    Camera.prototype.getDir = function() {
        return quat(this.rotationQuaternion).rotate(Vect.minusZ);
    };

    Camera.prototype.getUp = function() {
        return quat(this.rotationQuaternion).rotate(Vect.unitY);
    };

    Camera.prototype.getRight = function() {
        return quat(this.rotationQuaternion).rotate(Vect.unitX);
    };

    Camera.prototype.del = function() {
        this.elem.removeEventListener('mousewheel', this.onMouseWheel);
        this.elem.removeEventListener('mousedown', this.onMouseDown);
        this.elem.removeEventListener('dblclick', this.onDblClick);
        window.removeEventListener('mouseup', this.onMouseUp);
        return window.removeEventListener('mousemove', this.onMouseDrag);
    };

    Camera.prototype.onMouseDown = function(event) {
        this.downButtons = event.buttons;
        this.mouseMoved = false;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        this.downPos = vec(this.mouseX, this.mouseY);
        window.addEventListener('mousemove', this.onMouseDrag);
        return window.addEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onMouseUp = function(event) {
        window.removeEventListener('mousemove', this.onMouseDrag);
        return window.removeEventListener('mouseup', this.onMouseUp);
    };

    Camera.prototype.onDblClick = function(event) {};

    Camera.prototype.onMouseDrag = function(event) {
        var s, x, y;
        x = event.clientX - this.mouseX;
        y = event.clientY - this.mouseY;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        if (this.downPos.dist(vec(this.mouseX, this.mouseY)) > 60) {
            this.mouseMoved = true;
        }
        if (event.buttons & 4) {
            s = this.dist;
            this.pan(x * 2 * s / this.size.x, y * s / this.size.y);
        }
        if (event.buttons & 2) {
            return this.pivot(4000 * x / this.size.x, 2000 * y / this.size.y);
        }
    };

    Camera.prototype.pivot = function(x, y) {
        this.rotate += -0.1 * x;
        this.degree += -0.1 * y;
        return this.update();
    };

    Camera.prototype.startPivotLeft = function() {
        this.pivotX = 20;
        return this.startPivot();
    };

    Camera.prototype.startPivotRight = function() {
        this.pivotX = -20;
        return this.startPivot();
    };

    Camera.prototype.startPivotUp = function() {
        this.pivotY = -10;
        return this.startPivot();
    };

    Camera.prototype.startPivotDown = function() {
        this.pivotY = 10;
        return this.startPivot();
    };

    Camera.prototype.stopPivot = function() {
        this.pivoting = false;
        this.pivotX = 0;
        return this.pivotY = 0;
    };

    Camera.prototype.startPivot = function() {
        if (!this.pivoting) {
            return this.pivoting = true;
        }
    };

    Camera.prototype.pivotCenter = function(deltaSeconds) {
        if (!this.pivoting) {
            return;
        }
        return this.pivot(this.pivotX, this.pivotY);
    };

    Camera.prototype.pan = function(x, y) {
        var ref2, right, up;
        right = vec(-x, 0, 0);
        right.applyQuaternion(this.rotationQuaternion);
        up = vec(0, y, 0);
        up.applyQuaternion(this.rotationQuaternion);
        this.center.add(right.add(up));
        if ((ref2 = this.centerTarget) != null) {
            ref2.copy(this.center);
        }
        return this.update();
    };

    Camera.prototype.focusOnPos = function(v) {
        this.centerTarget = vec(v);
        this.center = vec(v);
        return this.update();
    };

    Camera.prototype.fadeToPos = function(v) {
        this.centerTarget = vec(v);
        return this.startFadeCenter();
    };

    Camera.prototype.startFadeCenter = function() {
        if (!this.fading) {
            return this.fading = true;
        }
    };

    Camera.prototype.fadeCenter = function(deltaSeconds) {
        if (!this.fading) {
            return;
        }
        this.center.fade(this.centerTarget, deltaSeconds);
        this.update();
        if (this.center.dist(this.centerTarget) > 0.00001) {
            return true;
        } else {
            return delete this.fading;
        }
    };

    Camera.prototype.moveFactor = function() {
        return this.dist / 2;
    };

    Camera.prototype.startMoveLeft = function() {
        this.moveX = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveRight = function() {
        this.moveX = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveUp = function() {
        this.moveY = this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.startMoveDown = function() {
        this.moveY = -this.moveFactor();
        return this.startMove();
    };

    Camera.prototype.stopMoving = function() {
        this.moving = false;
        this.moveX = 0;
        return this.moveY = 0;
    };

    Camera.prototype.startMove = function() {
        this.fading = false;
        if (!this.moving) {
            rts.animate(this.moveCenter);
            return this.moving = true;
        }
    };

    Camera.prototype.moveCenter = function(deltaSeconds) {
        var dir;
        if (!this.moving) {
            return;
        }
        dir = vec();
        dir.add(Vect.unitX.mul(this.moveX));
        dir.add(Vect.unitY.mul(this.moveY));
        dir.scale(deltaSeconds);
        dir.applyQuaternion(this.rotationQuaternion);
        this.center.add(dir);
        this.update();
        return rts.animate(this.moveCenter);
    };

    Camera.prototype.onMouseWheel = function(event) {
        klog('wheel', event.wheelDelta);
        if (this.wheelInert > 0 && event.wheelDelta < 0) {
            this.wheelInert = 0;
            return;
        }
        if (this.wheelInert < 0 && event.wheelDelta > 0) {
            this.wheelInert = 0;
            return;
        }
        this.wheelInert += event.wheelDelta * (1 + (this.dist / this.maxDist) * 3) * 0.0001;
        return this.startZoom();
    };

    Camera.prototype.startZoomIn = function() {
        this.wheelInert = (1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoomOut = function() {
        this.wheelInert = -(1 + (this.dist / this.maxDist) * 3) * 10;
        return this.startZoom();
    };

    Camera.prototype.startZoom = function() {
        if (!this.zooming) {
            return this.zooming = true;
        }
    };

    Camera.prototype.stopZoom = function() {
        this.wheelInert = 0;
        return this.zooming = false;
    };

    Camera.prototype.inertZoom = function(deltaSeconds) {
        this.setDistFactor(1 - clamp(-0.02, 0.02, this.wheelInert));
        this.wheelInert = reduce(this.wheelInert, deltaSeconds * 0.3);
        if (Math.abs(this.wheelInert) > 0.00000001) {
            return true;
        } else {
            delete this.zooming;
            return this.wheelInert = 0;
        }
    };

    Camera.prototype.setDistFactor = function(factor) {
        this.dist = clamp(this.minDist, this.maxDist, this.dist * factor);
        return this.update();
    };

    Camera.prototype.setFov = function(fov) {
        return this.fov = Math.max(2.0, Math.min(fov, 175.0));
    };

    return Camera;

})(UniversalCamera);

module.exports = Camera;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/camera.coffee