// koffee 1.6.0
var LN10, PI, _mult, abs, acos, add, asin, atan, calcCentroid, clone, copyVecArray, cos, cross, dot, edgeDist, eye3, faceSignature, floor, getVec2VecRotM, intersect, invperspT, linePointDist2, log, log10, mag, mag2, midpoint, mm3, mult, mv3, normal, oneThird, orthogonal, perspT, planararea, pow, project2dface, random, randomchoice, reciprocal, rotm, round, sigfigs, sin, sqrt, sub, tan, tangentPoint, tween, unit, vec_rotm;

random = Math.random, round = Math.round, floor = Math.floor, sqrt = Math.sqrt, sin = Math.sin, cos = Math.cos, tan = Math.tan, asin = Math.asin, acos = Math.acos, atan = Math.atan, abs = Math.abs, pow = Math.pow, log = Math.log, PI = Math.PI, LN10 = Math.LN10;

log10 = function(x) {
    return console.log(x) / LN10;
};

sigfigs = function(N, nsigs) {
    var mantissa, truncated_mantissa;
    mantissa = N / pow(10, floor(log10(N)));
    truncated_mantissa = round(mantissa * pow(10, nsigs - 1));
    return "" + truncated_mantissa;
};

clone = function(obj) {
    var key, newInstance;
    if (!obj || typeof obj !== 'object') {
        return obj;
    }
    newInstance = new obj.constructor();
    for (key in obj) {
        newInstance[key] = clone(obj[key]);
    }
    return newInstance;
};

randomchoice = function(array) {
    return array[floor(random() * array.length)];
};

mult = function(c, vec) {
    return [c * vec[0], c * vec[1], c * vec[2]];
};

_mult = function(vec1, vec2) {
    return [vec1[0] * vec2[0], vec1[1] * vec2[1], vec1[2] * vec2[2]];
};

add = function(vec1, vec2) {
    return [vec1[0] + vec2[0], vec1[1] + vec2[1], vec1[2] + vec2[2]];
};

sub = function(vec1, vec2) {
    return [vec1[0] - vec2[0], vec1[1] - vec2[1], vec1[2] - vec2[2]];
};

dot = function(vec1, vec2) {
    return (vec1[0] * vec2[0]) + (vec1[1] * vec2[1]) + (vec1[2] * vec2[2]);
};

cross = function(d1, d2) {
    return [(d1[1] * d2[2]) - (d1[2] * d2[1]), (d1[2] * d2[0]) - (d1[0] * d2[2]), (d1[0] * d2[1]) - (d1[1] * d2[0])];
};

mag = function(vec) {
    return sqrt(dot(vec, vec));
};

mag2 = function(vec) {
    return dot(vec, vec);
};

unit = function(vec) {
    return mult(1 / sqrt(mag2(vec)), vec);
};

midpoint = (function(_this) {
    return function(vec1, vec2) {
        return mult(1 / 2.0, add(vec1, vec2));
    };
})(this);

tween = (function(_this) {
    return function(vec1, vec2, t) {
        return [((1 - t) * vec1[0]) + (t * vec2[0]), ((1 - t) * vec1[1]) + (t * vec2[1]), ((1 - t) * vec1[2]) + (t * vec2[2])];
    };
})(this);

oneThird = (function(_this) {
    return function(vec1, vec2) {
        return tween(vec1, vec2, 1 / 3.0);
    };
})(this);

reciprocal = function(vec) {
    return mult(1.0 / mag2(vec), vec);
};

tangentPoint = function(v1, v2) {
    var d;
    d = sub(v2, v1);
    return sub(v1, mult(dot(d, v1) / mag2(d), d));
};

edgeDist = function(v1, v2) {
    return sqrt(mag2(tangentPoint(v1, v2)));
};

linePointDist2 = function(v1, v2, v3) {
    var d13, d21, d23, m2, result, t;
    d21 = sub(v2, v1);
    d13 = sub(v1, v3);
    d23 = sub(v2, v3);
    m2 = mag2(d21);
    t = -dot(d13, d21) / m2;
    if (t <= 0) {
        result = mag2(d13);
    } else if (t >= 1) {
        result = mag2(d23);
    } else {
        result = mag2(cross(d21, d13)) / m2;
    }
    return result;
};

orthogonal = function(v1, v2, v3) {
    var d1, d2;
    d1 = sub(v2, v1);
    d2 = sub(v3, v2);
    return cross(d1, d2);
};

intersect = function(set1, set2, set3) {
    var j, k, l, len, len1, len2, s1, s2, s3;
    for (j = 0, len = set1.length; j < len; j++) {
        s1 = set1[j];
        for (k = 0, len1 = set2.length; k < len1; k++) {
            s2 = set2[k];
            if (s1 === s2) {
                for (l = 0, len2 = set3.length; l < len2; l++) {
                    s3 = set3[l];
                    if (s1 === s3) {
                        return s1;
                    }
                }
            }
        }
    }
    return null;
};

calcCentroid = function(vertices) {
    var centroidV, j, len, v;
    centroidV = [0, 0, 0];
    for (j = 0, len = vertices.length; j < len; j++) {
        v = vertices[j];
        centroidV = add(centroidV, v);
    }
    return mult(1 / vertices.length, centroidV);
};

normal = function(vertices) {
    var j, len, normalV, ref, ref1, v1, v2, v3;
    normalV = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        normalV = add(normalV, orthogonal(v1, v2, v3));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return unit(normalV);
};

planararea = function(vertices) {
    var area, j, len, ref, ref1, v1, v2, v3, vsum;
    area = 0.0;
    vsum = [0, 0, 0];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        vsum = add(vsum, cross(v1, v2));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    return area = abs(dot(normal(vertices), vsum) / 2.0);
};

faceSignature = function(vertices, sensitivity) {
    var cross_array, j, k, l, len, len1, len2, ref, ref1, ref2, sig, v1, v2, v3, x;
    cross_array = [];
    ref = vertices.slice(-2), v1 = ref[0], v2 = ref[1];
    for (j = 0, len = vertices.length; j < len; j++) {
        v3 = vertices[j];
        cross_array.push(mag(cross(sub(v1, v2), sub(v3, v2))));
        ref1 = [v2, v3], v1 = ref1[0], v2 = ref1[1];
    }
    cross_array.sort(function(a, b) {
        return a - b;
    });
    sig = "";
    for (k = 0, len1 = cross_array.length; k < len1; k++) {
        x = cross_array[k];
        sig += sigfigs(x, sensitivity);
    }
    ref2 = cross_array.reverse();
    for (l = 0, len2 = ref2.length; l < len2; l++) {
        x = ref2[l];
        sig += sigfigs(x, sensitivity);
    }
    return sig;
};

project2dface = function(verts) {
    var c, n, p, tmpverts, v0;
    tmpverts = clone(verts);
    v0 = verts[0];
    tmpverts = _.map(function(tmpverts, x) {
        return x - v0;
    });
    n = normal(verts);
    c = unit(calcCentroid(verts));
    p = cross(n, c);
    return tmpverts.map((function(_this) {
        return function(v) {
            return [dot(n, v), dot(p, v)];
        };
    })(this));
};

copyVecArray = function(vecArray) {
    var end, i, j, newVecArray, ref;
    newVecArray = new Array(vecArray.length);
    end = vecArray.length;
    for (i = j = 0, ref = end; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        newVecArray[i] = vecArray[i].slice(0);
    }
    return newVecArray;
};

mv3 = function(mat, vec) {
    return [(mat[0][0] * vec[0]) + (mat[0][1] * vec[1]) + (mat[0][2] * vec[2]), (mat[1][0] * vec[0]) + (mat[1][1] * vec[1]) + (mat[1][2] * vec[2]), (mat[2][0] * vec[0]) + (mat[2][1] * vec[1]) + (mat[2][2] * vec[2])];
};

mm3 = function(A, B) {
    return [[(A[0][0] * B[0][0]) + (A[0][1] * B[1][0]) + (A[0][2] * B[2][0]), (A[0][0] * B[0][1]) + (A[0][1] * B[1][1]) + (A[0][2] * B[2][1]), (A[0][0] * B[0][2]) + (A[0][1] * B[1][2]) + (A[0][2] * B[2][2])], [(A[1][0] * B[0][0]) + (A[1][1] * B[1][0]) + (A[1][2] * B[2][0]), (A[1][0] * B[0][1]) + (A[1][1] * B[1][1]) + (A[1][2] * B[2][1]), (A[1][0] * B[0][2]) + (A[1][1] * B[1][2]) + (A[1][2] * B[2][2])], [(A[2][0] * B[0][0]) + (A[2][1] * B[1][0]) + (A[2][2] * B[2][0]), (A[2][0] * B[0][1]) + (A[2][1] * B[1][1]) + (A[2][2] * B[2][1]), (A[2][0] * B[0][2]) + (A[2][1] * B[1][2]) + (A[2][2] * B[2][2])]];
};

eye3 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];

rotm = function(phi, theta, psi) {
    var xy_mat, xz_mat, yz_mat;
    xy_mat = [[cos(phi), -1.0 * sin(phi), 0.0], [sin(phi), cos(phi), 0.0], [0.0, 0.0, 1.0]];
    yz_mat = [[cos(theta), 0, -1.0 * sin(theta)], [0, 1, 0], [sin(theta), 0, cos(theta)]];
    xz_mat = [[1.0, 0, 0], [0, cos(psi), -1.0 * sin(psi)], [0, sin(psi), cos(psi)]];
    return mm3(xz_mat, mm3(yz_mat, xy_mat));
};

vec_rotm = function(angle, x, y, z) {
    var cosA, length, m, ref, ref1, sinA, sinA2, x2, y2, z2;
    angle /= 2;
    sinA = sin(angle);
    cosA = cos(angle);
    sinA2 = sinA * sinA;
    length = mag([x, y, z]);
    if (length === 0) {
        ref = [0, 0, 1], x = ref[0], y = ref[1], z = ref[2];
    }
    if (length !== 1) {
        ref1 = unit([x, y, z]), x = ref1[0], y = ref1[1], z = ref1[2];
    }
    if ((x === 1) && (y === 0) && (z === 0)) {
        m = [[1, 0, 0], [0, 1 - (2 * sinA2), 2 * sinA * cosA], [0, -2 * sinA * cosA, 1 - (2 * sinA2)]];
    } else if ((x === 0) && (y === 1) && (z === 0)) {
        m = [[1 - (2 * sinA2), 0, -2 * sinA * cosA], [0, 1, 0], [2 * sinA * cosA, 0, 1 - (2 * sinA2)]];
    } else if ((x === 0) && (y === 0) && (z === 1)) {
        m = [[1 - (2 * sinA2), 2 * sinA * cosA, 0], [-2 * sinA * cosA, 1 - (2 * sinA2), 0], [0, 0, 1]];
    } else {
        x2 = x * x;
        y2 = y * y;
        z2 = z * z;
        m = [[1 - (2 * (y2 + z2) * sinA2), 2 * ((x * y * sinA2) + (z * sinA * cosA)), 2 * ((x * z * sinA2) - (y * sinA * cosA))], [2 * ((y * x * sinA2) - (z * sinA * cosA)), 1 - (2 * (z2 + x2) * sinA2), 2 * ((y * z * sinA2) + (x * sinA * cosA))], [2 * ((z * x * sinA2) + (y * sinA * cosA)), 2 * ((z * y * sinA2) - (x * sinA * cosA)), 1 - (2 * (x2 + y2) * sinA2)]];
    }
    return m;
};

perspT = function(vec3, max_real_depth, min_real_depth, desired_ratio, desired_length) {
    var scalefactor, z0;
    z0 = ((max_real_depth * desired_ratio) - min_real_depth) / (1 - desired_ratio);
    scalefactor = (desired_length * desired_ratio) / (1 - desired_ratio);
    return [(scalefactor * vec3[0]) / (vec3[2] + z0), (scalefactor * vec3[1]) / (vec3[2] + z0)];
};

invperspT = function(x, y, dx, dy, max_real_depth, min_real_depth, desired_ratio, desired_length) {
    var s, s2, xp, xp2, xsphere, yp, yp2, ysphere, z0, z02, zsphere;
    z0 = ((max_real_depth * desired_ratio) - min_real_depth) / (1 - desired_ratio);
    s = (desired_length * desired_ratio) / (1 - desired_ratio);
    xp = x - dx;
    yp = y - dy;
    s2 = s * s;
    z02 = z0 * z0;
    xp2 = xp * xp;
    yp2 = yp * yp;
    xsphere = ((2 * s * xp * z0) + sqrt((4 * s2 * xp2 * z02) + (4 * xp2 * (s2 + xp2 + yp2) * (1 - z02)))) / (2.0 * (s2 + xp2 + yp2));
    ysphere = ((s * yp * z0) / (s2 + xp2 + yp2)) + ((yp * sqrt((4 * s2 * z02) + (4 * (s2 + xp2 + yp2) * (1 - z02)))) / (2.0 * (s2 + xp2 + yp2)));
    zsphere = sqrt(1 - (xsphere * xsphere) - (ysphere * ysphere));
    return [xsphere, ysphere, zsphere];
};

getVec2VecRotM = function(vec1, vec2) {
    var angle, axis;
    axis = cross(vec1, vec2);
    angle = acos(dot(vec1, vec2));
    return vec_rotm(-1 * angle, axis[0], axis[1], axis[2]);
};

module.exports = {
    add: add,
    sub: sub,
    mult: mult
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/polyhedronisme/geo.coffee