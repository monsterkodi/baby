// koffee 1.6.0
var PALETTE, _, __range__, add, faceToEdges, hextofloats, mult, paintPolyhedron, palette, polyhedron, ref, rwb_palette, sortfaces, vertColors,
    indexOf = [].indexOf;

_ = require('lodash');

__range__ = function(left, right, inclusive) {
    var j, k, results, results1;
    if (inclusive) {
        return (function() {
            results = [];
            for (var j = left; left <= right ? j <= right : j >= right; left <= right ? j++ : j--){ results.push(j); }
            return results;
        }).apply(this);
    } else {
        return (function() {
            results1 = [];
            for (var k = left; left <= right ? k < right : k > right; left <= right ? k++ : k--){ results1.push(k); }
            return results1;
        }).apply(this);
    }
};

ref = require('./geo'), add = ref.add, mult = ref.mult;

faceToEdges = function(face) {
    var edges, j, len, v1, v2;
    edges = [];
    v1 = face.slice(-1)[0];
    for (j = 0, len = face.length; j < len; j++) {
        v2 = face[j];
        edges.push([v1, v2]);
        v1 = v2;
    }
    return edges;
};

vertColors = function(poly) {
    var j, k, len, ref1, ref2, ref3, v, vertcolors;
    vertcolors = [];
    for (j = ref1 = i, ref2 = poly.faces.length; ref1 <= ref2 ? j < ref2 : j > ref2; ref1 <= ref2 ? j++ : j--) {
        ref3 = poly.faces[i];
        for (k = 0, len = ref3.length; k < len; k++) {
            v = ref3[k];
            vertcolors[v] = poly.face_classes[i];
        }
    }
    return vertcolors;
};

rwb_palette = ['#ff7777', '#dddddd', '#889999', '#fff0e5', '#aa3333', '#ff0000', '#ffffff', '#aaaaaa'];

PALETTE = rwb_palette;

palette = function(n) {
    return hextofloats(PALETTE[n % PALETTE.length]);
};

hextofloats = function(hexstr) {
    if (hexstr[0] === "#") {
        hexstr = hexstr.slice(1);
    }
    if (hexstr.length === 3) {
        return hexstr.split('').map((function(_this) {
            return function(c) {
                return parseInt(c + c, 16) / 255;
            };
        })(this));
    } else {
        return hexstr.match(/.{2}/g).map((function(_this) {
            return function(c) {
                return parseInt(c, 16) / 255;
            };
        })(this));
    }
};

paintPolyhedron = function(poly) {
    var clr, colorassign, colormemory, f, face_verts, j, len, ref1;
    poly.face_classes = [];
    colormemory = {};
    colorassign = function(hash, colormemory) {
        var fclr;
        if (indexOf.call(colormemory, hash) >= 0) {
            return colormemory[hash];
        }
        fclr = _.toArray(colormemory).length;
        colormemory[hash] = fclr;
        return fclr;
    };
    ref1 = poly.faces;
    for (j = 0, len = ref1.length; j < len; j++) {
        f = ref1[j];
        if (COLOR_METHOD === "area") {
            face_verts = f.map(function(v) {
                return poly.vertices[v];
            });
            clr = colorassign(sigfigs(planararea(face_verts), COLOR_SENSITIVITY), colormemory);
        } else if (COLOR_METHOD === "signature") {
            face_verts = f.map(function(v) {
                return poly.vertices[v];
            });
            clr = colorassign(faceSignature(face_verts, COLOR_SENSITIVITY), colormemory);
        } else {
            clr = f.length - 3;
        }
        poly.face_classes.push(clr);
    }
    console.log(_.toArray(colormemory).length + " face classes");
    return poly;
};

sortfaces = function(poly) {
    var centroids, j, normals, planesort, ray_origin, ref1, results, zcentroidsort, zsortIndex;
    centroids = poly.centers();
    normals = poly.normals();
    ray_origin = [0, 0, ((persp_z_max * persp_ratio) - persp_z_min) / (1 - persp_ratio)];
    planesort = function(a, b) {
        return -dot(sub(ray_origin, a[0]), a[1]) * dot(sub(b[0], a[0]), a[1]);
    };
    zcentroidsort = (function(_this) {
        return function(a, b) {
            return a[0][2] - b[0][2];
        };
    })(this);
    zsortIndex = _.zip(centroids, normals, (function() {
        results = [];
        for (var j = 0, ref1 = poly.faces.length; 0 <= ref1 ? j < ref1 : j > ref1; 0 <= ref1 ? j++ : j--){ results.push(j); }
        return results;
    }).apply(this)).sort(zcentroidsort).map(function(x) {
        return x[2];
    });
    poly.faces = zsortIndex.map(function(idx) {
        return poly.faces[idx];
    });
    return poly.face_classes = zsortIndex.map(function(idx) {
        return poly.face_classes[idx];
    });
};

polyhedron = (function() {
    function polyhedron(name, faces, vertices) {
        this.name = name;
        this.faces = faces;
        this.vertices = vertices;
        if (this.faces != null) {
            this.faces;
        } else {
            this.faces = [];
        }
        if (this.vertices != null) {
            this.vertices;
        } else {
            this.vertices = [];
        }
        if (this.name != null) {
            this.name;
        } else {
            this.name = "null polyhedron";
        }
    }

    polyhedron.prototype.edges = function() {
        var a, b, e, edgeSet, faceEdges, j, k, len, len1, uniqEdges;
        uniqEdges = {};
        faceEdges = this.faces.map(faceToEdges);
        for (j = 0, len = faceEdges.length; j < len; j++) {
            edgeSet = faceEdges[j];
            for (k = 0, len1 = edgeSet.length; k < len1; k++) {
                e = edgeSet[k];
                if (e[0] < e[1]) {
                    a = e[0], b = e[1];
                } else {
                    b = e[0], a = e[1];
                }
                uniqEdges[a + "~" + b] = e;
            }
        }
        return _.values(uniqEdges);
    };

    polyhedron.prototype.centers = function() {
        var centersArray, face, fcenter, j, k, len, len1, ref1, vidx;
        centersArray = [];
        ref1 = this.faces;
        for (j = 0, len = ref1.length; j < len; j++) {
            face = ref1[j];
            fcenter = [0, 0, 0];
            for (k = 0, len1 = face.length; k < len1; k++) {
                vidx = face[k];
                fcenter = add(fcenter, this.vertices[vidx]);
            }
            centersArray.push(mult(1.0 / face.length, fcenter));
        }
        return centersArray;
    };

    polyhedron.prototype.normals = function() {
        var face, j, len, normalsArray, ref1;
        normalsArray = [];
        ref1 = this.faces;
        for (j = 0, len = ref1.length; j < len; j++) {
            face = ref1[j];
            normalsArray.push(normal(face.map((function(_this) {
                return function(vidx) {
                    return _this.vertices[vidx];
                };
            })(this))));
        }
        return normalsArray;
    };

    polyhedron.prototype.data = function() {
        var nEdges;
        nEdges = (this.faces.length + this.vertices.length) - 2;
        return this.faces.length + " faces, " + nEdges + " edges, " + this.vertices.length + " vertices";
    };

    return polyhedron;

})();

module.exports.polyhedron = polyhedron;

module.exports.tetrahedron = function() {
    return new polyhedron('T', [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]], [[1.0, 1.0, 1.0], [1.0, -1.0, -1.0], [-1.0, 1.0, -1.0], [-1.0, -1.0, 1.0]]);
};

module.exports.octahedron = function() {
    return new polyhedron('O', [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [1, 4, 5], [1, 5, 2], [2, 5, 3], [3, 5, 4]], [[0, 0, 1.414], [1.414, 0, 0], [0, 1.414, 0], [-1.414, 0, 0], [0, -1.414, 0], [0, 0, -1.414]]);
};

module.exports.cube = function() {
    return new polyhedron('C', [[3, 0, 1, 2], [3, 4, 5, 0], [0, 5, 6, 1], [1, 6, 7, 2], [2, 7, 4, 3], [5, 4, 7, 6]], [[0.707, 0.707, 0.707], [-0.707, 0.707, 0.707], [-0.707, -0.707, 0.707], [0.707, -0.707, 0.707], [0.707, -0.707, -0.707], [0.707, 0.707, -0.707], [-0.707, 0.707, -0.707], [-0.707, -0.707, -0.707]]);
};

module.exports.icosahedron = function() {
    return new polyhedron('I', [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 5], [0, 5, 1], [1, 5, 7], [1, 7, 6], [1, 6, 2], [2, 6, 8], [2, 8, 3], [3, 8, 9], [3, 9, 4], [4, 9, 10], [4, 10, 5], [5, 10, 7], [6, 7, 11], [6, 11, 8], [7, 10, 11], [8, 11, 9], [9, 11, 10]], [[0, 0, 1.176], [1.051, 0, 0.526], [0.324, 1.0, 0.525], [-0.851, 0.618, 0.526], [-0.851, -0.618, 0.526], [0.325, -1.0, 0.526], [0.851, 0.618, -0.526], [0.851, -0.618, -0.526], [-0.325, 1.0, -0.526], [-1.051, 0, -0.526], [-0.325, -1.0, -0.526], [0, 0, -1.176]]);
};

module.exports.dodecahedron = function() {
    return new polyhedron('D', [[0, 1, 4, 7, 2], [0, 2, 6, 9, 3], [0, 3, 8, 5, 1], [1, 5, 11, 10, 4], [2, 7, 13, 12, 6], [3, 9, 15, 14, 8], [4, 10, 16, 13, 7], [5, 8, 14, 17, 11], [6, 12, 18, 15, 9], [10, 11, 17, 19, 16], [12, 13, 16, 19, 18], [14, 15, 18, 19, 17]], [[0, 0, 1.07047], [0.713644, 0, 0.797878], [-0.356822, 0.618, 0.797878], [-0.356822, -0.618, 0.797878], [0.797878, 0.618034, 0.356822], [0.797878, -0.618, 0.356822], [-0.934172, 0.381966, 0.356822], [0.136294, 1.0, 0.356822], [0.136294, -1.0, 0.356822], [-0.934172, -0.381966, 0.356822], [0.934172, 0.381966, -0.356822], [0.934172, -0.381966, -0.356822], [-0.797878, 0.618, -0.356822], [-0.136294, 1.0, -0.356822], [-0.136294, -1.0, -0.356822], [-0.797878, -0.618034, -0.356822], [0.356822, 0.618, -0.797878], [0.356822, -0.618, -0.797878], [-0.713644, 0, -0.797878], [0, 0, -1.07047]]);
};

module.exports.prism = function(n) {
    var h, i, j, k, l, poly, ref1, ref2, ref3, theta;
    theta = (2 * PI) / n;
    h = sin(theta / 2);
    poly = new polyhedron("P" + n);
    for (i = j = 0, ref1 = n; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), -h]);
    }
    for (i = k = 0, ref2 = n; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), h]);
    }
    poly.faces.push(__range__(n - 1, 0, true));
    poly.faces.push(__range__(n, 2 * n, false));
    for (i = l = 0, ref3 = n; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        poly.faces.push([i, (i + 1) % n, ((i + 1) % n) + n, i + n]);
    }
    return adjustXYZ(poly, 1);
};

module.exports.antiprism = function(n) {
    var f, h, i, j, k, l, poly, r, ref1, ref2, ref3, theta;
    theta = (2 * PI) / n;
    h = sqrt(1 - (4 / ((4 + (2 * cos(theta / 2))) - (2 * cos(theta)))));
    r = sqrt(1 - h * h);
    f = sqrt(h * h + pow(r * cos(theta / 2), 2));
    r = -r / f;
    h = -h / f;
    poly = new polyhedron("A" + n);
    for (i = j = 0, ref1 = n; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        poly.vertices.push([r * cos(i * theta), r * sin(i * theta), h]);
    }
    for (i = k = 0, ref2 = n; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        poly.vertices.push([r * cos((i + 0.5) * theta), r * sin((i + 0.5) * theta), -h]);
    }
    poly.faces.push(__range__(n - 1, 0, true));
    poly.faces.push(__range__(n, (2 * n) - 1, true));
    for (i = l = 0, ref3 = n; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        poly.faces.push([i, (i + 1) % n, i + n]);
        poly.faces.push([i, i + n, (((n + i) - 1) % n) + n]);
    }
    return adjustXYZ(poly, 1);
};

module.exports.pyramid = function(n) {
    var height, i, j, k, poly, ref1, ref2, theta;
    theta = (2 * PI) / n;
    height = 1;
    poly = new polyhedron("Y" + n);
    for (i = j = 0, ref1 = n; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        poly.vertices.push([-cos(i * theta), -sin(i * theta), -0.2]);
    }
    poly.vertices.push([0, 0, height]);
    poly.faces.push(__range__(n - 1, 0, true));
    for (i = k = 0, ref2 = n; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        poly.faces.push([i, (i + 1) % n, n]);
    }
    return canonicalXYZ(poly, 3);
};

module.exports.cupola = function(n, alpha, height) {
    var i, j, k, l, poly, rb, ref1, ref2, ref3, rt, s;
    if (n != null) {
        n;
    } else {
        n = 3;
    }
    if (alpha != null) {
        alpha;
    } else {
        alpha = 0.0;
    }
    poly = new polyhedron("U" + n);
    if (n < 2) {
        return poly;
    }
    s = 1.0;
    rb = s / 2 / sin(PI / 2 / n);
    rt = s / 2 / sin(PI / n);
    if (!height) {
        height = rb - rt;
        if ((2 <= n && n <= 5)) {
            height = s * sqrt(1 - 1 / 4 / sin(PI / n) / sin(PI / n));
        }
    }
    for (i = j = 0, ref1 = 3 * n; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        poly.vertices.push([0, 0, 0]);
    }
    for (i = k = 0, ref2 = n; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        poly.vertices[2 * i] = [rb * cos(PI * (2 * i) / n + PI / 2 / n + alpha), rb * sin(PI * (2 * i) / n + PI / 2 / n + alpha), 0.0];
        poly.vertices[2 * i + 1] = [rb * cos(PI * (2 * i + 1) / n + PI / 2 / n - alpha), rb * sin(PI * (2 * i + 1) / n + PI / 2 / n - alpha), 0.0];
        poly.vertices[2 * n + i] = [rt * cos(2 * PI * i / n), rt * sin(2 * PI * i / n), height];
    }
    poly.faces.push(__range__(2 * n - 1, 0, true));
    poly.faces.push(__range__(2 * n, 3 * n - 1, true));
    for (i = l = 0, ref3 = n; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        poly.faces.push([(2 * i + 1) % (2 * n), (2 * i + 2) % (2 * n), 2 * n + (i + 1) % n]);
        poly.faces.push([2 * i, (2 * i + 1) % (2 * n), 2 * n + (i + 1) % n, 2 * n + i]);
    }
    return poly;
};

module.exports.anticupola = function(n, alpha, height) {
    var i, j, k, l, poly, rb, ref1, ref2, ref3, rt, s;
    if (n != null) {
        n;
    } else {
        n = 3;
    }
    if (alpha != null) {
        alpha;
    } else {
        alpha = 0.0;
    }
    poly = new polyhedron("U" + n);
    if (n < 3) {
        return poly;
    }
    s = 1.0;
    rb = s / 2 / sin(PI / 2 / n);
    rt = s / 2 / sin(PI / n);
    if (!height) {
        height = rb - rt;
    }
    for (i = j = 0, ref1 = 3 * n; 0 <= ref1 ? j < ref1 : j > ref1; i = 0 <= ref1 ? ++j : --j) {
        poly.vertices.push([0, 0, 0]);
    }
    for (i = k = 0, ref2 = n; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
        poly.vertices[2 * i] = [rb * cos(PI * (2 * i) / n + alpha), rb * sin(PI * (2 * i) / n + alpha), 0.0];
        poly.vertices[2 * i + 1] = [rb * cos(PI * (2 * i + 1) / n - alpha), rb * sin(PI * (2 * i + 1) / n - alpha), 0.0];
        poly.vertices[2 * n + i] = [rt * cos(2 * PI * i / n), rt * sin(2 * PI * i / n), height];
    }
    poly.faces.push(__range__(2 * n - 1, 0, true));
    poly.faces.push(__range__(2 * n, 3 * n - 1, true));
    for (i = l = 0, ref3 = n; 0 <= ref3 ? l < ref3 : l > ref3; i = 0 <= ref3 ? ++l : --l) {
        poly.faces.push([(2 * i) % (2 * n), (2 * i + 1) % (2 * n), 2 * n + i % n]);
        poly.faces.push([2 * n + (i + 1) % n, (2 * i + 1) % (2 * n), (2 * i + 2) % (2 * n)]);
        poly.faces.push([2 * n + (i + 1) % n, 2 * n + i % n, (2 * i + 1) % (2 * n)]);
    }
    return poly;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/polyhedronisme/polyhedron.coffee