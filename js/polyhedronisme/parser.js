// koffee 1.6.0
var PEG, add, basemap, generatePoly, getOps, opmap, parser, polyhedron, specreplacements, topo;

add = require('./geo').add;

PEG = require('pegjs');

parser = PEG.generate("/* series of opspecs */\nstart  = opspec+\n\n/* opspec one of:\n A  - single letter\n A3 - single letter and float\n B(5,4.3,3) - function call format w. float args\n*/\nopspec \n    = lettr:opcode args:opargs {return {\"op\":lettr,\"args\":args};}\n    / lettr:opcode float:float {return {\"op\":lettr,\"args\":[float]};}\n    / lettr:opcode             {return {\"op\":lettr,\"args\":[]};}\n\n/*\nparentheses surrounding comma-delimited list of floats i.e.\n( 1 , 3.2, 4 ) or (1) or (2,3)\n*/\nopargs = \"(\"\n           num:( float:float \",\"? {return float} )+\n         \")\" {return num;}\n\n/* just a letter */\nopcode = op:[a-zA-Z] {return op;}\n\n/* standard numerical types */\nint   = digits:[0-9-]+   { return parseInt(digits.join(\"\"), 10);  }\nfloat = digits:[0-9.-]+  { return parseFloat(digits.join(\"\"), 10); }");

polyhedron = require('./polyhedron');

basemap = {
    T: polyhedron.tetrahedron,
    O: polyhedron.octahedron,
    C: polyhedron.cube,
    I: polyhedron.icosahedron,
    D: polyhedron.dodecahedron,
    P: polyhedron.prism,
    A: polyhedron.antiprism,
    Y: polyhedron.pyramid,
    J: polyhedron.johnson,
    U: polyhedron.cupola,
    V: polyhedron.anticupola
};

topo = require('./topo');

opmap = {
    d: topo.dual,
    a: topo.ambo,
    k: topo.kisN,
    g: topo.gyro,
    p: topo.propellor,
    r: topo.reflect,
    c: topo.chamfer,
    w: topo.whirl,
    n: topo.insetN,
    x: topo.extrudeN,
    l: topo.loft,
    P: topo.perspectiva1,
    q: topo.quinto,
    u: topo.trisub,
    H: topo.hollow,
    Z: topo.triangulate,
    C: topo.canonicalize,
    A: topo.adjustXY
};

specreplacements = [[/e/g, "aa"], [/b/g, "ta"], [/o/g, "jj"], [/m/g, "kj"], [/t(\d*)/g, "dk$1d"], [/j/g, "dad"], [/s/g, "dgd"], [/dd/g, ""], [/ad/g, "a"], [/gd/g, "g"], [/aO/g, "aC"], [/aI/g, "aD"], [/gO/g, "gC"], [/gI/g, "gD"]];

getOps = function(notation) {
    var equiv, expanded, i, len, orig, ref;
    expanded = notation;
    for (i = 0, len = specreplacements.length; i < len; i++) {
        ref = specreplacements[i], orig = ref[0], equiv = ref[1];
        expanded = expanded.replace(orig, equiv);
    }
    console.log(notation + " executed as " + expanded);
    return expanded;
};

generatePoly = function(notation) {
    var baseargs, basefunc, dispatch, i, len, op, opargs, opfunc, oplist, ops_spec, poly;
    dispatch = function(fn, args) {
        return fn.apply(fn, args || []);
    };
    ops_spec = getOps(notation);
    oplist = parser.parse(ops_spec).reverse();
    op = oplist.shift();
    basefunc = basemap[op["op"]];
    baseargs = op["args"];
    poly = dispatch(basefunc, baseargs);
    for (i = 0, len = oplist.length; i < len; i++) {
        op = oplist[i];
        opfunc = opmap[op["op"]];
        opargs = [poly].concat(op["args"]);
        poly = dispatch(opfunc, opargs);
    }
    poly.vertices = recenter(poly.vertices, poly.edges());
    poly.vertices = rescale(poly.vertices);
    return poly = paintPolyhedron(poly);
};

generatePoly('tT');

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/polyhedronisme/parser.coffee