// koffee 1.7.0

/*
000000000   0000000   000   000  
   000     000   000   000 000   
   000     000   000    00000    
   000     000   000     000     
   000      0000000      000
 */
var Toy,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Toy = (function() {
    Toy.instance = null;

    function Toy(mCanvas) {
        var devicePixelRatio;
        this.mCanvas = mCanvas;
        this.resize = bind(this.resize, this);
        this.renderLoop = bind(this.renderLoop, this);
        this.mCreated = false;
        this.mGLContext = null;
        this.mEffect = null;
        this.mTo = null;
        this.mIsPaused = false;
        this.mForceFrame = false;
        this.mPass = [];
        this.mActiveDoc = 0;
        devicePixelRatio = window.devicePixelRatio || 1;
        this.mCanvas.tabIndex = '0';
        this.mCanvas.width = this.mCanvas.offsetWidth * devicePixelRatio;
        this.mCanvas.height = this.mCanvas.offsetHeight * devicePixelRatio;
        this.mTo = performance.now();
        this.mTf = 0;
        this.mRestarted = true;
        this.mMouseOriX = 0;
        this.mMouseOriY = 0;
        this.mMousePosX = 0;
        this.mMousePosY = 0;
        this.mIsRendering = false;
        this.mGLContext = Renderer.createGlContext(this.mCanvas);
        if (!this.mGLContext) {
            console.log('no gl context');
        }
        this.mErrors = new Array();
        this.mEffect = new Effect(this.mGLContext, this.mCanvas.width, this.mCanvas.height);
        if (!this.mEffect.mCreated) {
            console.log('no effect');
            return;
        }
        this.mCanvas.addEventListener('webglcontextlost', function(event) {
            console.log('webglcontextlost');
            return event.preventDefault();
        });
        this.loadNew();
    }

    Toy.prototype.startRendering = function() {
        this.mIsRendering = true;
        return this.renderLoop();
    };

    Toy.prototype.renderLoop = function() {
        var dtime, ltime, time;
        if (!this.mGLContext) {
            return;
        }
        requestAnimationFrame(this.renderLoop);
        if (this.mIsPaused && !this.mForceFrame) {
            return;
        }
        this.mForceFrame = false;
        time = performance.now();
        ltime = 0.0;
        dtime = 0.0;
        if (this.mIsPaused) {
            ltime = this.mTf;
            dtime = 1000.0 / 60.0;
        } else {
            ltime = time - this.mTo;
            if (this.mRestarted) {
                dtime = 1000.0 / 60.0;
            } else {
                dtime = ltime - this.mTf;
            }
            this.mTf = ltime;
        }
        this.mRestarted = false;
        return this.mEffect.paint(ltime / 1000.0, dtime / 1000.0, 60, this.mMouseOriX, this.mMouseOriY, this.mMousePosX, this.mMousePosY, this.mIsPaused);
    };

    Toy.prototype.resize = function(xres, yres) {
        if (this.mCanvas) {
            this.mCanvas.width = this.mCanvas.offsetWidth;
            this.mCanvas.height = this.mCanvas.offsetHeight;
            this.mEffect.setSize(this.mCanvas.width, this.mCanvas.height);
            return this.mForceFrame = true;
        }
    };

    Toy.prototype.logErrors = function(result) {
        if (result) {
            return console.log(result);
        }
    };

    Toy.prototype.setTexture = function(slot, url) {
        var res;
        res = this.mEffect.newTexture(this.mActiveDoc, slot, url);
        if (!res.mFailed) {
            return this.mPass[this.mActiveDoc].mDirty = res.mNeedsShaderCompile;
        }
    };

    Toy.prototype.getTexture = function(slot) {
        return this.mEffect.getTexture(this.mActiveDoc, slot);
    };

    Toy.prototype.setShaderFromEditor = function(forceall) {
        var anyErrors, i, j, k, l, m, num, recompileAll, ref, ref1, result, shaderCode;
        anyErrors = false;
        num = this.mEffect.getNumPasses();
        recompileAll = false;
        for (i = k = 0, ref = num; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            if (this.mEffect.getPassType(i) === 'common' && (this.mPass[i].mDirty || forceall)) {
                recompileAll = true;
                break;
            }
        }
        for (j = l = 0; l < 4; j = ++l) {
            for (i = m = 0, ref1 = num; 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
                if (j === 0 && this.mEffect.getPassType(i) !== 'common') {
                    continue;
                }
                if (j === 1 && this.mEffect.getPassType(i) !== 'buffer') {
                    continue;
                }
                if (j === 2 && this.mEffect.getPassType(i) !== 'cubemap') {
                    continue;
                }
                if (j === 3 && this.mEffect.getPassType(i) !== 'image') {
                    continue;
                }
                if (recompileAll || this.mPass[i].mDirty || forceall) {
                    shaderCode = this.mPass[i].mCode;
                    result = this.mEffect.newShader(shaderCode, i);
                    if (result) {
                        anyErrors = true;
                    }
                    this.mPass[i].mError = result;
                    this.mPass[i].mDirty = false;
                }
            }
        }
        this.logErrors(this.mPass[this.mActiveDoc].mError);
        if (!anyErrors) {
            if (!this.mIsRendering) {
                gToy.startRendering();
            }
            return this.mForceFrame = true;
        }
    };

    Toy.prototype.loadNew = function() {
        var i, k, passes, ref, res;
        passes = [
            {
                inputs: [],
                outputs: [
                    {
                        channel: 0,
                        id: "4dfGRr"
                    }
                ],
                type: 'image',
                code: "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.15 + 0.15*cos(0.1*iTime+uv.xyx+vec3(0,2,4));\n    fragColor = vec4(col,1.0);\n}"
            }
        ];
        res = this.mEffect.newScriptJSON(passes);
        this.mPass = [];
        for (i = k = 0, ref = res.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            this.mPass[i] = {
                mCode: res[i].mShader,
                mFailed: res[i].mFailed,
                mError: res[i].mError,
                mDirty: false
            };
        }
        this.logErrors(this.mPass[0].mError);
        return this.startRendering();
    };

    Toy.resize = function() {
        return Toy.instance.resize();
    };

    Toy.init = function() {
        return Toy.instance = new Toy(document.getElementById('glCanvas'));
    };

    return Toy;

})();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../../coffee/toy/toy.coffee