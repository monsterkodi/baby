// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var Camera, Color3, DirectionalLight, Engine, HemisphericLight, MeshBuilder, Scene, Shader, Shapes, Space, StandardMaterial, Tree, Vect, Vector3, World, animate, elem, generate, prefs, ref, ref1, vec, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), elem = ref.elem, prefs = ref.prefs;

ref1 = require('babylonjs'), Camera = ref1.Camera, Color3 = ref1.Color3, DirectionalLight = ref1.DirectionalLight, Engine = ref1.Engine, HemisphericLight = ref1.HemisphericLight, MeshBuilder = ref1.MeshBuilder, Scene = ref1.Scene, Space = ref1.Space, StandardMaterial = ref1.StandardMaterial, Vector3 = ref1.Vector3;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

Space = require('./space');

Tree = require('./tree');

Shapes = require('./shapes');

Shader = require('./shader');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, ground, hemi, light;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas);
        this.scene = new Scene(this);
        this.shapes = new Shapes(this.scene);
        this.resized();
        a = 0.0;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this);
        hemi = new HemisphericLight('hemi', new Vector3(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        this.scene.initFog();
        if (0) {
            ground = MeshBuilder.CreateGround('ground', {
                width: 1000,
                height: 1000,
                subdivisions: 4
            }, this.scene);
            ground.material = new StandardMaterial('ground', this.scene);
            ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
            a = 0.05;
            ground.material.diffuseColor = new Color3(a, a, a);
            ground.receiveShadows = true;
            ground.position.y = -2;
        }
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 1.1
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.specularColor = new Color3(0, 0, 0);
        this.cursor.material.alpha = 0.5;
        this.cursor.position = [0, -1000, 0];
        this.cursor.backFaceCulling = true;
        this.cursor = this.cursor.flipFaces(true);
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointermove', this.onMouseMove);
        window.addEventListener('pointerup', this.onMouseUp);
        this.shader = new Shader(this);
    }

    World.prototype.onMouseDown = function(event) {
        this.mouseDownMesh = this.pickedMesh();
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        var mesh;
        this.camera.onMouseDrag(event);
        if (mesh = this.pickedMesh()) {
            return this.scene.legend.show(mesh.name);
        } else {
            return this.scene.legend.show(this.legendMesh);
        }
    };

    World.prototype.onMouseUp = function(event) {
        var mesh;
        if (mesh = this.pickedMesh()) {
            if (mesh === this.mouseDownMesh) {
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
                this.scene.legend.show(mesh.name);
                this.legendMesh = mesh.name;
            }
        } else if (!this.mouseDownMesh) {
            this.cursor.position = [0, -1000, 0];
            this.scene.legend.hide();
            this.legendMesh = null;
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.pickedMesh = function() {
        var ref2, ref3, result;
        return null;
        if (result = this.scene.pick(this.scene.pointerX, this.scene.pointerY, function(m) {
            var ref2;
            return (ref2 = m.name) !== 'ground' && ref2 !== 'cursor';
        })) {
            if ((ref2 = (ref3 = result.pickedMesh) != null ? ref3.name : void 0) === 'faces' || ref2 === 'normals') {
                return result.pickedMesh.parent;
            } else {
                return result.pickedMesh;
            }
        }
    };

    World.prototype.highlight = function(mesh) {
        var ref2, ref3, ref4, ref5;
        if ((ref2 = this.highlightMesh) != null) {
            if ((ref3 = ref2.material) != null) {
                ref3.diffuseColor = this.preHighlightColor;
            }
        }
        this.preHighlightColor = mesh != null ? (ref4 = mesh.material) != null ? ref4.diffuseColor : void 0 : void 0;
        if (mesh != null) {
            if ((ref5 = mesh.material) != null) {
                ref5.diffuseColor = this.preHighlightColor.multiply(new Color3(1.5, 1.5, 1.5));
            }
        }
        return this.highlightMesh = mesh;
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        var ref2, ref3, ref4;
        if (!this.paused) {
            if ((ref2 = this.space) != null) {
                ref2.render();
            }
            if ((ref3 = this.tree) != null) {
                ref3.render();
            }
            if ((ref4 = this.shader) != null) {
                ref4.render();
            }
            this.camera.render();
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        var dpr;
        dpr = window.devicePixelRatio;
        this.engine.setSize(this.view.clientWidth * dpr, this.view.clientHeight * dpr);
        this.canvas.style.transform = "scale(" + (1 / dpr) + ")";
        return this.canvas.style.transformOrigin = "top left";
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
            case 'r':
                return this.camera.reset();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ybGQuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLHNNQUFBO0lBQUE7O0FBUUEsTUFBa0IsT0FBQSxDQUFRLEtBQVIsQ0FBbEIsRUFBRSxlQUFGLEVBQVE7O0FBQ1IsT0FBdUgsT0FBQSxDQUFRLFdBQVIsQ0FBdkgsRUFBRSxvQkFBRixFQUFVLG9CQUFWLEVBQWtCLHdDQUFsQixFQUFvQyxvQkFBcEMsRUFBNEMsd0NBQTVDLEVBQThELDhCQUE5RCxFQUEyRSxrQkFBM0UsRUFBa0Ysa0JBQWxGLEVBQXlGLHdDQUF6RixFQUEyRzs7QUFDekcsTUFBUSxPQUFBLENBQVEsYUFBUjs7QUFDVixRQUFBLEdBQVcsT0FBQSxDQUFRLGlCQUFSOztBQUNYLElBQUEsR0FBVyxPQUFBLENBQVEsUUFBUjs7QUFDWCxNQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBQ1gsS0FBQSxHQUFXLE9BQUEsQ0FBUSxTQUFSOztBQUNYLEtBQUEsR0FBVyxPQUFBLENBQVEsU0FBUjs7QUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLFFBQVI7O0FBQ1gsTUFBQSxHQUFXLE9BQUEsQ0FBUSxVQUFSOztBQUNYLE1BQUEsR0FBVyxPQUFBLENBQVEsVUFBUjs7QUFDWCxPQUFBLEdBQVcsT0FBQSxDQUFRLFdBQVI7O0FBRVgsQ0FBQSxHQUFJLENBQUMsSUFBSSxDQUFDLElBQUwsQ0FBVSxDQUFWLENBQUEsR0FBYSxDQUFkLENBQUEsR0FBaUI7O0FBRWY7SUFFQyxlQUFDLElBQUQ7QUFFQyxZQUFBO1FBRkEsSUFBQyxDQUFBLE9BQUQ7Ozs7OztRQUVBLElBQUMsQ0FBQSxNQUFELEdBQVU7UUFDVixJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBQTtRQUVBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQSxDQUFLLFFBQUwsRUFBYztZQUFBLENBQUEsS0FBQSxDQUFBLEVBQU0sU0FBTjtZQUFnQixNQUFB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LENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBQTtBQUZsQixpQkFHUyxHQUhUO3VCQUdrQixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBQTtBQUhsQixpQkFJUyxHQUpUO3VCQUlrQixJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsQ0FBQTtBQUpsQixpQkFLUyxHQUxUO3VCQUtrQixJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBQTtBQUxsQixpQkFNUyxHQU5UO3VCQU1rQixJQUFDLENBQUEsTUFBTSxDQUFDLFlBQVIsQ0FBQTtBQU5sQjtJQUhnQjs7Ozs7O0FBWXhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgIFxuMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIFxuMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMCAgICBcbiMjI1xuXG57IGVsZW0sIHByZWZzIH0gPSByZXF1aXJlICdreGsnXG57IENhbWVyYSwgQ29sb3IzLCBEaXJlY3Rpb25hbExpZ2h0LCBFbmdpbmUsIEhlbWlzcGhlcmljTGlnaHQsIE1lc2hCdWlsZGVyLCBTY2VuZSwgU3BhY2UsIFN0YW5kYXJkTWF0ZXJpYWwsIFZlY3RvcjMgfSA9IHJlcXVpcmUgJ2JhYnlsb25qcydcbnsgdmVjIH0gPSByZXF1aXJlICcuL3BvbHkvbWF0aCdcbmdlbmVyYXRlID0gcmVxdWlyZSAnLi9wb2x5L2dlbmVyYXRlJ1xuVmVjdCAgICAgPSByZXF1aXJlICcuL3ZlY3QnXG5DYW1lcmEgICA9IHJlcXVpcmUgJy4vY2FtZXJhJ1xuU2NlbmUgICAgPSByZXF1aXJlICcuL3NjZW5lJ1xuU3BhY2UgICAgPSByZXF1aXJlICcuL3NwYWNlJ1xuVHJlZSAgICAgPSByZXF1aXJlICcuL3RyZWUnXG5TaGFwZXMgICA9IHJlcXVpcmUgJy4vc2hhcGVzJ1xuU2hhZGVyICAgPSByZXF1aXJlICcuL3NoYWRlcidcbmFuaW1hdGUgID0gcmVxdWlyZSAnLi9hbmltYXRlJ1xuXG7PlSA9IChNYXRoLnNxcnQoNSktMSkvMlxuXG5jbGFzcyBXb3JsZFxuICAgIFxuICAgIEA6IChAdmlldykgLT5cbiAgICAgICAgXG4gICAgICAgIEBwYXVzZWQgPSBmYWxzZVxuICAgICAgICBAdmlldy5mb2N1cygpXG4gICAgICAgIFxuICAgICAgICBAY2FudmFzID0gZWxlbSAnY2FudmFzJyBjbGFzczonYmFieWxvbicgcGFyZW50OkB2aWV3XG4gICAgICAgIFxuICAgICAgICBAZW5naW5lID0gbmV3IEVuZ2luZSBAY2FudmFzXG4gICAgICAgIFxuICAgICAgICBAc2NlbmUgID0gbmV3IFNjZW5lIEBcbiAgICAgICAgQHNoYXBlcyA9IG5ldyBTaGFwZXMgQHNjZW5lXG4gICAgICAgIEByZXNpemVkKClcbiAgICAgICAgXG4gICAgICAgIGEgPSAwLjAgIzAuMDY1XG4gICAgICAgIEBzY2VuZS5jbGVhckNvbG9yID0gbmV3IENvbG9yMyBhLCBhLCBhXG5cbiAgICAgICAgQGNhbWVyYSA9IG5ldyBDYW1lcmEgQFxuICAgICAgICBcbiAgICAgICAgaGVtaSA9IG5ldyBIZW1pc3BoZXJpY0xpZ2h0ICdoZW1pJyBuZXcgVmVjdG9yMygwIDEgMCksIEBzY2VuZVxuICAgICAgICBoZW1pLmludGVuc2l0eSA9IDAuNVxuICAgICAgICBcbiAgICAgICAgbGlnaHQgPSBuZXcgRGlyZWN0aW9uYWxMaWdodCAnbGlnaHQnIG5ldyBWZWN0b3IzKDAgLTEgMCksIEBzY2VuZVxuICAgICAgICBsaWdodC5wb3NpdGlvbi55ID0gM1xuXG4gICAgICAgIEBzY2VuZS5pbml0Rm9nKClcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgaWYgMFxuICAgICAgICAgICAgZ3JvdW5kID0gTWVzaEJ1aWxkZXIuQ3JlYXRlR3JvdW5kICdncm91bmQnIHt3aWR0aDoxMDAwIGhlaWdodDoxMDAwIHN1YmRpdmlzaW9uczogNH0sIEBzY2VuZVxuICAgICAgICAgICAgZ3JvdW5kLm1hdGVyaWFsID0gbmV3IFN0YW5kYXJkTWF0ZXJpYWwgJ2dyb3VuZCcgQHNjZW5lXG4gICAgICAgICAgICBncm91bmQubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG5ldyBDb2xvcjMgMC4wNSAwLjA1IDAuMDVcbiAgICAgICAgICAgIGEgPSAwLjA1XG4gICAgICAgICAgICBncm91bmQubWF0ZXJpYWwuZGlmZnVzZUNvbG9yID0gbmV3IENvbG9yMyBhLCBhLCBhXG4gICAgICAgICAgICBncm91bmQucmVjZWl2ZVNoYWRvd3MgPSB0cnVlXG4gICAgICAgICAgICBncm91bmQucG9zaXRpb24ueSA9IC0yXG4gICAgICAgICAgICAgXG4gICAgICAgIEBjdXJzb3IgPSBNZXNoQnVpbGRlci5DcmVhdGVJY29TcGhlcmUgJ2N1cnNvcicgZmxhdDpmYWxzZSByYWRpdXM6MS4xLCBAc2NlbmVcbiAgICAgICAgQGN1cnNvci5tYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsICdtYXQnIEBzY2VuZVxuICAgICAgICBAY3Vyc29yLm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBDb2xvcjMgMC4wNSAwLjA1IDAuMDVcbiAgICAgICAgQGN1cnNvci5tYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gbmV3IENvbG9yMyAwIDAgMFxuICAgICAgICBAY3Vyc29yLm1hdGVyaWFsLmFscGhhID0gMC41XG4gICAgICAgIEBjdXJzb3IucG9zaXRpb24gPSBbMCAtMTAwMCAwXVxuICAgICAgICBAY3Vyc29yLmJhY2tGYWNlQ3VsbGluZyA9IHRydWVcbiAgICAgICAgQGN1cnNvciA9IEBjdXJzb3IuZmxpcEZhY2VzIHRydWVcbiAgICAgICAgXG4gICAgICAgIEBlbmdpbmUucnVuUmVuZGVyTG9vcCBAYW5pbWF0ZVxuICAgICAgICBcbiAgICAgICAgaWYgcHJlZnMuZ2V0ICdpbnNwZWN0b3InXG4gICAgICAgICAgICBAdG9nZ2xlSW5zcGVjdG9yKClcbiAgICAgICAgICAgICBcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3BvaW50ZXJkb3duJyBAb25Nb3VzZURvd25cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3BvaW50ZXJtb3ZlJyBAb25Nb3VzZU1vdmVcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgJ3BvaW50ZXJ1cCcgICBAb25Nb3VzZVVwXG4gIFxuICAgICAgICBAc2hhZGVyID0gbmV3IFNoYWRlciBAXG4gICAgICAgICMgaWYgMFxuICAgICAgICAgICAgIyBAc3BhY2UgPSBuZXcgU3BhY2UgQFxuICAgICAgICAjIGVsc2UgaWYgMFxuICAgICAgICAgICAgIyBAdHJlZSA9IG5ldyBUcmVlIEBcbiAgICAgICAgIyBlbHNlXG4gICAgICAgICAgICAjIEBzaGFwZXMuZGFoKClcbiAgICAgICAgICAgIFxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgb25Nb3VzZURvd246IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgICAgIEBtb3VzZURvd25NZXNoID0gQHBpY2tlZE1lc2goKVxuICAgICAgICBAY2FtZXJhLm9uTW91c2VEb3duIGV2ZW50XG5cbiAgICBvbk1vdXNlTW92ZTogKGV2ZW50KSA9PlxuICAgICAgICBcbiAgICAgICAgQGNhbWVyYS5vbk1vdXNlRHJhZyBldmVudFxuICAgICAgICBpZiBtZXNoID0gQHBpY2tlZE1lc2goKVxuICAgICAgICAgICAgIyBAaGlnaGxpZ2h0IG1lc2ggICAgXG4gICAgICAgICAgICBAc2NlbmUubGVnZW5kLnNob3cgbWVzaC5uYW1lXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBzY2VuZS5sZWdlbmQuc2hvdyBAbGVnZW5kTWVzaFxuICAgICAgICBcbiAgICBvbk1vdXNlVXA6IChldmVudCkgPT4gICAgICAgICAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBpZiBtZXNoID0gQHBpY2tlZE1lc2goKVxuICAgICAgICAgICAgaWYgbWVzaCA9PSBAbW91c2VEb3duTWVzaFxuICAgICAgICAgICAgICAgIEBjdXJzb3IucG9zaXRpb24gPSBtZXNoLmdldEFic29sdXRlUG9zaXRpb24oKVxuICAgICAgICAgICAgICAgIEBjYW1lcmEuZmFkZVRvUG9zIG1lc2guZ2V0QWJzb2x1dGVQb3NpdGlvbigpXG4gICAgICAgICAgICAgICAgQHNjZW5lLmxlZ2VuZC5zaG93IG1lc2gubmFtZVxuICAgICAgICAgICAgICAgIEBsZWdlbmRNZXNoID0gbWVzaC5uYW1lXG5cbiAgICAgICAgZWxzZSBpZiBub3QgQG1vdXNlRG93bk1lc2hcbiAgICAgICAgICAgIEBjdXJzb3IucG9zaXRpb24gPSBbMCAtMTAwMCAwXVxuICAgICAgICAgICAgQHNjZW5lLmxlZ2VuZC5oaWRlKClcbiAgICAgICAgICAgIEBsZWdlbmRNZXNoID0gbnVsbFxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAY2FtZXJhLm9uTW91c2VVcCBldmVudFxuICAgICAgICAgIFxuICAgIHBpY2tlZE1lc2g6IC0+XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICBcbiAgICAgICAgaWYgcmVzdWx0ID0gQHNjZW5lLnBpY2soQHNjZW5lLnBvaW50ZXJYLCBAc2NlbmUucG9pbnRlclksIChtKSAtPiBtLm5hbWUgbm90IGluIFsnZ3JvdW5kJyAnY3Vyc29yJ10pXG4gICAgICAgICAgICBpZiByZXN1bHQucGlja2VkTWVzaD8ubmFtZSBpbiBbJ2ZhY2VzJydub3JtYWxzJ11cbiAgICAgICAgICAgICAgICByZXN1bHQucGlja2VkTWVzaC5wYXJlbnRcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXN1bHQucGlja2VkTWVzaFxuICAgICAgICBcbiAgICBoaWdobGlnaHQ6IChtZXNoKSAtPlxuICAgICAgICBcbiAgICAgICAgQGhpZ2hsaWdodE1lc2g/Lm1hdGVyaWFsPy5kaWZmdXNlQ29sb3IgPSBAcHJlSGlnaGxpZ2h0Q29sb3JcbiAgICAgICAgQHByZUhpZ2hsaWdodENvbG9yID0gbWVzaD8ubWF0ZXJpYWw/LmRpZmZ1c2VDb2xvclxuICAgICAgICBtZXNoPy5tYXRlcmlhbD8uZGlmZnVzZUNvbG9yID0gQHByZUhpZ2hsaWdodENvbG9yLm11bHRpcGx5IG5ldyBDb2xvcjMgMS41IDEuNSAxLjVcbiAgICAgICAgQGhpZ2hsaWdodE1lc2ggPSBtZXNoICAgICAgICBcbiAgICAgICAgICAgICAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIFxuICAgICMgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgdG9nZ2xlSW5zcGVjdG9yOiAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQHNjZW5lLmRlYnVnTGF5ZXIuaXNWaXNpYmxlKClcbiAgICAgICAgICAgIEBzY2VuZS5kZWJ1Z0xheWVyLmhpZGUoKVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdpbnNwZWN0b3InIGZhbHNlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBzY2VuZS5kZWJ1Z0xheWVyLnNob3cgb3ZlcmxheTp0cnVlIHNob3dJbnNwZWN0b3I6dHJ1ZVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdpbnNwZWN0b3InIHRydWVcbiAgICAgICAgXG4gICAgc3RhcnQ6IC0+IEB2aWV3LmZvY3VzKClcblxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIGFuaW1hdGU6ID0+XG5cbiAgICAgICAgaWYgbm90IEBwYXVzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQHNwYWNlPy5yZW5kZXIoKVxuICAgICAgICAgICAgQHRyZWU/LnJlbmRlcigpXG4gICAgICAgICAgICBAc2hhZGVyPy5yZW5kZXIoKVxuICAgICAgICAgICAgQGNhbWVyYS5yZW5kZXIoKVxuICAgICAgICAgICAgQHNjZW5lLnJlbmRlcigpXG4gICAgICAgICAgICBhbmltYXRlLnRpY2sgQGVuZ2luZS5nZXREZWx0YVRpbWUoKS8xMDAwXG4gICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAwMDAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgIDAwMCAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgXG4gICAgcmVzaXplZDogPT4gXG5cbiAgICAgICAgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW9cbiAgICAgICAgQGVuZ2luZS5zZXRTaXplIEB2aWV3LmNsaWVudFdpZHRoICogZHByLCBAdmlldy5jbGllbnRIZWlnaHQgKiBkcHJcbiAgICAgICAgQGNhbnZhcy5zdHlsZS50cmFuc2Zvcm0gPSBcInNjYWxlKCN7MS9kcHJ9KVwiXG4gICAgICAgIEBjYW52YXMuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gXCJ0b3AgbGVmdFwiXG4gICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgICAgICAgIDAwMCAwMDAgICBcbiAgICAjIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgMDAwMDAgICAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgICAgMDAwICAgICBcbiAgICBcbiAgICBtb2RLZXlDb21ib0V2ZW50RG93bjogKG1vZCwga2V5LCBjb21ibywgZXZlbnQpIC0+XG4gICAgICAgIFxuICAgICAgICAjIGtsb2cgJ21vZEtleUNvbWJvRXZlbnREb3duJyBtb2QsIGtleSwgY29tYm8sIGV2ZW50LndoaWNoXG4gICAgICAgIHN3aXRjaCBrZXlcbiAgICAgICAgICAgIHdoZW4gJ2UnIHRoZW4gQGNhbWVyYS5tb3ZlVXAoKVxuICAgICAgICAgICAgd2hlbiAncScgdGhlbiBAY2FtZXJhLm1vdmVEb3duKClcbiAgICAgICAgICAgIHdoZW4gJ2EnIHRoZW4gQGNhbWVyYS5tb3ZlTGVmdCgpXG4gICAgICAgICAgICB3aGVuICdkJyB0aGVuIEBjYW1lcmEubW92ZVJpZ2h0KClcbiAgICAgICAgICAgIHdoZW4gJ3cnIHRoZW4gQGNhbWVyYS5tb3ZlRm9yd2FyZCgpXG4gICAgICAgICAgICB3aGVuICdzJyB0aGVuIEBjYW1lcmEubW92ZUJhY2t3YXJkKClcbiAgICAgICAgICAgIHdoZW4gJ3gnICdlc2MnIHRoZW4gQGNhbWVyYS5zdG9wTW92aW5nKClcbiAgICAgICAgICAgIHdoZW4gJ3InIHRoZW4gQGNhbWVyYS5yZXNldCgpXG4gICAgICAgIFxuICAgIG1vZEtleUNvbWJvRXZlbnRVcDogKG1vZCwga2V5LCBjb21ibywgZXZlbnQpIC0+XG5cbiAgICAgICAgIyBrbG9nICdtb2RLZXlDb21ib0V2ZW50VXAnIG1vZCwga2V5LCBjb21ibywgZXZlbnQuY29kZVxuICAgICAgICBzd2l0Y2gga2V5XG4gICAgICAgICAgICB3aGVuICdlJyB0aGVuIEBjYW1lcmEuc3RvcFVwKClcbiAgICAgICAgICAgIHdoZW4gJ3EnIHRoZW4gQGNhbWVyYS5zdG9wRG93bigpXG4gICAgICAgICAgICB3aGVuICdhJyB0aGVuIEBjYW1lcmEuc3RvcExlZnQoKVxuICAgICAgICAgICAgd2hlbiAnZCcgdGhlbiBAY2FtZXJhLnN0b3BSaWdodCgpXG4gICAgICAgICAgICB3aGVuICd3JyB0aGVuIEBjYW1lcmEuc3RvcEZvcndhcmQoKVxuICAgICAgICAgICAgd2hlbiAncycgdGhlbiBAY2FtZXJhLnN0b3BCYWNrd2FyZCgpXG4gICAgICAgIFxuICAgICAgICBcbm1vZHVsZS5leHBvcnRzID0gV29ybGRcbiJdfQ==
//# sourceURL=../coffee/world.coffee