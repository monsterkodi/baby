// koffee 1.4.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var AmbientLight, ArcRotateCamera, Color3, DirectionalLight, Engine, FlyCamera, HemisphericLight, Mesh, MeshBuilder, PolyGen, Scene, ShadowGenerator, SpotLight, StandardMaterial, Vector3, World, elem, klog, poly, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), elem = ref.elem, klog = ref.klog;

ref1 = require('babylonjs'), Engine = ref1.Engine, Scene = ref1.Scene, Color3 = ref1.Color3, Vector3 = ref1.Vector3, Mesh = ref1.Mesh, DirectionalLight = ref1.DirectionalLight, AmbientLight = ref1.AmbientLight, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, MeshBuilder = ref1.MeshBuilder, HemisphericLight = ref1.HemisphericLight, SpotLight = ref1.SpotLight, ArcRotateCamera = ref1.ArcRotateCamera, FlyCamera = ref1.FlyCamera;

poly = require('./poly');

PolyGen = require('./polygen');

World = (function() {
    function World(view) {
        var a, box, c, camera, ground, i, j, k, len, light, light0, p, ref2, shadowGenerator, sphere, x, z;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.resized();
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        if (1) {
            camera = new ArcRotateCamera("Camera", 0, 0, 0, Vector3.Zero(), this.scene);
            camera.lowerRadiusLimit = 2;
            camera.upperRadiusLimit = 100;
            camera.setPosition(new Vector3(0, 0, -10));
        } else {
            camera = new FlyCamera("FlyCamera", new Vector3(0, 0, -10), this.scene);
        }
        camera.attachControl(this.canvas, true);
        light0 = new HemisphericLight('light1', new Vector3(0, 1, 0), this.scene);
        light0.intensity = 1;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 100;
        light.intensity = 0.1;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround("ground", {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial("mat", this.scene);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        if (0) {
            sphere = MeshBuilder.CreateSphere('sphere', {
                diameter: 1
            }, this.scene);
            sphere.material = new StandardMaterial("mat", this.scene);
            sphere.material.diffuseColor = new Color3(1, 1, 0);
            sphere.material.specularPower = 6;
            sphere.translate(new Vector3(0, 1, 0), 2);
            sphere.receiveShadows = true;
            shadowGenerator.addShadowCaster(sphere);
            box = MeshBuilder.CreateBox('box', {}, this.scene);
            box.material = new StandardMaterial("boxMat", this.scene);
            box.material.diffuseColor = new Color3(1, 0, 0);
            box.translate(new Vector3(1, 1, 0), 2);
            box.receiveShadows = true;
            shadowGenerator.addShadowCaster(box);
            box = MeshBuilder.CreateBox('box', {}, this.scene);
            box.material = new StandardMaterial("boxMat", this.scene);
            box.material.diffuseColor = new Color3(0, 1, 0);
            box.translate(new Vector3(0, 2, 0), 2);
            box.receiveShadows = true;
            shadowGenerator.addShadowCaster(box);
            box = MeshBuilder.CreateBox('box', {}, this.scene);
            box.material = new StandardMaterial("boxMat", this.scene);
            box.material.diffuseColor = new Color3(0, 0, 1);
            box.translate(new Vector3(0, 1, 1), 2);
            box.receiveShadows = true;
            shadowGenerator.addShadowCaster(box);
        }
        i = 0;
        z = 0;
        x = 0;
        ref2 = ['Tetrahedron', 'Cube', 'Octahedron', 'Dodecahedron', 'Icosahedron'];
        for (j = 0, len = ref2.length; j < len; j++) {
            k = ref2[j];
            p = Mesh.CreatePolyhedron("sap", {
                custom: poly[k]
            }, this.scene);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial("mat", this.scene);
            c = (function() {
                switch (poly[k].category) {
                    case "Platonic Solid":
                        return new Color3(0.1, 0.1, 0.1);
                    case "Archimedean Solid":
                        return new Color3(1, 1, 1);
                    case "Johnson Solid":
                        return new Color3(1, 0, 0);
                    case "Antiprism":
                        return new Color3(0, 0.3, 0);
                    case "Prism":
                        return new Color3(1, 1, 0);
                    case "Disk":
                        return new Color3(0, 0, 1);
                    default:
                        return new Color3(0, 0, 1);
                }
            })();
            p.material.diffuseColor = c;
            p.position.x = x;
            p.position.z = z;
            p.position.y = -3;
            x += 3;
            i++;
            if (i > 9) {
                i = 0;
                x = 0;
                z += 3;
            }
        }
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.tetrahedron
        }, this.scene);
        p.receiveShadows = true;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.cube
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 3;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.octahedron
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 6;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.dodecahedron()
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 9;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.dodecahedron(0)
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 9;
        p.position.z = -3;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.dodecahedron(1)
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 9;
        p.position.z = 3;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        p = Mesh.CreatePolyhedron("sap", {
            custom: PolyGen.icosahedron()
        }, this.scene);
        p.receiveShadows = true;
        p.position.x = 12;
        shadowGenerator.addShadowCaster(p);
        p.material = new StandardMaterial('mat', this.scene);
        p.material.diffuseColor = new Color3(1, 1, 0);
        this.engine.runRenderLoop(this.animate);
    }

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            return this.scene.render();
        }
    };

    World.prototype.resized = function() {
        klog('resized', this.view.clientWidth, this.view.clientHeight);
        this.canvas.width = this.view.clientWidth;
        return this.canvas.height = this.view.clientHeight;
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        return klog('modKeyComboEventDown', mod, key, combo, event);
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        return klog('modKeyComboEventUp', mod, key, combo, event);
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee