// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var Camera, Color3, DirectionalLight, Engine, HemisphericLight, MeshBuilder, Scene, Shader, Shapes, Space, StandardMaterial, Tree, Vect, Vector3, World, animate, elem, generate, klog, prefs, ref, ref1, vec, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), elem = ref.elem, klog = ref.klog, prefs = ref.prefs;

ref1 = require('babylonjs'), Camera = ref1.Camera, Color3 = ref1.Color3, DirectionalLight = ref1.DirectionalLight, Engine = ref1.Engine, HemisphericLight = ref1.HemisphericLight, MeshBuilder = ref1.MeshBuilder, Scene = ref1.Scene, Space = ref1.Space, StandardMaterial = ref1.StandardMaterial, Vector3 = ref1.Vector3;

vec = require('./poly/math').vec;

generate = require('./poly/generate');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

Space = require('./space');

Tree = require('./tree');

Shapes = require('./shapes');

Shader = require('./shader');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, c1, c2, c3, c4, ground, hemi, light, n1, n2, n3, n4, vx, vy;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas);
        this.scene = new Scene(this);
        this.shapes = new Shapes(this.scene);
        this.resized();
        a = 0.0;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this);
        hemi = new HemisphericLight('hemi', new Vector3(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        this.scene.initFog();
        if (0) {
            ground = MeshBuilder.CreateGround('ground', {
                width: 1000,
                height: 1000,
                subdivisions: 4
            }, this.scene);
            ground.material = new StandardMaterial('ground', this.scene);
            ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
            a = 0.05;
            ground.material.diffuseColor = new Color3(a, a, a);
            ground.receiveShadows = true;
            ground.position.y = -2;
        }
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 1.1
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.specularColor = new Color3(0, 0, 0);
        this.cursor.material.alpha = 0.5;
        this.cursor.position = [0, -1000, 0];
        this.cursor.backFaceCulling = true;
        this.cursor = this.cursor.flipFaces(true);
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointermove', this.onMouseMove);
        window.addEventListener('pointerup', this.onMouseUp);
        vy = vec(0, 1, 0);
        vx = vec(1, 0, 0);
        c1 = vec(1.0, 1.0, 1.0).normalize().rotate(vy, -45.0).rotate(vx, -54.735);
        c2 = vec(1.0, -1.0, -1.0).normalize().rotate(vy, -45.0).rotate(vx, -54.735);
        c3 = vec(-1.0, 1.0, -1.0).normalize().rotate(vy, -45.0).rotate(vx, -54.735);
        c4 = vec(-1.0, -1.0, 1.0).normalize().rotate(vy, -45.0).rotate(vx, -54.735);
        n1 = c1.minus(c4).crossed(c4.minus(c2)).normalize();
        n2 = c2.minus(c3).crossed(c3.minus(c1)).normalize();
        n3 = c3.minus(c2).crossed(c2.minus(c4)).normalize();
        n4 = c4.minus(c1).crossed(c1.minus(c3)).normalize();
        klog("vec3 c1 = vec3(" + c1.x + ", " + c1.y + ", " + c1.z + ");");
        klog("vec3 c2 = vec3(" + c2.x + ", " + c2.y + ", " + c2.z + ");");
        klog("vec3 c3 = vec3(" + c3.x + ", " + c3.y + ", " + c3.z + ");");
        klog("vec3 c4 = vec3(" + c4.x + ", " + c4.y + ", " + c4.z + ");");
        klog("vec3 n1 = vec3(" + n1.x + ", " + n1.y + ", " + n1.z + ");");
        klog("vec3 n2 = vec3(" + n2.x + ", " + n2.y + ", " + n2.z + ");");
        klog("vec3 n3 = vec3(" + n3.x + ", " + n3.y + ", " + n3.z + ");");
        klog("vec3 n4 = vec3(" + n4.x + ", " + n4.y + ", " + n4.z + ");");
        this.shader = new Shader(this);
    }

    World.prototype.onMouseDown = function(event) {
        this.mouseDownMesh = this.pickedMesh();
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        var mesh;
        this.camera.onMouseDrag(event);
        if (mesh = this.pickedMesh()) {
            return this.scene.legend.show(mesh.name);
        } else {
            return this.scene.legend.show(this.legendMesh);
        }
    };

    World.prototype.onMouseUp = function(event) {
        var mesh;
        if (mesh = this.pickedMesh()) {
            if (mesh === this.mouseDownMesh) {
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
                this.scene.legend.show(mesh.name);
                this.legendMesh = mesh.name;
            }
        } else if (!this.mouseDownMesh) {
            this.cursor.position = [0, -1000, 0];
            this.scene.legend.hide();
            this.legendMesh = null;
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.pickedMesh = function() {
        var ref2, ref3, result;
        return null;
        if (result = this.scene.pick(this.scene.pointerX, this.scene.pointerY, function(m) {
            var ref2;
            return (ref2 = m.name) !== 'ground' && ref2 !== 'cursor';
        })) {
            if ((ref2 = (ref3 = result.pickedMesh) != null ? ref3.name : void 0) === 'faces' || ref2 === 'normals') {
                return result.pickedMesh.parent;
            } else {
                return result.pickedMesh;
            }
        }
    };

    World.prototype.highlight = function(mesh) {
        var ref2, ref3, ref4, ref5;
        if ((ref2 = this.highlightMesh) != null) {
            if ((ref3 = ref2.material) != null) {
                ref3.diffuseColor = this.preHighlightColor;
            }
        }
        this.preHighlightColor = mesh != null ? (ref4 = mesh.material) != null ? ref4.diffuseColor : void 0 : void 0;
        if (mesh != null) {
            if ((ref5 = mesh.material) != null) {
                ref5.diffuseColor = this.preHighlightColor.multiply(new Color3(1.5, 1.5, 1.5));
            }
        }
        return this.highlightMesh = mesh;
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        var ref2, ref3, ref4;
        if (!this.paused) {
            if ((ref2 = this.space) != null) {
                ref2.render();
            }
            if ((ref3 = this.tree) != null) {
                ref3.render();
            }
            if ((ref4 = this.shader) != null) {
                ref4.render();
            }
            this.camera.render();
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        var dpr;
        dpr = window.devicePixelRatio;
        this.engine.setSize(this.view.clientWidth * dpr, this.view.clientHeight * dpr);
        this.canvas.style.transform = "scale(" + (1 / dpr) + ")";
        return this.canvas.style.transformOrigin = "top left";
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
            case 'r':
                return this.camera.reset();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee