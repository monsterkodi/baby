// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var AmbientLight, ArcRotateCamera, Camera, Color3, DirectionalLight, Engine, FramingBehavior, HemisphericLight, Mesh, MeshBuilder, PointLight, Poly, Scene, ShadowGenerator, SimplificationType, SpotLight, StandardMaterial, Vect, Vector3, World, animate, deg2rad, elem, generate, klog, prefs, ref, ref1, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), deg2rad = ref.deg2rad, prefs = ref.prefs, elem = ref.elem, klog = ref.klog;

ref1 = require('babylonjs'), ArcRotateCamera = ref1.ArcRotateCamera, FramingBehavior = ref1.FramingBehavior, Engine = ref1.Engine, Color3 = ref1.Color3, Vector3 = ref1.Vector3, Mesh = ref1.Mesh, SimplificationType = ref1.SimplificationType, DirectionalLight = ref1.DirectionalLight, AmbientLight = ref1.AmbientLight, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, MeshBuilder = ref1.MeshBuilder, HemisphericLight = ref1.HemisphericLight, SpotLight = ref1.SpotLight, PointLight = ref1.PointLight;

generate = require('./poly/generate');

Poly = require('./poly/polyold');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, ci, code, d, f, ground, hemi, i, j, k, l, len, len1, len2, len3, light, m, n, names, o, p, poly, q, ref2, ri, row, rows, shadowGenerator, truncated, y;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        this.resized();
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        hemi = new HemisphericLight('hemi', new Vect(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.bias = 0.0002;
        shadowGenerator.darkness = 0.8;
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround('ground', {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial('mat', this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 0.99
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.alpha = 0.25;
        this.cursor.position = this.camera.position;
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointerup', this.onMouseUp);
        if (0) {
            names = ['tetrahedron', 'cube', 'octahedron', 'dodecahedron', 'icosahedron', 'cuboctahedron', 'icosidodecahedron', 'truncatedicosidodecahedron', 'rhombicosidodecahedron', 'rhombicubocahedron', 'snubicosidodecahedron', 'snubcuboctahedron'];
            for (j = k = 0, len = names.length; k < len; j = ++k) {
                m = names[j];
                for (i = l = 0; l <= 10; i = ++l) {
                    truncated = Poly.truncate(Poly[m](), i * 0.1);
                    p = Mesh.CreatePolyhedron(m, {
                        custom: truncated
                    }, this.scene);
                    p.receiveShadows = true;
                    p.convertToFlatShadedMesh();
                    p.position.x = 3 * j;
                    p.position.z = 3 * i;
                    p.position.y = -2;
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    p.material.diffuseColor = new Color3(i / 12, (j / 6) % 1, 1 - j / 12);
                }
            }
        }
        rows = [['c0.1T', 'c0.25T', 'cT', 'c0.75T', 'c0.9T'], ['c0.1C', 'c0.25C', 'cC', 'c0.75C', 'c0.9C'], ['c0.1O', 'c0.25O', 'cO', 'c0.75O', 'c0.9O'], ['c0.1D', 'c0.25D', 'cD', 'c0.75D', 'c0.9D'], ['c0.1I', 'c0.25I', 'cI', 'c0.75I', 'c0.9I']];
        ri = 0;
        for (n = 0, len1 = rows.length; n < len1; n++) {
            row = rows[n];
            ci = 0;
            ri++;
            for (o = 0, len2 = row.length; o < len2; o++) {
                code = row[o];
                ci++;
                ref2 = ['', 'c'];
                for (y = q = 0, len3 = ref2.length; q < len3; y = ++q) {
                    d = ref2[y];
                    poly = generate(d + code);
                    p = Mesh.CreatePolyhedron(code, {
                        custom: poly
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    this.scene.label(p);
                    p.receiveShadows = true;
                    p.position.x = 3 * ci;
                    p.position.z = 3 * ri;
                    p.position.y = y * 3;
                    p.rotate(Vect.unitX, deg2rad(-90));
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    f = ci / 5;
                    p.material.diffuseColor = new Color3(f * ((ri & 1) >> 0), f * ((ri & 2) >> 1), f * ((ri & 4) >> 2));
                }
            }
        }
    }

    World.prototype.onMouseDown = function(event) {
        var result;
        window.addEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (event.buttons & 2 && result.pickedMesh.name !== 'ground') {
            this.mouseDownMesh = result.pickedMesh;
        } else {
            this.mouseDownMesh = null;
        }
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        return this.camera.onMouseDrag(event);
    };

    World.prototype.onMouseUp = function(event) {
        var mesh, ref2, result;
        window.removeEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (mesh = result.pickedMesh) {
            if (mesh.name !== 'ground' && mesh === this.mouseDownMesh) {
                if ((ref2 = mesh.name) === 'faces' || ref2 === 'normals') {
                    klog(mesh.parent.name);
                } else {
                    klog(mesh.name);
                }
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
            } else {
                if (!this.mouseDownMesh) {
                    this.cursor.position = this.camera.position;
                }
            }
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        this.canvas.height = this.view.clientHeight;
        return this.engine.resize();
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ybGQuanMiLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFBQSxJQUFBLDJTQUFBO0lBQUE7O0FBUUEsTUFBaUMsT0FBQSxDQUFRLEtBQVIsQ0FBakMsRUFBRSxxQkFBRixFQUFXLGlCQUFYLEVBQWtCLGVBQWxCLEVBQXdCOztBQUN4QixPQUFtTixPQUFBLENBQVEsV0FBUixDQUFuTixFQUFFLHNDQUFGLEVBQW1CLHNDQUFuQixFQUFvQyxvQkFBcEMsRUFBNEMsb0JBQTVDLEVBQW9ELHNCQUFwRCxFQUE2RCxnQkFBN0QsRUFBbUUsNENBQW5FLEVBQXVGLHdDQUF2RixFQUF5RyxnQ0FBekcsRUFBdUgsc0NBQXZILEVBQXdJLHdDQUF4SSxFQUEwSiw4QkFBMUosRUFBdUssd0NBQXZLLEVBQXlMLDBCQUF6TCxFQUFvTTs7QUFFcE0sUUFBQSxHQUFXLE9BQUEsQ0FBUSxpQkFBUjs7QUFDWCxJQUFBLEdBQVcsT0FBQSxDQUFRLGdCQUFSOztBQUNYLElBQUEsR0FBVyxPQUFBLENBQVEsUUFBUjs7QUFDWCxNQUFBLEdBQVcsT0FBQSxDQUFRLFVBQVI7O0FBQ1gsS0FBQSxHQUFXLE9BQUEsQ0FBUSxTQUFSOztBQUNYLE9BQUEsR0FBVyxPQUFBLENBQVEsV0FBUjs7QUFFWCxDQUFBLEdBQUksQ0FBQyxJQUFJLENBQUMsSUFBTCxDQUFVLENBQVYsQ0FBQSxHQUFhLENBQWQsQ0FBQSxHQUFpQjs7QUFFZjtJQUVDLGVBQUMsSUFBRDtBQUVDLFlBQUE7UUFGQSxJQUFDLENBQUEsT0FBRDs7Ozs7O1FBRUEsSUFBQyxDQUFBLE1BQUQsR0FBVTtRQUNWLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFBO1FBRUEsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFBLENBQUssUUFBTCxFQUFjO1lBQUEsQ0FBQSxLQUFBLENBQUEsRUFBTSxTQUFOO1lBQWdCLE1BQUEsRUFBTyxJQUFDLENBQUEsSUFBeEI7U0FB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RGxCLGlCQUVTLEdBRlQ7dUJBRWtCLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixDQUFBO0FBRmxCLGlCQUdTLEdBSFQ7dUJBR2tCLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixDQUFBO0FBSGxCLGlCQUlTLEdBSlQ7dUJBSWtCLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBUixDQUFBO0FBSmxCLGlCQUtTLEdBTFQ7dUJBS2tCLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixDQUFBO0FBTGxCLGlCQU1TLEdBTlQ7dUJBTWtCLElBQUMsQ0FBQSxNQUFNLENBQUMsWUFBUixDQUFBO0FBTmxCLGlCQU9TLEdBUFQ7QUFBQSxpQkFPYSxLQVBiO3VCQU93QixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBQTtBQVB4QjtJQUhrQjs7b0JBWXRCLGtCQUFBLEdBQW9CLFNBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxLQUFYLEVBQWtCLEtBQWxCO0FBRWhCLGdCQUFPLEdBQVA7QUFBQSxpQkFDUyxHQURUO3VCQUNrQixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsQ0FBQTtBQURsQixpQkFFUyxHQUZUO3VCQUVrQixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBQTtBQUZsQixpQkFHUyxHQUhUO3VCQUdrQixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBQTtBQUhsQixpQkFJUyxHQUpUO3VCQUlrQixJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsQ0FBQTtBQUpsQixpQkFLUyxHQUxUO3VCQUtrQixJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBQTtBQUxsQixpQkFNUyxHQU5UO3VCQU1rQixJQUFDLENBQUEsTUFBTSxDQUFDLFlBQVIsQ0FBQTtBQU5sQjtJQUZnQjs7Ozs7O0FBWXhCLE1BQU0sQ0FBQyxPQUFQLEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyMjXG4wMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAwMDAgICAgICAwMDAwMDAwICAgIFxuMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgMDAwICAgMDAwICBcbjAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMCAgICAgIDAwMCAgIDAwMCAgXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAwMDAgICAwMDAgIFxuMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgMDAwMDAwMCAgICBcbiMjI1xuXG57IGRlZzJyYWQsIHByZWZzLCBlbGVtLCBrbG9nIH0gPSByZXF1aXJlICdreGsnXG57IEFyY1JvdGF0ZUNhbWVyYSwgRnJhbWluZ0JlaGF2aW9yLCBFbmdpbmUsIENvbG9yMywgVmVjdG9yMywgTWVzaCwgU2ltcGxpZmljYXRpb25UeXBlLCBEaXJlY3Rpb25hbExpZ2h0LCBBbWJpZW50TGlnaHQsIFNoYWRvd0dlbmVyYXRvciwgU3RhbmRhcmRNYXRlcmlhbCwgTWVzaEJ1aWxkZXIsIEhlbWlzcGhlcmljTGlnaHQsIFNwb3RMaWdodCwgUG9pbnRMaWdodCB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xuXG5nZW5lcmF0ZSA9IHJlcXVpcmUgJy4vcG9seS9nZW5lcmF0ZSdcblBvbHkgICAgID0gcmVxdWlyZSAnLi9wb2x5L3BvbHlvbGQnXG5WZWN0ICAgICA9IHJlcXVpcmUgJy4vdmVjdCdcbkNhbWVyYSAgID0gcmVxdWlyZSAnLi9jYW1lcmEnXG5TY2VuZSAgICA9IHJlcXVpcmUgJy4vc2NlbmUnXG5hbmltYXRlICA9IHJlcXVpcmUgJy4vYW5pbWF0ZSdcblxuz5UgPSAoTWF0aC5zcXJ0KDUpLTEpLzJcblxuY2xhc3MgV29ybGRcbiAgICBcbiAgICBAOiAoQHZpZXcpIC0+XG4gICAgICAgIFxuICAgICAgICBAcGF1c2VkID0gZmFsc2VcbiAgICAgICAgQHZpZXcuZm9jdXMoKVxuICAgICAgICBcbiAgICAgICAgQGNhbnZhcyA9IGVsZW0gJ2NhbnZhcycgY2xhc3M6J2JhYnlsb24nIHBhcmVudDpAdmlld1xuICAgICAgICBcbiAgICAgICAgQGVuZ2luZSA9IG5ldyBFbmdpbmUgQGNhbnZhcywgdHJ1ZVxuICAgICAgICBAc2NlbmUgPSBuZXcgU2NlbmUgQGVuZ2luZSBcbiAgICAgICAgQHJlc2l6ZWQoKVxuICAgICAgICBcbiAgICAgICAgYSA9IDAuMDZcbiAgICAgICAgQHNjZW5lLmNsZWFyQ29sb3IgPSBuZXcgQ29sb3IzIGEsIGEsIGFcblxuICAgICAgICBAY2FtZXJhID0gbmV3IENhbWVyYSBAc2NlbmUsIEB2aWV3LCBAY2FudmFzXG4gICAgICAgIFxuICAgICAgICBoZW1pID0gbmV3IEhlbWlzcGhlcmljTGlnaHQgJ2hlbWknIG5ldyBWZWN0KDAgMSAwKSwgQHNjZW5lXG4gICAgICAgIGhlbWkuaW50ZW5zaXR5ID0gMC41XG4gICAgICAgIFxuICAgICAgICBsaWdodCA9IG5ldyBEaXJlY3Rpb25hbExpZ2h0ICdsaWdodCcgKG5ldyBWZWN0b3IzKDAgLTEgMCkpLCBAc2NlbmVcbiAgICAgICAgbGlnaHQucG9zaXRpb24ueSA9IDNcbiAgICAgICAgIyBsaWdodC5pbnRlbnNpdHkgPSAwLjFcbiAgICAgICAgXG4gICAgICAgIHNoYWRvd0dlbmVyYXRvciA9IG5ldyBTaGFkb3dHZW5lcmF0b3IgOCoxMDI0LCBsaWdodFxuICAgICAgICBzaGFkb3dHZW5lcmF0b3IuYmlhcyA9IDAuMDAwMlxuICAgICAgICBzaGFkb3dHZW5lcmF0b3IuZGFya25lc3MgPSAwLjhcbiAgICAgICAgc2hhZG93R2VuZXJhdG9yLnVzZUV4cG9uZW50aWFsU2hhZG93TWFwID0gdHJ1ZVxuICAgICAgICBzaGFkb3dHZW5lcmF0b3IudXNlUG9pc3NvblNhbXBsaW5nID0gdHJ1ZVxuICAgICAgICBzaGFkb3dHZW5lcmF0b3IudXNlUGVyY2VudGFnZUNsb3NlckZpbHRlcmluZyA9IHRydWVcbiAgICAgICAgc2hhZG93R2VuZXJhdG9yLnVzZUNvbnRhY3RIYXJkZW5pbmdTaGFkb3cgPSB0cnVlXG4gICAgICAgIFxuICAgICAgICBncm91bmQgPSBNZXNoQnVpbGRlci5DcmVhdGVHcm91bmQgJ2dyb3VuZCcge3dpZHRoOjEwMDAgaGVpZ2h0OjEwMDAgc3ViZGl2aXNpb25zOiA0fSwgQHNjZW5lXG4gICAgICAgIGdyb3VuZC5tYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsICdtYXQnIEBzY2VuZVxuICAgICAgICBncm91bmQubWF0ZXJpYWwuc3BlY3VsYXJDb2xvciA9IG5ldyBDb2xvcjMgMC4wNSAwLjA1IDAuMDVcbiAgICAgICAgYSA9IDAuMDVcbiAgICAgICAgZ3JvdW5kLm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBDb2xvcjMgYSwgYSwgYVxuICAgICAgICBncm91bmQucmVjZWl2ZVNoYWRvd3MgPSB0cnVlXG4gICAgICAgIGdyb3VuZC5wb3NpdGlvbi55ID0gLTRcbiAgICAgICAgICAgICBcbiAgICAgICAgQGN1cnNvciA9IE1lc2hCdWlsZGVyLkNyZWF0ZUljb1NwaGVyZSAnY3Vyc29yJyBmbGF0OmZhbHNlIHJhZGl1czowLjk5LCBAc2NlbmVcbiAgICAgICAgQGN1cnNvci5tYXRlcmlhbCA9IG5ldyBTdGFuZGFyZE1hdGVyaWFsICdtYXQnIEBzY2VuZVxuICAgICAgICBAY3Vyc29yLm1hdGVyaWFsLmRpZmZ1c2VDb2xvciA9IG5ldyBDb2xvcjMgMC4wNSAwLjA1IDAuMDVcbiAgICAgICAgQGN1cnNvci5tYXRlcmlhbC5hbHBoYSA9IDAuMjVcbiAgICAgICAgQGN1cnNvci5wb3NpdGlvbiA9IEBjYW1lcmEucG9zaXRpb25cbiAgICAgICAgXG4gICAgICAgIEBlbmdpbmUucnVuUmVuZGVyTG9vcCBAYW5pbWF0ZVxuICAgICAgICBpZiBwcmVmcy5nZXQgJ2luc3BlY3RvcidcbiAgICAgICAgICAgIEB0b2dnbGVJbnNwZWN0b3IoKVxuICAgICAgICAgICAgIFxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAncG9pbnRlcmRvd24nIEBvbk1vdXNlRG93blxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciAncG9pbnRlcnVwJyAgIEBvbk1vdXNlVXBcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAwXG4gICAgICAgICAgICBuYW1lcyA9IFtcbiAgICAgICAgICAgICAgICAndGV0cmFoZWRyb24nXG4gICAgICAgICAgICAgICAgJ2N1YmUnXG4gICAgICAgICAgICAgICAgJ29jdGFoZWRyb24nXG4gICAgICAgICAgICAgICAgJ2RvZGVjYWhlZHJvbidcbiAgICAgICAgICAgICAgICAnaWNvc2FoZWRyb24nXG4gICAgICAgICAgICAgICAgJ2N1Ym9jdGFoZWRyb24nXG4gICAgICAgICAgICAgICAgJ2ljb3NpZG9kZWNhaGVkcm9uJ1xuICAgICAgICAgICAgICAgICd0cnVuY2F0ZWRpY29zaWRvZGVjYWhlZHJvbicgXG4gICAgICAgICAgICAgICAgJ3Job21iaWNvc2lkb2RlY2FoZWRyb24nIFxuICAgICAgICAgICAgICAgICdyaG9tYmljdWJvY2FoZWRyb24nIFxuICAgICAgICAgICAgICAgICdzbnViaWNvc2lkb2RlY2FoZWRyb24nIFxuICAgICAgICAgICAgICAgICdzbnViY3Vib2N0YWhlZHJvbidcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIG0saiBpbiBuYW1lc1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZvciBpIGluIFswLi4xMF1cbiAgICAgICAgICAgICAgICAgICAgdHJ1bmNhdGVkID0gUG9seS50cnVuY2F0ZSBQb2x5W21dKCksIGkqMC4xXG4gICAgICAgICAgICAgICAgICAgIHAgPSBNZXNoLkNyZWF0ZVBvbHloZWRyb24gbSwge2N1c3RvbTp0cnVuY2F0ZWR9LCBAc2NlbmVcbiAgICAgICAgICAgICAgICAgICAgcC5yZWNlaXZlU2hhZG93cyA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgcC5jb252ZXJ0VG9GbGF0U2hhZGVkTWVzaCgpXG4gICAgICAgICAgICAgICAgICAgIHAucG9zaXRpb24ueCA9IDMqalxuICAgICAgICAgICAgICAgICAgICBwLnBvc2l0aW9uLnogPSAzKmlcbiAgICAgICAgICAgICAgICAgICAgcC5wb3NpdGlvbi55ID0gLTJcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93R2VuZXJhdG9yLmFkZFNoYWRvd0Nhc3RlciBwXG4gICAgICAgICAgICAgICAgICAgIHAubWF0ZXJpYWwgPSBuZXcgU3RhbmRhcmRNYXRlcmlhbCAnbWF0JyBAc2NlbmVcbiAgICAgICAgICAgICAgICAgICAgcC5tYXRlcmlhbC5hbHBoYSA9IDEgIyAwLjhcbiAgICAgICAgICAgICAgICAgICAgcC5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBuZXcgQ29sb3IzIGkvMTIgKGovNiklMSAxLWovMTJcbiAgXG4gICAgICAgIHJvd3MgPSBbXG4gICAgICAgICAgICAjIFsnYzAuNjRUJ10gXG4gICAgICAgICAgICBbJ2MwLjFUJydjMC4yNVQnJ2NUJydjMC43NVQnJ2MwLjlUJ11cbiAgICAgICAgICAgIFsnYzAuMUMnJ2MwLjI1QycnY0MnJ2MwLjc1QycnYzAuOUMnXVxuICAgICAgICAgICAgWydjMC4xTycnYzAuMjVPJydjTycnYzAuNzVPJydjMC45TyddXG4gICAgICAgICAgICBbJ2MwLjFEJydjMC4yNUQnJ2NEJydjMC43NUQnJ2MwLjlEJ11cbiAgICAgICAgICAgIFsnYzAuMUknJ2MwLjI1SScnY0knJ2MwLjc1SScnYzAuOUknXVxuICAgICAgICAgICAgIyBbJ1QnJ0MnJ08nJ0QnJ0knXVxuICAgICAgICAgICAgIyBbJ2NUJydjQycnY08nJ2NEJydjSSddXG4gICAgICAgICAgICAjIFsnejZ6dFQnJ3o2enRPJyd6dEknXVxuICAgICAgICAgICAgIyBbJ3YxMHo2Y1QnJ3ZjQycndmNPJyd2Y0QnJ3ZjSSddXG4gICAgICAgICAgICAjIFsnZFQnJ2RDJydkTycnZEQnJ2RJJ11cbiAgICAgICAgICAgICMgWydhVCcnYUMnJ2FPJydhRCcnYUknXVxuICAgICAgICAgICAgIyBbJ2tUJydrQycna08nJ2tEJydrSSddXG4gICAgICAgICAgICAjIFsndmdUJyd2Z0MnJ3ZnTycndmdEJyd2Z0knXVxuICAgICAgICAgICAgIyBbJ3JUJydyQycnck8nJ3JEJydySSddXG4gICAgICAgICAgICAjIFsndndUJyd2d0MnJ3Z3TycndndEJyd2d0knXVxuICAgICAgICAgICAgIyBbJ25UJyduQycnbk8nJ25EJyduSSddXG4gICAgICAgICAgICAjIFsneFQnJ3hDJyd4TycneEQnJ3hJJ11cbiAgICAgICAgICAgICMgWydwVCcncEMnJ3BPJydwRCcncEknXVxuICAgICAgICAgICAgIyBbJ3FUJydxQycncU8nJ3FEJydxSSddXG4gICAgICAgICAgICAjIFsnaFQnJ2hDJydoTycnaEQnJ2hJJ11cbiAgICAgICAgICAgICMgWyd1VCcndUMnJ3VPJyd1RCcndUknXVxuICAgICAgICAgICAgIyBbJ2VUJydlQycnZU8nJ2VEJydlSSddXG4jICAgICAgICAgICAgIFxuICAgICAgICAgICAgIyBbJ3ZqVCcndmpDJyd2ak8nJ3ZqRCcndmpJJ11cbiAgICAgICAgICAgICMgWydzVCcnc0MnJ3NPJydzRCcnc0knXVxuICAgICAgICAgICAgIyBbJ2R6ZGsoMCwtMC41KWRUJydkemRrKDAsLTAuMylkVCcnZHpkaygwLDApZFQnJ2R6ZGsoMCwwLjgpZFQnJ2R6ZGsoMCwxLjIpZFQnXVxuICAgICAgICAgICAgIyBbJ2RrKDMsMC4xKXp0VCcnZGsoMywtMC4zKXp0VCcnZGsoMywtMC40KXp0VCcnZGsoMywtMC40NSl6dFQnJ2RrKDMsLTAuNSl6dFQnXVxuICAgICAgICAgICAgIyBbJ3goMCwxKVQnJ3goMCwyKUMnJ3goMCwzKU8nJ3goMCw0KUQnJ3goMCw1KUknXVxuICAgICAgICAgICAgIyBbJ3goMywxLDApbigwLDAuNSwwKVQnJ24oMCwwLjUsLTAuMylDJyduKDAsMC4yNSwtMC4xKU8nJ24oMCwwLjgsLTAuMilEJyduSSddXG4gICAgICAgICAgICAjIFsnZHp0VCcnZHp0QycnZHp0TycnZHp0RCcnZHp0SSddXG4gICAgICAgICAgICAjIFsnZGsoMywwLjEpenRUJyd0M2R6dEMnJ3Q0ZHp0TycndDNkenREJyd0NWR6dEknJ3Q2ZHp0SSddXG4gICAgICAgICAgICAjIFsna1QnJ3ZqQycna08nJ2tDJydvQycnbUMnJ3ZnQycndmpEJydrSScna0QnJ29EJydtRCcndmdEJ11cblxuICAgICAgICAgICAgIyBbJ1kzJydZNCcnWTUnJ1k2JydZNycnWTgnJ1k5JydZMTAnJ1kxMScnWTEyJ11cbiAgICAgICAgICAgICMgWydQMycnUDQnJ1A1JydQNicnUDcnJ1A4JydQOScnUDEwJydQMTEnJ1AxMiddXG4gICAgICAgICAgICAjIFsnQTMnJ0E0JydBNScnQTYnJ0E3JydBOCcnQTknJ0ExMCcnQTExJydBMTInXVxuICAgICAgICAgICAgIyBbJ1UzJydVNCcnVTUnJ1U2JydVNycnVTgnJ1U5JydVMTAnJ1UxMScnVTEyJ11cbiAgICAgICAgICAgICMgWydWMycnVjQnJ1Y1JydWNicnVjcnJ1Y4JydWOScnVjEwJydWMTEnJ1YxMiddXG4gICAgICAgICAgICAjIFsnaFkzJydoWTQnJ2hZNScnaFk2JydoWTcnJ2hZOCcnaFk5JydoWTEwJydoWTExJydoWTEyJydoWTEzJydoWTE0J11cbiAgICAgICAgICAgIF1cbiAgICAgICAgXG4gICAgICAgIHJpID0gMFxuICAgICAgICBmb3Igcm93IGluIHJvd3NcbiAgICAgICAgICAgIGNpID0gMFxuICAgICAgICAgICAgcmkrK1xuICAgICAgICAgICAgZm9yIGNvZGUgaW4gcm93XG4gICAgICAgICAgICAgICAgY2krK1xuICAgICAgICAgICAgICAgIGZvciBkLHkgaW4gWycnICdjJ11cbiAgICAgICAgICAgICAgICAjIGZvciBkLHkgaW4gWycnXVxuICAgICAgICAgICAgICAgICAgICBwb2x5ID0gZ2VuZXJhdGUgZCtjb2RlXG4gICAgICAgICAgICAgICAgICAgIHAgPSBNZXNoLkNyZWF0ZVBvbHloZWRyb24gY29kZSwge2N1c3RvbTpwb2x5fSwgQHNjZW5lXG4gICAgICAgICAgICAgICAgICAgICMgQHNjZW5lLnNob3dOb3JtYWxzIHBcbiAgICAgICAgICAgICAgICAgICAgQHNjZW5lLnNob3dGYWNlcyBwLCBwb2x5XG4gICAgICAgICAgICAgICAgICAgIEBzY2VuZS5sYWJlbCBwXG4gICAgICAgICAgICAgICAgICAgIHAucmVjZWl2ZVNoYWRvd3MgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIHAucG9zaXRpb24ueCA9IDMqY2lcbiAgICAgICAgICAgICAgICAgICAgcC5wb3NpdGlvbi56ID0gMypyaVxuICAgICAgICAgICAgICAgICAgICBwLnBvc2l0aW9uLnkgPSB5KjNcbiAgICAgICAgICAgICAgICAgICAgcC5yb3RhdGUgVmVjdC51bml0WCwgZGVnMnJhZCAtOTBcbiAgICAgICAgICAgICAgICAgICAgIyBwLmNvbnZlcnRUb0ZsYXRTaGFkZWRNZXNoKClcbiAgICAgICAgICAgICAgICAgICAgc2hhZG93R2VuZXJhdG9yLmFkZFNoYWRvd0Nhc3RlciBwXG4gICAgICAgICAgICAgICAgICAgIHAubWF0ZXJpYWwgPSBuZXcgU3RhbmRhcmRNYXRlcmlhbCAnbWF0JyBAc2NlbmVcbiAgICAgICAgICAgICAgICAgICAgcC5tYXRlcmlhbC5hbHBoYSA9IDFcbiAgICAgICAgICAgICAgICAgICAgZiA9IGNpLzVcbiAgICAgICAgICAgICAgICAgICAgcC5tYXRlcmlhbC5kaWZmdXNlQ29sb3IgPSBuZXcgQ29sb3IzIGYqKChyaSYxKT4+MCksIGYqKChyaSYyKT4+MSksIGYqKChyaSY0KT4+MilcbiAgICAgICAgICAgIFxuICAgICMgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgXG4gICAgXG4gICAgb25Nb3VzZURvd246IChldmVudCkgPT5cbiAgICAgICAgXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyICdwb2ludGVybW92ZScgQG9uTW91c2VNb3ZlXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSBAc2NlbmUucGljayBAc2NlbmUucG9pbnRlclgsIEBzY2VuZS5wb2ludGVyWVxuICAgICAgICBpZiBldmVudC5idXR0b25zICYgMiBhbmQgcmVzdWx0LnBpY2tlZE1lc2gubmFtZSAhPSAnZ3JvdW5kJ1xuICAgICAgICAgICAgQG1vdXNlRG93bk1lc2ggPSByZXN1bHQucGlja2VkTWVzaCBcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQG1vdXNlRG93bk1lc2ggPSBudWxsXG4gICAgICAgIEBjYW1lcmEub25Nb3VzZURvd24gZXZlbnRcblxuICAgIG9uTW91c2VNb3ZlOiAoZXZlbnQpID0+XG4gICAgICAgIFxuICAgICAgICBAY2FtZXJhLm9uTW91c2VEcmFnIGV2ZW50XG4gICAgICAgIFxuICAgIG9uTW91c2VVcDogKGV2ZW50KSA9PiAgICAgICAgICAgICAgICBcblxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciAncG9pbnRlcm1vdmUnIEBvbk1vdXNlTW92ZVxuICAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IEBzY2VuZS5waWNrIEBzY2VuZS5wb2ludGVyWCwgQHNjZW5lLnBvaW50ZXJZXG4gICAgICAgIGlmIG1lc2ggPSByZXN1bHQucGlja2VkTWVzaFxuICAgICAgICAgICAgaWYgbWVzaC5uYW1lICE9ICdncm91bmQnIGFuZCBtZXNoID09IEBtb3VzZURvd25NZXNoXG4gICAgICAgICAgICAgICAgaWYgbWVzaC5uYW1lIGluIFsnZmFjZXMnJ25vcm1hbHMnXVxuICAgICAgICAgICAgICAgICAgICBrbG9nIG1lc2gucGFyZW50Lm5hbWVcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGtsb2cgbWVzaC5uYW1lXG4gICAgICAgICAgICAgICAgQGN1cnNvci5wb3NpdGlvbiA9IG1lc2guZ2V0QWJzb2x1dGVQb3NpdGlvbigpXG4gICAgICAgICAgICAgICAgQGNhbWVyYS5mYWRlVG9Qb3MgbWVzaC5nZXRBYnNvbHV0ZVBvc2l0aW9uKClcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBpZiBub3QgQG1vdXNlRG93bk1lc2hcbiAgICAgICAgICAgICAgICAgICAgQGN1cnNvci5wb3NpdGlvbiA9IEBjYW1lcmEucG9zaXRpb25cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQGNhbWVyYS5vbk1vdXNlVXAgZXZlbnRcbiAgICAgICAgICAgICAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgMDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIFxuICAgICMgMDAwICAwMDAwICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAwIDAwMCAgMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICBcbiAgICAjIDAwMCAgMDAwICAwMDAwICAgICAgIDAwMCAgMDAwICAgICAgICAwMDAgICAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAgICAgICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMCAgIDAwMCAgXG4gICAgXG4gICAgdG9nZ2xlSW5zcGVjdG9yOiAtPlxuICAgICAgICBcbiAgICAgICAgaWYgQHNjZW5lLmRlYnVnTGF5ZXIuaXNWaXNpYmxlKClcbiAgICAgICAgICAgIEBzY2VuZS5kZWJ1Z0xheWVyLmhpZGUoKVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdpbnNwZWN0b3InIGZhbHNlXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBzY2VuZS5kZWJ1Z0xheWVyLnNob3cgb3ZlcmxheTp0cnVlIHNob3dJbnNwZWN0b3I6dHJ1ZVxuICAgICAgICAgICAgcHJlZnMuc2V0ICdpbnNwZWN0b3InIHRydWVcbiAgICAgICAgXG4gICAgc3RhcnQ6IC0+IEB2aWV3LmZvY3VzKClcblxuICAgICMgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgMDAgICAgIDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwMDAwMDAwICAwMDAgMCAwMDAgIDAwMCAgMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgIDAwMDAgIDAwMCAgMDAwIDAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwMDAwMDAgIFxuICAgIFxuICAgIGFuaW1hdGU6ID0+XG5cbiAgICAgICAgaWYgbm90IEBwYXVzZWRcbiAgICAgICAgICAgIEBzY2VuZS5yZW5kZXIoKVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBhbmltYXRlLnRpY2sgQGVuZ2luZS5nZXREZWx0YVRpbWUoKS8xMDAwXG4gICAgXG4gICAgIyAwMDAwMDAwMCAgIDAwMDAwMDAwICAgMDAwMDAwMCAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgICAwMDAgICAwMDAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgMDAwICAgIDAwMCAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAwMDAwMDAwICAgMDAwICAwMDAwMDAwICAwMDAwMDAwMCAgXG4gICAgXG4gICAgcmVzaXplZDogPT4gXG5cbiAgICAgICAgQGNhbnZhcy53aWR0aCA9IEB2aWV3LmNsaWVudFdpZHRoXG4gICAgICAgIEBjYW52YXMuaGVpZ2h0ID0gQHZpZXcuY2xpZW50SGVpZ2h0XG4gICAgICAgIEBlbmdpbmUucmVzaXplKClcbiAgICAgICAgIyBAc2NlbmUucmVzaXplKClcbiAgICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgIDAwMCAgIDAwMCAgICAgICAgMDAwIDAwMCAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgICAwMDAwMCAgICBcbiAgICAjIDAwMCAgMDAwICAgMDAwICAgICAgICAgIDAwMCAgICAgXG4gICAgIyAwMDAgICAwMDAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgIFxuICAgIG1vZEtleUNvbWJvRXZlbnREb3duOiAobW9kLCBrZXksIGNvbWJvLCBldmVudCkgLT5cbiAgICAgICAgXG4gICAgICAgICMga2xvZyAnbW9kS2V5Q29tYm9FdmVudERvd24nIG1vZCwga2V5LCBjb21ibywgZXZlbnQud2hpY2hcbiAgICAgICAgc3dpdGNoIGtleVxuICAgICAgICAgICAgd2hlbiAnZScgdGhlbiBAY2FtZXJhLm1vdmVVcCgpXG4gICAgICAgICAgICB3aGVuICdxJyB0aGVuIEBjYW1lcmEubW92ZURvd24oKVxuICAgICAgICAgICAgd2hlbiAnYScgdGhlbiBAY2FtZXJhLm1vdmVMZWZ0KClcbiAgICAgICAgICAgIHdoZW4gJ2QnIHRoZW4gQGNhbWVyYS5tb3ZlUmlnaHQoKVxuICAgICAgICAgICAgd2hlbiAndycgdGhlbiBAY2FtZXJhLm1vdmVGb3J3YXJkKClcbiAgICAgICAgICAgIHdoZW4gJ3MnIHRoZW4gQGNhbWVyYS5tb3ZlQmFja3dhcmQoKVxuICAgICAgICAgICAgd2hlbiAneCcgJ2VzYycgdGhlbiBAY2FtZXJhLnN0b3BNb3ZpbmcoKVxuICAgICAgICBcbiAgICBtb2RLZXlDb21ib0V2ZW50VXA6IChtb2QsIGtleSwgY29tYm8sIGV2ZW50KSAtPlxuXG4gICAgICAgIHN3aXRjaCBrZXlcbiAgICAgICAgICAgIHdoZW4gJ2UnIHRoZW4gQGNhbWVyYS5zdG9wVXAoKVxuICAgICAgICAgICAgd2hlbiAncScgdGhlbiBAY2FtZXJhLnN0b3BEb3duKClcbiAgICAgICAgICAgIHdoZW4gJ2EnIHRoZW4gQGNhbWVyYS5zdG9wTGVmdCgpXG4gICAgICAgICAgICB3aGVuICdkJyB0aGVuIEBjYW1lcmEuc3RvcFJpZ2h0KClcbiAgICAgICAgICAgIHdoZW4gJ3cnIHRoZW4gQGNhbWVyYS5zdG9wRm9yd2FyZCgpXG4gICAgICAgICAgICB3aGVuICdzJyB0aGVuIEBjYW1lcmEuc3RvcEJhY2t3YXJkKClcbiAgICAgICAgXG4gICAgICAgICMga2xvZyAnbW9kS2V5Q29tYm9FdmVudFVwJyBtb2QsIGtleSwgY29tYm8sIGV2ZW50LmNvZGVcbiAgICAgICAgXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmxkXG4iXX0=
//# sourceURL=../coffee/world.coffee