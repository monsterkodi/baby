// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var Camera, Color3, DirectionalLight, Engine, HemisphericLight, Mesh, MeshBuilder, Scene, ShadowGenerator, StandardMaterial, Vect, Vector3, World, animate, colors, deg2rad, elem, empty, generate, prefs, ref, ref1, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), colors = ref.colors, deg2rad = ref.deg2rad, elem = ref.elem, empty = ref.empty, prefs = ref.prefs;

ref1 = require('babylonjs'), Camera = ref1.Camera, Color3 = ref1.Color3, DirectionalLight = ref1.DirectionalLight, Engine = ref1.Engine, HemisphericLight = ref1.HemisphericLight, Mesh = ref1.Mesh, MeshBuilder = ref1.MeshBuilder, Scene = ref1.Scene, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, Vector3 = ref1.Vector3;

generate = require('./poly/generate');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, ci, code, d, f, faceColors, ground, hemi, i, j, k, len, len1, len2, light, p, poly, r, ref2, ri, row, rows, shadowGenerator, y;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        this.resized();
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        hemi = new HemisphericLight('hemi', new Vect(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.bias = 0.0002;
        shadowGenerator.darkness = 0.8;
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround('ground', {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial('mat', this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 1.1
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.specularColor = new Color3(0, 0, 0);
        this.cursor.material.alpha = 0.5;
        this.cursor.position = [0, -1000, 0];
        this.cursor.backFaceCulling = true;
        this.cursor = this.cursor.flipFaces(true);
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointermove', this.onMouseMove);
        window.addEventListener('pointerup', this.onMouseUp);
        rows = [['tT', 'xT', 'nT', 'cT', 'hT', '', 'pT', 'pC', 'pO', 'pD', 'pI', '', 'mA3', 'qY3', 'fjY8', 'sP3', 'bY8'], ['tC', 'xC', 'nC', 'cC', 'hC', '', 'eT', 'eC', 'eO', 'eD', 'eI', '', 'mU3', 'qU3', 'fjU3', 'sA3', 'bP3'], ['tO', 'xO', 'nO', 'cO', 'hO', '', 'kT', 'kC', 'kO', 'kD', 'kI', '', 'mV3', 'qP6', 'fjV3', 'sY6', 'bP7'], ['tD', 'xD', 'nD', 'cD', 'hD', '', 'qT', 'qC', 'qO', 'qD', 'qI', '', 'mA8', 'qA3', 'fjU5', 'sP7', 'bU3'], ['tI', 'xI', 'nI', 'cI', 'hI', '', 'uT', 'uC', 'uO', 'uD', 'uI', '', 'mV6', 'qV3', 'fjU7', 'sA8', 'bU7'], [''], ['sT', 'k-.5T', 'kT', 'k4T', 'fwT', '', 'aT', 'fgT', 'fjT', 'x(0,0)T', 'dztT', '', 'foY7', 'kU3', 'xY6', 'pY3', 'fcU3'], ['', 'k-.5C', 'kC', 'k4C', 'fwC', '', 'aC', 'fgC', 'fjC', 'x(0,1)C', 'dztC', '', 'foY12', 'kV3', 'xP8', 'pA3', 'fcV3'], ['sO', 'k-.5O', 'kO', 'k4O', 'fwO', '', 'aO', 'fgO', 'fjO', 'x(0,2)O', 'dztO', '', 'foP9', 'kP7', 'xA3', 'pU3', 'hU3'], ['', 'k-.5D', 'kD', 'k4D', 'fwD', '', 'aD', 'fgD', 'fjD', 'x(0,3)D', 'dztD', '', 'foU7', 'kV7', 'xU6', 'pP6', 'eU6'], ['sI', 'k-.5I', 'kI', 'k4I', 'fwI', '', 'aI', 'fgI', 'fjI', 'x(0,4)I', 'dztI', '', 'foV9', 'kP12', 'xV3', 'pY8', 'feU3'], [''], ['Y5', 'eY5', 'foY5', 'fcY5', 'bY5', '', 'kY5', 'xY5', 'mY5', 'sY5', 'pY5', '', 'qY5', 'fjY5', 'hY5', 'nY5', 'aY5'], ['P5', 'eP5', 'foP5', 'fcP5', 'bP5', '', 'kP5', 'xP5', 'mP5', 'sP5', 'pP5', '', 'qP5', 'fjP5', 'hP5', 'nP5', 'aP5'], ['A5', 'feA5', 'foA5', 'fcA5', 'bA5', '', 'kA5', 'xA5', 'mA5', 'sA5', 'pA5', '', 'qA5', 'fjA5', 'hA5', 'nA5', 'aA5'], ['U5', 'eU5', 'foU5', 'fcU5', 'bU5', '', 'kU5', 'xU5', 'mU5', 'sU5', 'pU5', '', 'qU5', 'fjU5', 'hU5', 'nU5', 'aU5'], ['V5', 'feV5', 'foV5', 'fcV5', 'fbV5', '', 'kV5', 'xV5', 'mV5', 'sV5', 'pV5', '', 'qV5', 'fjV5', 'hV5', 'nV5', 'faV5']];
        colors = [new Color3(.5, .5, .5), new Color3(.8, .8, 1), new Color3(.5, .5, 1), new Color3(.4, .4, .9), new Color3(.3, .3, .8), new Color3(.2, .2, .7), new Color3(.1, .1, .6), new Color3(0, 0, .5), new Color3(1, 1, 1), new Color3(.2, .2, .2)];
        ri = 0;
        for (i = 0, len = rows.length; i < len; i++) {
            row = rows[i];
            ci = 0;
            ri++;
            for (j = 0, len1 = row.length; j < len1; j++) {
                code = row[j];
                ci++;
                if (empty(code)) {
                    continue;
                }
                ref2 = [''];
                for (y = k = 0, len2 = ref2.length; k < len2; y = ++k) {
                    d = ref2[y];
                    poly = generate(d + code, true);
                    poly.colorize('signature');
                    faceColors = poly.colors.map(function(ci) {
                        return colors[ci];
                    });
                    p = Mesh.CreatePolyhedron(d + code, {
                        custom: poly,
                        faceColors: faceColors
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    p.receiveShadows = true;
                    p.position.x = 3 * ci;
                    p.position.z = 3 * ri;
                    p.position.y = y * 3;
                    p.rotate(Vect.unitX, deg2rad(-90));
                    p.convertToFlatShadedMesh();
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    f = (ci % 6) / 5;
                    r = ri % 6;
                    p.material.diffuseColor = new Color3(f * ((r & 1) >> 0), f * ((r & 2) >> 1), f * ((r & 4) >> 2));
                    p.material.diffuseColor = new Color3(.25, .25, .25);
                }
            }
        }
    }

    World.prototype.onMouseDown = function(event) {
        this.mouseDownMesh = this.pickedMesh();
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        var mesh;
        this.camera.onMouseDrag(event);
        if (mesh = this.pickedMesh()) {
            this.highlight(mesh);
            return this.scene.legend.show(mesh);
        } else {
            return this.scene.legend.show(this.legendMesh);
        }
    };

    World.prototype.onMouseUp = function(event) {
        var mesh;
        if (mesh = this.pickedMesh()) {
            if (mesh === this.mouseDownMesh) {
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
                this.scene.legend.show(mesh);
                this.legendMesh = mesh;
            }
        } else if (!this.mouseDownMesh) {
            this.cursor.position = [0, -1000, 0];
            this.scene.legend.hide();
            this.legendMesh = null;
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.pickedMesh = function() {
        var ref2, ref3, result;
        if (result = this.scene.pick(this.scene.pointerX, this.scene.pointerY, function(m) {
            var ref2;
            return (ref2 = m.name) !== 'ground' && ref2 !== 'cursor';
        })) {
            if ((ref2 = (ref3 = result.pickedMesh) != null ? ref3.name : void 0) === 'faces' || ref2 === 'normals') {
                return result.pickedMesh.parent;
            } else {
                return result.pickedMesh;
            }
        }
    };

    World.prototype.highlight = function(mesh) {
        var ref2, ref3, ref4, ref5;
        if ((ref2 = this.highlightMesh) != null) {
            if ((ref3 = ref2.material) != null) {
                ref3.diffuseColor = this.preHighlightColor;
            }
        }
        this.preHighlightColor = mesh != null ? (ref4 = mesh.material) != null ? ref4.diffuseColor : void 0 : void 0;
        if (mesh != null) {
            if ((ref5 = mesh.material) != null) {
                ref5.diffuseColor = this.preHighlightColor.multiply(new Color3(1.5, 1.5, 1.5));
            }
        }
        return this.highlightMesh = mesh;
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        this.canvas.height = this.view.clientHeight;
        return this.engine.resize();
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee