// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var Camera, Color3, DirectionalLight, Engine, HemisphericLight, Mesh, MeshBuilder, Poly, Scene, ShadowGenerator, StandardMaterial, Vect, Vector3, World, animate, deg2rad, elem, empty, generate, klog, prefs, ref, ref1, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), deg2rad = ref.deg2rad, elem = ref.elem, empty = ref.empty, klog = ref.klog, prefs = ref.prefs;

ref1 = require('babylonjs'), Camera = ref1.Camera, Color3 = ref1.Color3, DirectionalLight = ref1.DirectionalLight, Engine = ref1.Engine, HemisphericLight = ref1.HemisphericLight, Mesh = ref1.Mesh, MeshBuilder = ref1.MeshBuilder, Scene = ref1.Scene, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, Vector3 = ref1.Vector3;

generate = require('./poly/generate');

Poly = require('./poly/polyold');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, ci, code, d, f, ground, hemi, i, j, k, l, len, len1, len2, len3, light, m, n, names, o, p, poly, q, r, ref2, ri, row, rows, shadowGenerator, truncated, y;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        this.resized();
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        hemi = new HemisphericLight('hemi', new Vect(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.bias = 0.0002;
        shadowGenerator.darkness = 0.8;
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround('ground', {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial('mat', this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 0.99
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.alpha = 0.25;
        this.cursor.position = this.camera.position;
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointerup', this.onMouseUp);
        if (0) {
            names = ['tetrahedron', 'cube', 'octahedron', 'dodecahedron', 'icosahedron', 'cuboctahedron', 'icosidodecahedron', 'truncatedicosidodecahedron', 'rhombicosidodecahedron', 'rhombicubocahedron', 'snubicosidodecahedron', 'snubcuboctahedron'];
            for (j = k = 0, len = names.length; k < len; j = ++k) {
                m = names[j];
                for (i = l = 0; l <= 10; i = ++l) {
                    truncated = Poly.truncate(Poly[m](), i * 0.1);
                    p = Mesh.CreatePolyhedron(m, {
                        custom: truncated
                    }, this.scene);
                    p.receiveShadows = true;
                    p.convertToFlatShadedMesh();
                    p.position.x = 3 * j;
                    p.position.z = 3 * i;
                    p.position.y = -2;
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    p.material.diffuseColor = new Color3(i / 12, (j / 6) % 1, 1 - j / 12);
                }
            }
        }
        rows = [['c0T', 'c.25T', 'cT', 'c.75T', 'c1T', '', 'h0T', 'h.25T', 'hT', 'h.75T', 'h1T'], ['c0C', 'c.25C', 'cC', 'c.75C', 'c1C', '', 'h0C', 'h.25C', 'hC', 'h.75C', 'h1C'], ['c0O', 'c.25O', 'cO', 'c.75O', 'c1O', '', 'h0O', 'h.25O', 'hO', 'h.75O', 'h1O'], ['c0D', 'c.25D', 'cD', 'c.75D', 'c1D', '', 'h0D', 'h.25D', 'hD', 'h.75D', 'h1D'], ['c0I', 'c.25I', 'cI', 'c.75I', 'c1I', '', 'h0I', 'h.25I', 'hI', 'h.75I', 'h1I'], [''], ['x0T', 'x.25T', 'xT', 'x.75T', 'x1T', '', 'n0T', 'n.25T', 'nT', 'n.75T', 'n1T'], ['x0C', 'x.25C', 'xC', 'x.75C', 'x1C', '', 'n0C', 'n.25C', 'nC', 'n.75C', 'n1C'], ['x0O', 'x.25O', 'xO', 'x.75O', 'x1O', '', 'n0O', 'n.25O', 'nO', 'n.75O', 'n1O'], ['x0D', 'x.25D', 'xD', 'x.75D', 'x1D', '', 'n0D', 'n.25D', 'nD', 'n.75D', 'n1D'], ['x0I', 'x.25I', 'xI', 'x.75I', 'x1I', '', 'n0I', 'n.25I', 'nI', 'n.75I', 'n1I'], [''], ['z6ztT', 'z6ztO', 'ztI'], ['v10z6cT', 'vcC', 'vcO', 'vcD', 'vcI'], ['aT', 'aC', 'aO', 'aD', 'aI'], ['gT', 'gC', 'gO', 'gD', 'gI'], ['wT', 'wC', 'wO', 'wD', 'wI'], [''], ['pT', 'pC', 'pO', 'pD', 'pI'], ['eT', 'eC', 'eO', 'eD', 'eI'], ['kT', 'kC', 'kO', 'kD', 'kI'], ['qT', 'qC', 'qO', 'qD', 'qI'], ['uT', 'uC', 'uO', 'uD', 'uI']];
        ri = 0;
        for (n = 0, len1 = rows.length; n < len1; n++) {
            row = rows[n];
            ci = 0;
            ri++;
            for (o = 0, len2 = row.length; o < len2; o++) {
                code = row[o];
                ci++;
                if (empty(code)) {
                    continue;
                }
                ref2 = [''];
                for (y = q = 0, len3 = ref2.length; q < len3; y = ++q) {
                    d = ref2[y];
                    poly = generate(d + code, true);
                    p = Mesh.CreatePolyhedron(d + code, {
                        custom: poly
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    this.scene.label(p);
                    p.receiveShadows = true;
                    p.position.x = 3 * ci;
                    p.position.z = 3 * ri;
                    p.position.y = y * 3;
                    p.rotate(Vect.unitX, deg2rad(-90));
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    f = (ci % 6) / 5;
                    r = ri % 6;
                    p.material.diffuseColor = new Color3(f * ((r & 1) >> 0), f * ((r & 2) >> 1), f * ((r & 4) >> 2));
                }
            }
        }
    }

    World.prototype.onMouseDown = function(event) {
        var result;
        window.addEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (event.buttons & 2 && result.pickedMesh.name !== 'ground') {
            this.mouseDownMesh = result.pickedMesh;
        } else {
            this.mouseDownMesh = null;
        }
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        return this.camera.onMouseDrag(event);
    };

    World.prototype.onMouseUp = function(event) {
        var mesh, ref2, result;
        window.removeEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (mesh = result.pickedMesh) {
            if (mesh.name !== 'ground' && mesh === this.mouseDownMesh) {
                if ((ref2 = mesh.name) === 'faces' || ref2 === 'normals') {
                    klog(mesh.parent.name);
                }
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
            } else {
                if (!this.mouseDownMesh) {
                    this.cursor.position = this.camera.position;
                }
            }
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        this.canvas.height = this.view.clientHeight;
        return this.engine.resize();
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee