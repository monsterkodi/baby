// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var Camera, Color3, DirectionalLight, Engine, HemisphericLight, Mesh, MeshBuilder, Poly, Scene, ShadowGenerator, StandardMaterial, Vect, Vector3, World, animate, deg2rad, elem, empty, generate, prefs, ref, ref1, ϕ,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), deg2rad = ref.deg2rad, elem = ref.elem, empty = ref.empty, prefs = ref.prefs;

ref1 = require('babylonjs'), Camera = ref1.Camera, Color3 = ref1.Color3, DirectionalLight = ref1.DirectionalLight, Engine = ref1.Engine, HemisphericLight = ref1.HemisphericLight, Mesh = ref1.Mesh, MeshBuilder = ref1.MeshBuilder, Scene = ref1.Scene, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, Vector3 = ref1.Vector3;

generate = require('./poly/generate');

Poly = require('./poly/polyold');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

animate = require('./animate');

ϕ = (Math.sqrt(5) - 1) / 2;

World = (function() {
    function World(view) {
        var a, ci, code, d, f, ground, hemi, i, j, k, l, len, len1, len2, len3, light, m, n, names, o, p, poly, q, r, ref2, ri, row, rows, shadowGenerator, y;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        this.resized();
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        hemi = new HemisphericLight('hemi', new Vect(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.bias = 0.0002;
        shadowGenerator.darkness = 0.8;
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround('ground', {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial('mat', this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 1.1
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.specularColor = new Color3(0, 0, 0);
        this.cursor.material.alpha = 0.5;
        this.cursor.position = [0, -1000, 0];
        this.cursor.backFaceCulling = true;
        this.cursor = this.cursor.flipFaces(true);
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointermove', this.onMouseMove);
        window.addEventListener('pointerup', this.onMouseUp);
        if (0) {
            names = ['tetrahedron', 'cube', 'octahedron', 'dodecahedron', 'icosahedron', 'cuboctahedron', 'icosidodecahedron', 'truncatedicosidodecahedron', 'rhombicosidodecahedron', 'rhombicubocahedron', 'snubicosidodecahedron', 'snubcuboctahedron'];
            for (j = k = 0, len = names.length; k < len; j = ++k) {
                m = names[j];
                for (i = l = 0; l <= 10; i = ++l) {
                    poly = Poly.truncate(Poly[m](), i * 0.1);
                    p = Mesh.CreatePolyhedron(m, {
                        custom: poly
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    p.receiveShadows = true;
                    p.convertToFlatShadedMesh();
                    p.position.x = -3 * j;
                    p.position.z = -3 * i;
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    p.material.diffuseColor = new Color3(i / 12, (j / 6) % 1, 1 - j / 12);
                }
            }
        }
        rows = [['tT', 'tC', 'tO', 'tD', 'tI']];
        ri = 0;
        for (n = 0, len1 = rows.length; n < len1; n++) {
            row = rows[n];
            ci = 0;
            ri++;
            for (o = 0, len2 = row.length; o < len2; o++) {
                code = row[o];
                ci++;
                if (empty(code)) {
                    continue;
                }
                ref2 = [''];
                for (y = q = 0, len3 = ref2.length; q < len3; y = ++q) {
                    d = ref2[y];
                    poly = generate(d + code, true);
                    p = Mesh.CreatePolyhedron(d + code, {
                        custom: poly
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    p.receiveShadows = true;
                    p.position.x = 3 * ci;
                    p.position.z = 3 * ri;
                    p.position.y = y * 3;
                    p.rotate(Vect.unitX, deg2rad(-90));
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    f = (ci % 6) / 5;
                    r = ri % 6;
                    p.material.diffuseColor = new Color3(f * ((r & 1) >> 0), f * ((r & 2) >> 1), f * ((r & 4) >> 2));
                }
            }
        }
    }

    World.prototype.onMouseDown = function(event) {
        this.mouseDownMesh = this.pickedMesh();
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        var mesh;
        this.camera.onMouseDrag(event);
        if (mesh = this.pickedMesh()) {
            this.highlight(mesh);
            return this.scene.legend.show(mesh);
        } else {
            return this.scene.legend.show(this.legendMesh);
        }
    };

    World.prototype.onMouseUp = function(event) {
        var mesh;
        if (mesh = this.pickedMesh()) {
            if (mesh === this.mouseDownMesh) {
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
                this.scene.legend.show(mesh);
                this.legendMesh = mesh;
            }
        } else if (!this.mouseDownMesh) {
            this.cursor.position = [0, -1000, 0];
            this.scene.legend.hide();
            this.legendMesh = null;
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.pickedMesh = function() {
        var ref2, ref3, result;
        if (result = this.scene.pick(this.scene.pointerX, this.scene.pointerY, function(m) {
            var ref2;
            return (ref2 = m.name) !== 'ground' && ref2 !== 'cursor';
        })) {
            if ((ref2 = (ref3 = result.pickedMesh) != null ? ref3.name : void 0) === 'faces' || ref2 === 'normals') {
                return result.pickedMesh.parent;
            } else {
                return result.pickedMesh;
            }
        }
    };

    World.prototype.highlight = function(mesh) {
        var ref2;
        if ((ref2 = this.highlightMesh) != null) {
            ref2.material.diffuseColor = this.preHighlightColor;
        }
        this.preHighlightColor = mesh.material.diffuseColor;
        mesh.material.diffuseColor = this.preHighlightColor.multiply(new Color3(1.5, 1.5, 1.5));
        return this.highlightMesh = mesh;
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        this.canvas.height = this.view.clientHeight;
        return this.engine.resize();
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee