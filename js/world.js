// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var AmbientLight, ArcRotateCamera, Camera, Color3, DirectionalLight, Engine, FramingBehavior, GUI, HemisphericLight, Mesh, MeshBuilder, PointLight, Poly, Scene, ShadowGenerator, SimplificationType, SpotLight, StandardMaterial, Vect, Vector3, World, animate, deg2rad, elem, generate, klog, prefs, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), deg2rad = ref.deg2rad, prefs = ref.prefs, elem = ref.elem, klog = ref.klog;

ref1 = require('babylonjs'), ArcRotateCamera = ref1.ArcRotateCamera, FramingBehavior = ref1.FramingBehavior, Engine = ref1.Engine, Color3 = ref1.Color3, Vector3 = ref1.Vector3, Mesh = ref1.Mesh, SimplificationType = ref1.SimplificationType, DirectionalLight = ref1.DirectionalLight, AmbientLight = ref1.AmbientLight, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, MeshBuilder = ref1.MeshBuilder, HemisphericLight = ref1.HemisphericLight, SpotLight = ref1.SpotLight, PointLight = ref1.PointLight;

GUI = require('babylonjs-gui');

generate = require('./poly/generate');

Poly = require('./poly/polyold');

Vect = require('./vect');

Camera = require('./camera');

Scene = require('./scene');

animate = require('./animate');

World = (function() {
    function World(view) {
        var a, code, d, ground, guiTexture, hemi, i, j, k, l, len, len1, len2, len3, light, m, n, names, o, p, poly, q, ref2, row, rows, shadowGenerator, truncated, y, z;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseMove = bind(this.onMouseMove, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        this.resized();
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        hemi = new HemisphericLight('hemi', new Vect(0, 1, 0), this.scene);
        hemi.intensity = 0.5;
        light = new DirectionalLight('light', new Vector3(0, -1, 0), this.scene);
        light.position.y = 3;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.bias = 0.0002;
        shadowGenerator.darkness = 0.8;
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround('ground', {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial('mat', this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.cursor = MeshBuilder.CreateIcoSphere('cursor', {
            flat: false,
            radius: 0.99
        }, this.scene);
        this.cursor.material = new StandardMaterial('mat', this.scene);
        this.cursor.material.diffuseColor = new Color3(0.05, 0.05, 0.05);
        this.cursor.material.alpha = 0.25;
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointerup', this.onMouseUp);
        if (0) {
            names = ['tetrahedron', 'cube', 'octahedron', 'dodecahedron', 'icosahedron', 'cuboctahedron', 'icosidodecahedron', 'truncatedicosidodecahedron', 'rhombicosidodecahedron', 'rhombicubocahedron', 'snubicosidodecahedron', 'snubcuboctahedron'];
            for (j = k = 0, len = names.length; k < len; j = ++k) {
                m = names[j];
                for (i = l = 0; l <= 10; i = ++l) {
                    truncated = Poly.truncate(Poly[m](), i * 0.1);
                    p = Mesh.CreatePolyhedron(m, {
                        custom: truncated
                    }, this.scene);
                    p.receiveShadows = true;
                    p.convertToFlatShadedMesh();
                    p.position.x = 3 * j;
                    p.position.z = 3 * i;
                    p.position.y = -2;
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    p.material.diffuseColor = new Color3(i / 12, (j / 6) % 1, 1 - j / 12);
                }
            }
        }
        guiTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI('ui');
        z = 0;
        rows = [['T', 'C', 'O', 'D', 'I'], ['c(0.2)T', 'c0.7T', 'cT', 'c1T', 'c(1.5)T'], ['c1T', 'v10000cC', 'cO', 'vcD', 'vcI'], ['dT', 'dC', 'dO', 'dD', 'dI'], ['aT', 'aC', 'aO', 'aD', 'aI'], ['kT', 'kC', 'kO', 'kD', 'kI'], ['v100gT', 'v100gC', 'v100gO', 'v100gD', 'v100gI'], ['rT', 'rC', 'rO', 'rD', 'rI'], ['v100wT', 'v100wC', 'v100wO', 'v100wD', 'v100wI'], ['nT', 'nC', 'nO', 'nD', 'nI'], ['xT', 'xC', 'xO', 'xD', 'xI'], ['pT', 'pC', 'pO', 'pD', 'pI'], ['qT', 'qC', 'qO', 'qD', 'qI'], ['hT', 'hC', 'hO', 'hD', 'hI'], ['uT', 'uC', 'uO', 'uD', 'uI'], ['eT', 'eC', 'eO', 'eD', 'eI'], ['jT', 'jC', 'jO', 'jD', 'jI'], ['sT', 'sC', 'sO', 'sD', 'sI'], ['dzdk(0,-0.5)dT', 'dzdk(0,-0.3)dT', 'dzdk(0,0)dT', 'dzdk(0,0.8)dT', 'dzdk(0,1.2)dT'], ['dk(3,0.1)ztT', 'dk(3,-0.3)ztT', 'dk(3,-0.4)ztT', 'dk(3,-0.45)ztT', 'dk(3,-0.5)ztT'], ['x(0,1)T', 'x(0,2)C', 'x(0,3)O', 'x(0,4)D', 'x(0,5)I'], ['x(3,1,0)n(0,0.5,0)T', 'n(0,0.5,-0.3)C', 'n(0,0.25,-0.1)O', 'n(0,0.8,-0.2)D', 'nI'], ['ztT', 'ztC', 'ztO', 'ztD', 'ztI'], ['dztT', 'dztC', 'dztO', 'dztD', 'dztI'], ['dk(3,0.1)ztT', 't3dztC', 't4dztO', 't3dztD', 't5dztI', 't6dztI'], ['kT', 'jC', 'kO', 'kC', 'oC', 'mC', 'gC', 'jD', 'kI', 'kD', 'oD', 'mD', 'gD']];
        for (n = 0, len1 = rows.length; n < len1; n++) {
            row = rows[n];
            j = 0;
            z++;
            for (o = 0, len2 = row.length; o < len2; o++) {
                code = row[o];
                j++;
                ref2 = [''];
                for (y = q = 0, len3 = ref2.length; q < len3; y = ++q) {
                    d = ref2[y];
                    poly = generate(d + code);
                    p = Mesh.CreatePolyhedron(code, {
                        custom: poly
                    }, this.scene);
                    this.scene.showFaces(p, poly);
                    p.receiveShadows = true;
                    p.position.x = 3 * j;
                    p.position.z = 3 * z;
                    p.position.y = y * 3;
                    p.rotate(Vect.unitX, deg2rad(-90));
                    shadowGenerator.addShadowCaster(p);
                    p.material = new StandardMaterial('mat', this.scene);
                    p.material.alpha = 1;
                    p.material.diffuseColor = new Color3(i / 12, (j / 6) % 1, 1 - j / 12);
                }
            }
        }
    }

    World.prototype.onMouseDown = function(event) {
        var result;
        window.addEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (event.buttons & 2 && result.pickedMesh.name !== 'ground') {
            this.mouseDownMesh = result.pickedMesh;
        } else {
            this.mouseDownMesh = null;
        }
        return this.camera.onMouseDown(event);
    };

    World.prototype.onMouseMove = function(event) {
        return this.camera.onMouseDrag(event);
    };

    World.prototype.onMouseUp = function(event) {
        var mesh, ref2, result;
        window.removeEventListener('pointermove', this.onMouseMove);
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (mesh = result.pickedMesh) {
            if (mesh.name !== 'ground' && mesh === this.mouseDownMesh) {
                if ((ref2 = mesh.name) === 'faces' || ref2 === 'normals') {
                    klog(mesh.parent.name);
                } else {
                    klog(mesh.name);
                }
                this.cursor.position = mesh.getAbsolutePosition();
                this.camera.fadeToPos(mesh.getAbsolutePosition());
            } else {
                if (!this.mouseDownMesh) {
                    this.cursor.position = new Vect(0, 0, 0);
                }
            }
        }
        return this.camera.onMouseUp(event);
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            this.scene.render();
            return animate.tick(this.engine.getDeltaTime() / 1000);
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        return this.canvas.height = this.view.clientHeight;
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.moveUp();
            case 'q':
                return this.camera.moveDown();
            case 'a':
                return this.camera.moveLeft();
            case 'd':
                return this.camera.moveRight();
            case 'w':
                return this.camera.moveForward();
            case 's':
                return this.camera.moveBackward();
            case 'x':
            case 'esc':
                return this.camera.stopMoving();
        }
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        switch (key) {
            case 'e':
                return this.camera.stopUp();
            case 'q':
                return this.camera.stopDown();
            case 'a':
                return this.camera.stopLeft();
            case 'd':
                return this.camera.stopRight();
            case 'w':
                return this.camera.stopForward();
            case 's':
                return this.camera.stopBackward();
        }
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee