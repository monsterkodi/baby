// koffee 1.6.0

/*
000   000   0000000   00000000   000      0000000    
000 0 000  000   000  000   000  000      000   000  
000000000  000   000  0000000    000      000   000  
000   000  000   000  000   000  000      000   000  
00     00   0000000   000   000  0000000  0000000
 */
var AmbientLight, ArcRotateCamera, Camera, Color3, DirectionalLight, Engine, FramingBehavior, HemisphericLight, Mesh, MeshBuilder, Poly, Scene, ShadowGenerator, SimplificationType, SpotLight, StandardMaterial, Vect, Vector3, World, elem, klog, prefs, ref, ref1,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('kxk'), prefs = ref.prefs, elem = ref.elem, klog = ref.klog;

ref1 = require('babylonjs'), ArcRotateCamera = ref1.ArcRotateCamera, FramingBehavior = ref1.FramingBehavior, Engine = ref1.Engine, Scene = ref1.Scene, Color3 = ref1.Color3, Vector3 = ref1.Vector3, Mesh = ref1.Mesh, SimplificationType = ref1.SimplificationType, DirectionalLight = ref1.DirectionalLight, AmbientLight = ref1.AmbientLight, ShadowGenerator = ref1.ShadowGenerator, StandardMaterial = ref1.StandardMaterial, MeshBuilder = ref1.MeshBuilder, HemisphericLight = ref1.HemisphericLight, SpotLight = ref1.SpotLight;

Poly = require('./poly');

Vect = require('./vect');

Camera = require('./camera');

World = (function() {
    function World(view) {
        var a, ground, i, j, k, l, light, light0, m, n, o, p, shadowGenerator, truncated;
        this.view = view;
        this.resized = bind(this.resized, this);
        this.animate = bind(this.animate, this);
        this.onMouseUp = bind(this.onMouseUp, this);
        this.onMouseDown = bind(this.onMouseDown, this);
        this.paused = false;
        this.view.focus();
        this.canvas = elem('canvas', {
            "class": 'babylon',
            parent: this.view
        });
        window.addEventListener('pointerdown', this.onMouseDown);
        window.addEventListener('pointerup', this.onMouseUp);
        this.resized();
        this.engine = new Engine(this.canvas, true);
        this.scene = new Scene(this.engine);
        a = 0.06;
        this.scene.clearColor = new Color3(a, a, a);
        this.camera = new Camera(this.scene, this.view, this.canvas);
        light0 = new HemisphericLight('light1', new Vect(0, 1, 0), this.scene);
        light0.intensity = 1;
        light = new DirectionalLight('light', new Vect(0, -1, 0), this.scene);
        light.position.y = 100;
        light.intensity = 0.1;
        shadowGenerator = new ShadowGenerator(8 * 1024, light);
        shadowGenerator.useExponentialShadowMap = true;
        shadowGenerator.usePoissonSampling = true;
        shadowGenerator.usePercentageCloserFiltering = true;
        shadowGenerator.useContactHardeningShadow = true;
        ground = MeshBuilder.CreateGround("ground", {
            width: 1000,
            height: 1000,
            subdivisions: 4
        }, this.scene);
        ground.material = new StandardMaterial("mat", this.scene);
        ground.material.specularColor = new Color3(0.05, 0.05, 0.05);
        a = 0.05;
        ground.material.diffuseColor = new Color3(a, a, a);
        ground.receiveShadows = true;
        ground.position.y = -4;
        this.engine.runRenderLoop(this.animate);
        if (prefs.get('inspector')) {
            this.toggleInspector();
        }
        for (i = j = 0; j <= 10; i = ++j) {
            truncated = Poly.truncate(Poly.cuboctahedron(), i * 0.1);
            p = Mesh.CreatePolyhedron("cuboctahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.x = 15;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(0, 1, 0);
        }
        for (i = k = 0; k <= 10; i = ++k) {
            truncated = Poly.truncate(Poly.tetrahedron(), i * 0.1);
            p = Mesh.CreatePolyhedron("icosahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(0, 1, 1);
        }
        for (i = l = 0; l <= 10; i = ++l) {
            truncated = Poly.truncate(Poly.cube(), i * 0.1);
            p = Mesh.CreatePolyhedron("icosahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.x = 3;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(1, 0, 1);
        }
        for (i = m = 0; m <= 10; i = ++m) {
            truncated = Poly.truncate(Poly.octahedron(), i * 0.1);
            p = Mesh.CreatePolyhedron("icosahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.x = 6;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(1, 1, 0);
        }
        for (i = n = 0; n <= 10; i = ++n) {
            truncated = Poly.truncate(Poly.dodecahedron(), i * 0.1);
            p = Mesh.CreatePolyhedron("icosahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.x = 9;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(0, 0, 1);
        }
        for (i = o = 0; o <= 10; i = ++o) {
            truncated = Poly.truncate(Poly.icosahedron(), i * 0.1);
            p = Mesh.CreatePolyhedron("icosahedron", {
                custom: truncated
            }, this.scene);
            p.convertToFlatShadedMesh();
            p.receiveShadows = true;
            p.position.x = 12;
            p.position.z = -3 * (i - 0);
            shadowGenerator.addShadowCaster(p);
            p.material = new StandardMaterial('mat', this.scene);
            p.material.alpha = 0.8;
            p.material.diffuseColor = new Color3(1, 0, 0);
        }
    }

    World.prototype.onMouseDown = function(event) {
        var result;
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        return this.mouseDownMesh = result.pickedMesh;
    };

    World.prototype.onMouseUp = function(event) {
        var mesh, result;
        result = this.scene.pick(this.scene.pointerX, this.scene.pointerY);
        if (mesh = result.pickedMesh) {
            if (mesh.name !== 'ground' && mesh === this.mouseDownMesh) {
                return this.camera.setTarget(mesh.getAbsolutePosition());
            }
        }
    };

    World.prototype.toggleInspector = function() {
        if (this.scene.debugLayer.isVisible()) {
            this.scene.debugLayer.hide();
            return prefs.set('inspector', false);
        } else {
            this.scene.debugLayer.show({
                overlay: true,
                showInspector: true
            });
            return prefs.set('inspector', true);
        }
    };

    World.prototype.start = function() {
        return this.view.focus();
    };

    World.prototype.animate = function() {
        if (!this.paused) {
            return this.scene.render();
        }
    };

    World.prototype.resized = function() {
        this.canvas.width = this.view.clientWidth;
        return this.canvas.height = this.view.clientHeight;
    };

    World.prototype.modKeyComboEventDown = function(mod, key, combo, event) {
        return klog('modKeyComboEventDown', mod, key, combo, event);
    };

    World.prototype.modKeyComboEventUp = function(mod, key, combo, event) {
        return klog('modKeyComboEventUp', mod, key, combo, event);
    };

    return World;

})();

module.exports = World;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/world.coffee