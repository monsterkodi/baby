// koffee 1.6.0

/*
 0000000   000   000   0000000   000000000
000   000  000   000  000   000     000   
000 00 00  000   000  000000000     000   
000 0000   000   000  000   000     000   
 00000 00   0000000   000   000     000
 */
var Quat, Quaternion, Vector,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

Vector = require('./vector');

Quaternion = require('babylonjs').Quaternion;

Quat = (function(superClass) {
    extend(Quat, superClass);

    Quat.tmp = new Quat;

    Quat.counter = 0;

    function Quat(x, y, z, w) {
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        if (w == null) {
            w = 1;
        }
        Quat.counter++;
        if (x instanceof Vector) {
            Quat.__super__.constructor.call(this, x.x, x.y, x.z, 0);
        } else if (x instanceof Quat || x instanceof Quaternion) {
            Quat.__super__.constructor.call(this, x.x, x.y, x.z, x.w);
        } else if (Array.isArray(w)) {
            Quat.__super__.constructor.call(this, w[0], w[1], w[2], w[3]);
        } else {
            Quat.__super__.constructor.call(this, x, y, z, w);
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Quat.unitVectors = function(n1, n2) {
        Quat.tmp.setFromUnitVectors(n1, n2);
        return Quat.tmp;
    };

    Quat.axisAngle = function(axis, angle) {
        Quat.tmp.setFromAxisAngle(axis, deg2rad(angle));
        return Quat.tmp;
    };

    Quat.prototype.rotateAxisAngle = function(axis, angle) {
        this.multiply(Quat.axisAngle(axis, angle));
        return this;
    };

    Quat.prototype.clone = function() {
        return new Quat(this);
    };

    Quat.prototype.copy = function(q) {
        this.x = q.x;
        this.y = q.y;
        this.z = q.z;
        this.w = q.w;
        return this;
    };

    Quat.prototype.rounded = function() {
        var back, backDiff, i, l, len, minDist, minQuat, q, ref, up, upDiff;
        minDist = 1000;
        minQuat = null;
        up = this.rotate(Vector.unitY);
        back = this.rotate(Vector.unitZ);
        ref = [Quat.XupY, Quat.XupZ, Quat.XdownY, Quat.XdownZ, Quat.YupX, Quat.YupZ, Quat.YdownX, Quat.YdownZ, Quat.ZupX, Quat.ZupY, Quat.ZdownX, Quat.ZdownY, Quat.minusXupY, Quat.minusXupZ, Quat.minusXdownY, Quat.minusXdownZ, Quat.minusYupX, Quat.minusYupZ, Quat.minusYdownX, Quat.minusYdownZ, Quat.minusZupX, Quat.minusZupY, Quat.minusZdownX, Quat.minusZdownY];
        for (i = 0, len = ref.length; i < len; i++) {
            q = ref[i];
            upDiff = 1 - up.dot(q.rotate(Vector.unitY));
            backDiff = 1 - back.dot(q.rotate(Vector.unitZ));
            l = upDiff + backDiff;
            if (l < minDist) {
                minDist = l;
                minQuat = q;
                if (l < 0.0001) {
                    break;
                }
            }
        }
        return minQuat;
    };

    Quat.prototype.round = function() {
        return this.clone(this.normalize().rounded());
    };

    Quat.prototype.euler = function() {
        return [rad2deg(Math.atan2(2 * (this.w * this.x + this.y * this.z), 1 - 2 * (this.x * this.x + this.y * this.y))), rad2deg(Math.asin(2 * (this.w * this.y - this.z * this.x))), rad2deg(Math.atan2(2 * (this.w * this.z + this.x * this.y), 1 - 2 * (this.y * this.y + this.z * this.z)))];
    };

    Quat.prototype.add = function(quat) {
        this.w += quat.w;
        this.x += quat.x;
        this.y += quat.y;
        this.z += quat.z;
        return this;
    };

    Quat.prototype.sub = function(quat) {
        this.w -= quat.w;
        this.x -= quat.x;
        this.y -= quat.y;
        this.z -= quat.z;
        return this;
    };

    Quat.prototype.minus = function(quat) {
        return this.clone().sub(quat);
    };

    Quat.prototype.dot = function(q) {
        return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
    };

    Quat.prototype.rotate = function(v) {
        return vec(v).applyQuaternion(this);
    };

    Quat.prototype.normalize = function() {
        var l;
        l = Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x /= l;
            this.y /= l;
            this.z /= l;
        }
        return this;
    };

    Quat.prototype.invert = function() {
        var l;
        l = Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
        if (l !== 0.0) {
            this.w /= l;
            this.x = -this.x / l;
            this.y = -this.y / l;
            this.z = -this.z / l;
        }
        return this;
    };

    Quat.prototype.isZero = function() {
        var ref, ref1;
        return ((this.x === (ref1 = this.y) && ref1 === (ref = this.z)) && ref === 0) && this.w === 1;
    };

    Quat.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        this.w = 1;
        return this;
    };

    Quat.prototype.conjugate = function() {
        this.x = -this.x;
        this.y = -this.y;
        this.z = -this.z;
        return this;
    };

    Quat.prototype.getNormal = function() {
        return this.clone().normalize();
    };

    Quat.prototype.getConjugate = function() {
        return this.clone().conjugate();
    };

    Quat.prototype.getInverse = function() {
        return this.clone().invert();
    };

    Quat.prototype.neg = function() {
        return new Quat(-this.w, -this.x, -this.y, -this.z);
    };

    Quat.prototype.vector = function() {
        return new Vector(this.x, this.y, this.z);
    };

    Quat.prototype.length = function() {
        return Math.sqrt(this.w * this.w + this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Quat.prototype.eql = function(q) {
        return this.w === q.w && (this.x = q.x && this.y === q.y && this.z === q.z);
    };

    Quat.prototype.mul = function(quatOrScalar) {
        var A, B, C, D, E, F, G, H, f, quat;
        if (quatOrScalar instanceof Quat) {
            quat = quatOrScalar;
            A = (this.w + this.x) * (quat.w + quat.x);
            B = (this.z - this.y) * (quat.y - quat.z);
            C = (this.w - this.x) * (quat.y + quat.z);
            D = (this.y + this.z) * (quat.w - quat.x);
            E = (this.x + this.z) * (quat.x + quat.y);
            F = (this.x - this.z) * (quat.x - quat.y);
            G = (this.w + this.y) * (quat.w - quat.z);
            H = (this.w - this.y) * (quat.w + quat.z);
            return new Quaternion(B + (-E - F + G + H) / 2, A - (E + F + G + H) / 2, C + (E - F + G - H) / 2, D + (E - F - G + H) / 2);
        } else {
            f = parseFloat(quatOrScalar);
            return new Quaternion(this.w * f, this.x * f, this.y * f, this.z * f);
        }
    };

    Quat.prototype.slerp = function(quat, t) {
        var cosom, omega, scale0, scale1, sinom, to1;
        to1 = [0, 0, 0, 0];
        cosom = this.x * quat.x + this.y * quat.y + this.z * quat.z + this.w * quat.w;
        if (cosom < 0) {
            cosom = -cosom;
            to1[0] = -quat.x;
            to1[1] = -quat.y;
            to1[2] = -quat.z;
            to1[3] = -quat.w;
        } else {
            to1[0] = quat.x;
            to1[1] = quat.y;
            to1[2] = quat.z;
            to1[3] = quat.w;
        }
        if ((1.0 - cosom) > 0.001) {
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
        } else {
            scale0 = 1.0 - t;
            scale1 = t;
        }
        return new Quaternion(scale0 * this.w + scale1 * to1[3], scale0 * this.x + scale1 * to1[0], scale0 * this.y + scale1 * to1[1], scale0 * this.z + scale1 * to1[2]);
    };

    Quat.rotationAroundVector = function(theta, x, y, z) {
        var s, t, v;
        v = new Vector(x, y, z);
        v.normalize();
        t = deg2rad(theta) / 2.0;
        s = Math.sin(t);
        return (new Quat(Math.cos(t), v.x * s, v.y * s, v.z * s)).normalize();
    };

    Quat.rotationFromEuler = function(x, y, z) {
        var q;
        x = deg2rad(x);
        y = deg2rad(y);
        z = deg2rad(z);
        q = new Quaternion(Math.cos(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.sin(y / 2) * Math.sin(z / 2), Math.sin(x / 2) * Math.cos(y / 2) * Math.cos(z / 2) - Math.cos(x / 2) * Math.sin(y / 2) * Math.sin(z / 2), Math.cos(x / 2) * Math.sin(y / 2) * Math.cos(z / 2) + Math.sin(x / 2) * Math.cos(y / 2) * Math.sin(z / 2), Math.cos(x / 2) * Math.cos(y / 2) * Math.sin(z / 2) - Math.sin(x / 2) * Math.sin(y / 2) * Math.cos(z / 2));
        return q.normalize();
    };

    Quat.rot_0 = new Quat();

    Quat.rot_90_X = Quat.rotationAroundVector(90, Vector.unitX);

    Quat.rot_90_Y = Quat.rotationAroundVector(90, Vector.unitY);

    Quat.rot_90_Z = Quat.rotationAroundVector(90, Vector.unitZ);

    Quat.rot_180_X = Quat.rotationAroundVector(180, Vector.unitX);

    Quat.rot_180_Y = Quat.rotationAroundVector(180, Vector.unitY);

    Quat.rot_180_Z = Quat.rotationAroundVector(180, Vector.unitZ);

    Quat.rot_270_X = Quat.rotationAroundVector(270, Vector.unitX);

    Quat.rot_270_Y = Quat.rotationAroundVector(270, Vector.unitY);

    Quat.rot_270_Z = Quat.rotationAroundVector(270, Vector.unitZ);

    Quat.minusXupY = Quat.rot_270_Y;

    Quat.minusXupZ = Quat.rot_90_X.mul(Quat.rot_270_Y);

    Quat.minusXdownY = Quat.rot_180_X.mul(Quat.rot_270_Y);

    Quat.minusXdownZ = Quat.rot_270_X.mul(Quat.rot_270_Y);

    Quat.minusYupX = Quat.rot_90_Y.mul(Quat.rot_90_X);

    Quat.minusYupZ = Quat.rot_90_X;

    Quat.minusYdownX = Quat.rot_270_Y.mul(Quat.rot_90_X);

    Quat.minusYdownZ = Quat.rot_180_Y.mul(Quat.rot_90_X);

    Quat.ZupX = Quat.rot_270_Z;

    Quat.ZupY = Quat.rot_0;

    Quat.ZdownX = Quat.rot_90_Z;

    Quat.ZdownY = Quat.rot_180_Z;

    Quat.XupY = Quat.rot_90_Y;

    Quat.XupZ = Quat.rot_90_X.mul(Quat.rot_90_Y);

    Quat.XdownY = Quat.rot_180_X.mul(Quat.rot_90_Y);

    Quat.XdownZ = Quat.rot_270_X.mul(Quat.rot_90_Y);

    Quat.YupX = Quat.rot_270_Y.mul(Quat.rot_270_X);

    Quat.YupZ = Quat.rot_180_Y.mul(Quat.rot_270_X);

    Quat.YdownX = Quat.rot_90_Y.mul(Quat.rot_270_X);

    Quat.YdownZ = Quat.rot_270_X;

    Quat.minusZupX = Quat.rot_90_Z.mul(Quat.rot_180_X);

    Quat.minusZupY = Quat.rot_180_Z.mul(Quat.rot_180_X);

    Quat.minusZdownX = Quat.rot_270_Z.mul(Quat.rot_180_X);

    Quat.minusZdownY = Quat.rot_180_X;

    Quat.rot_0.name = 'rot_0';

    Quat.rot_90_X.name = 'rot_90_X';

    Quat.rot_90_Y.name = 'rot_90_Y';

    Quat.rot_90_Z.name = 'rot_90_Z';

    Quat.rot_180_X.name = 'rot_180_X';

    Quat.rot_180_Y.name = 'rot_180_Y';

    Quat.rot_180_Z.name = 'rot_180_Z';

    Quat.rot_270_X.name = 'rot_270_X';

    Quat.rot_270_Y.name = 'rot_270_Y';

    Quat.rot_270_Z.name = 'rot_270_Z';

    Quat.XupY.name = 'XupY';

    Quat.XupZ.name = 'XupZ';

    Quat.XdownY.name = 'XdownY';

    Quat.XdownZ.name = 'XdownZ';

    Quat.YupX.name = 'YupX';

    Quat.YupZ.name = 'YupZ';

    Quat.YdownX.name = 'YdownX';

    Quat.YdownZ.name = 'YdownZ';

    Quat.ZupX.name = 'ZupX';

    Quat.ZupY.name = 'ZupY';

    Quat.ZdownX.name = 'ZdownX';

    Quat.ZdownY.name = 'ZdownY';

    Quat.minusXupY.name = 'minusXupY';

    Quat.minusXupZ.name = 'minusXupZ';

    Quat.minusXdownY.name = 'minusXdownY';

    Quat.minusXdownZ.name = 'minusXdownZ';

    Quat.minusYupX.name = 'minusYupX';

    Quat.minusYupZ.name = 'minusYupZ';

    Quat.minusYdownX.name = 'minusYdownX';

    Quat.minusYdownZ.name = 'minusYdownZ';

    Quat.minusZupX.name = 'minusZupX';

    Quat.minusZupY.name = 'minusZupY';

    Quat.minusZdownX.name = 'minusZdownX';

    Quat.minusZdownY.name = 'minusZdownY';

    return Quat;

})(Quaternion);

module.exports = Quat;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVhdGVybmlvbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsd0JBQUE7SUFBQTs7O0FBUUEsTUFBQSxHQUFTLE9BQUEsQ0FBUSxVQUFSOztBQUNQLGFBQWUsT0FBQSxDQUFRLFdBQVI7O0FBRVg7OztJQUVGLElBQUMsQ0FBQSxHQUFELEdBQU8sSUFBSTs7SUFDWCxJQUFDLENBQUEsT0FBRCxHQUFXOztJQUVSLGNBQUMsQ0FBRCxFQUFNLENBQU4sRUFBVyxDQUFYLEVBQWdCLENBQWhCOztZQUFDLElBQUU7OztZQUFHLElBQUU7OztZQUFHLElBQUU7OztZQUFHLElBQUU7O1FBRWpCLElBQUksQ0FBQyxPQUFMO1FBRUEsSUFBRyxDQUFBLFlBQWEsTUFBaEI7WUFDSSxzQ0FBTSxDQUFDLENBQUMsQ0FBUixFQUFXLENBQUMsQ0FBQyxDQUFiLEVBQWdCLENBQUMsQ0FBQyxDQUFsQixFQUFxQixDQUFyQixFQURKO1NBQUEsTUFFSyxJQUFHLENBQUEsWUFBYSxJQUFiLElBQXFCLENBQUEsWUFBYSxVQUFyQztZQUNELHNDQUFNLENBQUMsQ0FBQyxDQUFSLEVBQVcsQ0FBQyxDQUFDLENBQWIsRUFBZ0IsQ0FBQyxDQUFDLENBQWxCLEVBQXFCLENBQUMsQ0FBQyxDQUF2QixFQURDO1NBQUEsTUFFQSxJQUFHLEtBQUssQ0FBQyxPQUFOLENBQWMsQ0FBZCxDQUFIO1lBQ0Qsc0NBQU0sQ0FBRSxDQUFBLENBQUEsQ0FBUixFQUFZLENBQUUsQ0FBQSxDQUFBLENBQWQsRUFBa0IsQ0FBRSxDQUFBLENBQUEsQ0FBcEIsRUFBd0IsQ0FBRSxDQUFBLENBQUEsQ0FBMUIsRUFEQztTQUFBLE1BQUE7WUFHRCxzQ0FBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBSEM7O1FBSUwsSUFBRyxNQUFNLENBQUMsS0FBUCxDQUFhLElBQUMsQ0FBQSxDQUFkLENBQUg7QUFDSSxr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Q0FBQSxHQUFFLENBQVgsQ0FBQSxHQUFnQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBQWhCLEdBQWdDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FBaEMsR0FBZ0QsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFBLEdBQWdCLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FBaEIsR0FBZ0MsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFoRyxFQUNnQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBQUEsR0FBZ0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFoQixHQUFnQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBQWhDLEdBQWdELElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FBQSxHQUFnQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBQWhCLEdBQWdDLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FEaEcsRUFFZ0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFBLEdBQWdCLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FBaEIsR0FBZ0MsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFoQyxHQUFnRCxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBQUEsR0FBZ0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFBLEdBQUUsQ0FBWCxDQUFoQixHQUFnQyxJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFYLENBRmhHLEVBR2dCLElBQUksQ0FBQyxHQUFMLENBQVMsQ0FBQSxHQUFFLENBQVgsQ0FBQSxHQUFnQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUEsR0FBRSxDQUFY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LFdBQVcsQ0FBQyxJQUFiLEdBQW9COztJQUNwQixJQUFDLENBQUEsV0FBVyxDQUFDLElBQWIsR0FBb0I7Ozs7R0FuU0w7O0FBcVNuQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICBcbjAwMCAwMCAwMCAgMDAwICAgMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgIFxuMDAwIDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgXG4gMDAwMDAgMDAgICAwMDAwMDAwICAgMDAwICAgMDAwICAgICAwMDAgICBcbiMjI1xuXG5WZWN0b3IgPSByZXF1aXJlICcuL3ZlY3RvcidcbnsgUXVhdGVybmlvbiB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xuXG5jbGFzcyBRdWF0IGV4dGVuZHMgUXVhdGVybmlvblxuXG4gICAgQHRtcCA9IG5ldyBRdWF0XG4gICAgQGNvdW50ZXIgPSAwXG4gICAgXG4gICAgQDogKHg9MCwgeT0wLCB6PTAsIHc9MSkgLT5cbiAgICAgICAgXG4gICAgICAgIFF1YXQuY291bnRlcisrXG4gICAgICAgIFxuICAgICAgICBpZiB4IGluc3RhbmNlb2YgVmVjdG9yXG4gICAgICAgICAgICBzdXBlciB4LngsIHgueSwgeC56LCAwXG4gICAgICAgIGVsc2UgaWYgeCBpbnN0YW5jZW9mIFF1YXQgb3IgeCBpbnN0YW5jZW9mIFF1YXRlcm5pb25cbiAgICAgICAgICAgIHN1cGVyIHgueCwgeC55LCB4LnosIHgud1xuICAgICAgICBlbHNlIGlmIEFycmF5LmlzQXJyYXkgd1xuICAgICAgICAgICAgc3VwZXIgd1swXSwgd1sxXSwgd1syXSwgd1szXVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBzdXBlciB4LCB5LCB6LCB3XG4gICAgICAgIGlmIE51bWJlci5pc05hTiBAeFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yXG4gICAgICAgIFxuICAgIEB1bml0VmVjdG9yczogKG4xLCBuMikgLT4gXG4gICAgICAgIFxuICAgICAgICBRdWF0LnRtcC5zZXRGcm9tVW5pdFZlY3RvcnMgbjEsIG4yXG4gICAgICAgIFF1YXQudG1wXG4gICAgICAgICAgICBcbiAgICBAYXhpc0FuZ2xlOiAoYXhpcywgYW5nbGUpIC0+IFxuICAgICAgICBcbiAgICAgICAgUXVhdC50bXAuc2V0RnJvbUF4aXNBbmdsZSBheGlzLCBkZWcycmFkIGFuZ2xlXG4gICAgICAgIFF1YXQudG1wXG4gICAgICAgICAgICBcbiAgICByb3RhdGVBeGlzQW5nbGU6IChheGlzLCBhbmdsZSkgLT5cbiAgICAgICAgXG4gICAgICAgIEBtdWx0aXBseSBRdWF0LmF4aXNBbmdsZSBheGlzLCBhbmdsZVxuICAgICAgICBAXG4gICAgICAgICAgICBcbiAgICBjbG9uZTogLT4gbmV3IFF1YXQgQFxuICAgIGNvcHk6IChxKSAtPlxuICAgICAgICBAeCA9IHEueFxuICAgICAgICBAeSA9IHEueVxuICAgICAgICBAeiA9IHEuelxuICAgICAgICBAdyA9IHEud1xuICAgICAgICBAXG4gICAgICAgIFxuICAgIHJvdW5kZWQ6IC0+ICAgICAgICBcbiAgICAgICAgbWluRGlzdCA9IDEwMDBcbiAgICAgICAgbWluUXVhdCA9IG51bGxcbiAgICAgICAgdXAgICA9IEByb3RhdGUgVmVjdG9yLnVuaXRZXG4gICAgICAgIGJhY2sgPSBAcm90YXRlIFZlY3Rvci51bml0WlxuICAgICAgICBmb3IgcSBpbiBbICBRdWF0Llh1cFlcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5YdXBaXG4gICAgICAgICAgICAgICAgICAgIFF1YXQuWGRvd25ZXG4gICAgICAgICAgICAgICAgICAgIFF1YXQuWGRvd25aXG4gICAgICAgICAgICAgICAgICAgIFF1YXQuWXVwWFxuICAgICAgICAgICAgICAgICAgICBRdWF0Lll1cFpcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5ZZG93blhcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5ZZG93blpcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5adXBYXG4gICAgICAgICAgICAgICAgICAgIFF1YXQuWnVwWVxuICAgICAgICAgICAgICAgICAgICBRdWF0Llpkb3duWFxuICAgICAgICAgICAgICAgICAgICBRdWF0Llpkb3duWVxuICAgICAgICAgICAgICAgICAgICBRdWF0Lm1pbnVzWHVwWVxuICAgICAgICAgICAgICAgICAgICBRdWF0Lm1pbnVzWHVwWlxuICAgICAgICAgICAgICAgICAgICBRdWF0Lm1pbnVzWGRvd25ZXG4gICAgICAgICAgICAgICAgICAgIFF1YXQubWludXNYZG93blpcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5taW51c1l1cFhcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5taW51c1l1cFpcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5taW51c1lkb3duWFxuICAgICAgICAgICAgICAgICAgICBRdWF0Lm1pbnVzWWRvd25aXG4gICAgICAgICAgICAgICAgICAgIFF1YXQubWludXNadXBYXG4gICAgICAgICAgICAgICAgICAgIFF1YXQubWludXNadXBZXG4gICAgICAgICAgICAgICAgICAgIFF1YXQubWludXNaZG93blhcbiAgICAgICAgICAgICAgICAgICAgUXVhdC5taW51c1pkb3duWVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB1cERpZmYgICA9IDEgLSB1cC5kb3QgcS5yb3RhdGUgVmVjdG9yLnVuaXRZXG4gICAgICAgICAgICBiYWNrRGlmZiA9IDEgLSBiYWNrLmRvdCBxLnJvdGF0ZSBWZWN0b3IudW5pdFpcbiAgICAgICAgICAgIGwgPSB1cERpZmYgKyBiYWNrRGlmZlxuICAgICAgICAgICAgaWYgbCA8IG1pbkRpc3RcbiAgICAgICAgICAgICAgICBtaW5EaXN0ID0gbFxuICAgICAgICAgICAgICAgIG1pblF1YXQgPSBxXG4gICAgICAgICAgICAgICAgaWYgbCA8IDAuMDAwMVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICBtaW5RdWF0XG4gICAgICAgIFxuICAgIHJvdW5kOiAtPiBAY2xvbmUgQG5vcm1hbGl6ZSgpLnJvdW5kZWQoKVxuXG4gICAgZXVsZXI6IC0+IFtcbiAgICAgICAgcmFkMmRlZyBNYXRoLmF0YW4yIDIqKEB3KkB4K0B5KkB6KSwgMS0yKihAeCpAeCtAeSpAeSlcbiAgICAgICAgcmFkMmRlZyBNYXRoLmFzaW4gIDIqKEB3KkB5LUB6KkB4KVxuICAgICAgICByYWQyZGVnIE1hdGguYXRhbjIgMiooQHcqQHorQHgqQHkpLCAxLTIqKEB5KkB5K0B6KkB6KV1cblxuICAgIGFkZDogKHF1YXQpIC0+XG4gICAgICAgIEB3ICs9IHF1YXQudyBcbiAgICAgICAgQHggKz0gcXVhdC54IFxuICAgICAgICBAeSArPSBxdWF0LnkgXG4gICAgICAgIEB6ICs9IHF1YXQuelxuICAgICAgICBAXG4gICAgXG4gICAgc3ViOiAocXVhdCkgLT5cbiAgICAgICAgQHcgLT0gcXVhdC53IFxuICAgICAgICBAeCAtPSBxdWF0LnggXG4gICAgICAgIEB5IC09IHF1YXQueSBcbiAgICAgICAgQHogLT0gcXVhdC56XG4gICAgICAgIEBcbiAgICBcbiAgICBtaW51czogKHF1YXQpIC0+IEBjbG9uZSgpLnN1YiBxdWF0XG5cbiAgICBkb3Q6IChxKSAtPiBAeCpxLnggKyBAeSpxLnkgKyBAeipxLnogKyBAdypxLndcblxuICAgIHJvdGF0ZTogKHYpIC0+IHZlYyh2KS5hcHBseVF1YXRlcm5pb24gQFxuICAgICAgICAgICAgICAgIFxuICAgIG5vcm1hbGl6ZTogLT5cbiAgICAgICAgbCA9IE1hdGguc3FydCBAdypAdyArIEB4KkB4ICsgQHkqQHkgKyBAeipAeiBcbiAgICAgICAgaWYgbCAhPSAwLjBcbiAgICAgICAgICAgIEB3IC89IGwgXG4gICAgICAgICAgICBAeCAvPSBsIFxuICAgICAgICAgICAgQHkgLz0gbCBcbiAgICAgICAgICAgIEB6IC89IGxcbiAgICAgICAgQFxuXG4gICAgaW52ZXJ0OiAtPlxuICAgICAgICBsID0gTWF0aC5zcXJ0IEB3KkB3ICsgQHgqQHggKyBAeSpAeSArIEB6KkB6IFxuICAgICAgICBpZiBsICE9IDAuMCBcbiAgICAgICAgICAgIEB3IC89IGwgXG4gICAgICAgICAgICBAeCA9IC1AeC9sXG4gICAgICAgICAgICBAeSA9IC1AeS9sXG4gICAgICAgICAgICBAeiA9IC1Aei9sIFxuICAgICAgICBAXG5cbiAgICBpc1plcm86IC0+IEB4PT1AeT09QHo9PTAgYW5kIEB3PT0xXG4gICAgcmVzZXQ6IC0+IFxuICAgICAgICBAeD1AeT1Aej0wXG4gICAgICAgIEB3PTEgXG4gICAgICAgIEBcbiAgICAgICAgXG4gICAgY29uanVnYXRlOiAtPiBcbiAgICAgICAgQHggPSAtQHhcbiAgICAgICAgQHkgPSAtQHlcbiAgICAgICAgQHogPSAtQHpcbiAgICAgICAgQCBcbiAgICAgICAgXG4gICAgZ2V0Tm9ybWFsOiAgICAgLT4gQGNsb25lKCkubm9ybWFsaXplKClcbiAgICBnZXRDb25qdWdhdGU6ICAtPiBAY2xvbmUoKS5jb25qdWdhdGUoKVxuICAgIGdldEludmVyc2U6ICAgIC0+IEBjbG9uZSgpLmludmVydCgpXG4gICAgbmVnOiAgICAgICAgICAgLT4gbmV3IFF1YXQgLUB3LC1AeCwtQHksLUB6XG4gICAgdmVjdG9yOiAgICAgICAgLT4gbmV3IFZlY3RvciBAeCwgQHksIEB6XG4gICAgbGVuZ3RoOiAgICAgICAgLT4gTWF0aC5zcXJ0IEB3KkB3ICsgQHgqQHggKyBAeSpAeSArIEB6KkB6XG4gICAgZXFsOiAgICAgICAocSkgLT4gQHc9PXEudyBhbmQgQHg9cS54IGFuZCBAeT09cS55IGFuZCBAej09cS56XG4gICAgXG4gICAgbXVsOiAocXVhdE9yU2NhbGFyKSAtPlxuICAgICAgICBpZiBxdWF0T3JTY2FsYXIgaW5zdGFuY2VvZiBRdWF0XG4gICAgICAgICAgICBxdWF0ID0gcXVhdE9yU2NhbGFyXG4gICAgICAgICAgICBBID0gKEB3ICsgQHgpICogKHF1YXQudyArIHF1YXQueClcbiAgICAgICAgICAgIEIgPSAoQHogLSBAeSkgKiAocXVhdC55IC0gcXVhdC56KVxuICAgICAgICAgICAgQyA9IChAdyAtIEB4KSAqIChxdWF0LnkgKyBxdWF0LnopIFxuICAgICAgICAgICAgRCA9IChAeSArIEB6KSAqIChxdWF0LncgLSBxdWF0LngpXG4gICAgICAgICAgICBFID0gKEB4ICsgQHopICogKHF1YXQueCArIHF1YXQueSlcbiAgICAgICAgICAgIEYgPSAoQHggLSBAeikgKiAocXVhdC54IC0gcXVhdC55KVxuICAgICAgICAgICAgRyA9IChAdyArIEB5KSAqIChxdWF0LncgLSBxdWF0LnopXG4gICAgICAgICAgICBIID0gKEB3IC0gQHkpICogKHF1YXQudyArIHF1YXQueilcbiAgICAgICAgICAgIG5ldyBRdWF0ZXJuaW9uIEIgKyAoLUUgLSBGICsgRyArIEgpLzIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBBIC0gIChFICsgRiArIEcgKyBIKS8yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgQyArICAoRSAtIEYgKyBHIC0gSCkvMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIEQgKyAgKEUgLSBGIC0gRyArIEgpLzJcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZiA9IHBhcnNlRmxvYXQgcXVhdE9yU2NhbGFyXG4gICAgICAgICAgICBuZXcgUXVhdGVybmlvbiBAdypmLCBAeCpmLCBAeSpmLCBAeipmXG5cbiAgICBzbGVycDogKHF1YXQsIHQpIC0+XG5cbiAgICAgICAgdG8xICAgPSBbMCwwLDAsMF1cbiAgICAgICAgY29zb20gPSBAeCAqIHF1YXQueCArIEB5ICogcXVhdC55ICsgQHogKiBxdWF0LnogKyBAdyAqIHF1YXQudyAjIGNhbGMgY29zaW5lXG4gICAgICAgIFxuICAgICAgICBpZiBjb3NvbSA8IDAgIyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcbiAgICAgICAgICAgIGNvc29tID0gLWNvc29tIFxuICAgICAgICAgICAgdG8xWzBdID0gLXF1YXQueFxuICAgICAgICAgICAgdG8xWzFdID0gLXF1YXQueVxuICAgICAgICAgICAgdG8xWzJdID0gLXF1YXQuelxuICAgICAgICAgICAgdG8xWzNdID0gLXF1YXQud1xuICAgICAgICBlbHNlICBcbiAgICAgICAgICAgIHRvMVswXSA9IHF1YXQueFxuICAgICAgICAgICAgdG8xWzFdID0gcXVhdC55XG4gICAgICAgICAgICB0bzFbMl0gPSBxdWF0LnpcbiAgICAgICAgICAgIHRvMVszXSA9IHF1YXQud1xuICAgICAgICBcbiAgICAgICAgaWYgKDEuMCAtIGNvc29tKSA+IDAuMDAxICMgY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xuICAgICAgICAgICAgb21lZ2EgID0gTWF0aC5hY29zIGNvc29tICAjIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxuICAgICAgICAgICAgc2lub20gID0gTWF0aC5zaW4gb21lZ2EgXG4gICAgICAgICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbVxuICAgICAgICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tXG4gICAgICAgIGVsc2UgIyBcImZyb21cIiBhbmQgXCJ0b1wiIHF1YXRlcm5pb25zIGFyZSB2ZXJ5IGNsb3NlIC0+IHdlIGNhbiBkbyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICAgICAgICBzY2FsZTAgPSAxLjAgLSB0XG4gICAgICAgICAgICBzY2FsZTEgPSB0XG5cbiAgICAgICAgbmV3IFF1YXRlcm5pb24gc2NhbGUwICogQHcgKyBzY2FsZTEgKiB0bzFbM10sXG4gICAgICAgICAgICAgICAgICAgICAgIHNjYWxlMCAqIEB4ICsgc2NhbGUxICogdG8xWzBdLCBcbiAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUwICogQHkgKyBzY2FsZTEgKiB0bzFbMV0sXG4gICAgICAgICAgICAgICAgICAgICAgIHNjYWxlMCAqIEB6ICsgc2NhbGUxICogdG8xWzJdXG5cbiAgICBAcm90YXRpb25Bcm91bmRWZWN0b3I6ICh0aGV0YSwgeCx5LHopIC0+XG4gICAgICAgIHYgPSBuZXcgVmVjdG9yIHgseSx6IFxuICAgICAgICB2Lm5vcm1hbGl6ZSgpXG4gICAgICAgIHQgPSBkZWcycmFkKHRoZXRhKS8yLjAgICAgICAgXG4gICAgICAgIHMgPSBNYXRoLnNpbiB0IFxuICAgICAgICAobmV3IFF1YXQgTWF0aC5jb3ModCksIHYueCpzLCB2Lnkqcywgdi56KnMpLm5vcm1hbGl6ZSgpXG5cbiAgICBAcm90YXRpb25Gcm9tRXVsZXI6ICh4LHkseikgLT5cbiAgICAgICAgeCA9IGRlZzJyYWQgeFxuICAgICAgICB5ID0gZGVnMnJhZCB5XG4gICAgICAgIHogPSBkZWcycmFkIHpcbiAgICAgICAgcT1uZXcgUXVhdGVybmlvbiAgTWF0aC5jb3MoeC8yKSAqIE1hdGguY29zKHkvMikgKiBNYXRoLmNvcyh6LzIpICsgTWF0aC5zaW4oeC8yKSAqIE1hdGguc2luKHkvMikgKiBNYXRoLnNpbih6LzIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpbih4LzIpICogTWF0aC5jb3MoeS8yKSAqIE1hdGguY29zKHovMikgLSBNYXRoLmNvcyh4LzIpICogTWF0aC5zaW4oeS8yKSAqIE1hdGguc2luKHovMiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguY29zKHgvMikgKiBNYXRoLnNpbih5LzIpICogTWF0aC5jb3Moei8yKSArIE1hdGguc2luKHgvMikgKiBNYXRoLmNvcyh5LzIpICogTWF0aC5zaW4oei8yKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5jb3MoeC8yKSAqIE1hdGguY29zKHkvMikgKiBNYXRoLnNpbih6LzIpIC0gTWF0aC5zaW4oeC8yKSAqIE1hdGguc2luKHkvMikgKiBNYXRoLmNvcyh6LzIpXG4gICAgICAgIHEubm9ybWFsaXplKClcblxuICAgIEByb3RfMCAgICAgPSBuZXcgUXVhdCgpXG4gIFxuICAgIEByb3RfOTBfWCAgPSBAcm90YXRpb25Bcm91bmRWZWN0b3IgOTAsICBWZWN0b3IudW5pdFhcbiAgICBAcm90XzkwX1kgID0gQHJvdGF0aW9uQXJvdW5kVmVjdG9yIDkwLCAgVmVjdG9yLnVuaXRZXG4gICAgQHJvdF85MF9aICA9IEByb3RhdGlvbkFyb3VuZFZlY3RvciA5MCwgIFZlY3Rvci51bml0WlxuICAgIEByb3RfMTgwX1ggPSBAcm90YXRpb25Bcm91bmRWZWN0b3IgMTgwLCBWZWN0b3IudW5pdFhcbiAgICBAcm90XzE4MF9ZID0gQHJvdGF0aW9uQXJvdW5kVmVjdG9yIDE4MCwgVmVjdG9yLnVuaXRZXG4gICAgQHJvdF8xODBfWiA9IEByb3RhdGlvbkFyb3VuZFZlY3RvciAxODAsIFZlY3Rvci51bml0WlxuICAgIEByb3RfMjcwX1ggPSBAcm90YXRpb25Bcm91bmRWZWN0b3IgMjcwLCBWZWN0b3IudW5pdFhcbiAgICBAcm90XzI3MF9ZID0gQHJvdGF0aW9uQXJvdW5kVmVjdG9yIDI3MCwgVmVjdG9yLnVuaXRZXG4gICAgQHJvdF8yNzBfWiA9IEByb3RhdGlvbkFyb3VuZFZlY3RvciAyNzAsIFZlY3Rvci51bml0WlxuXG4gICAgQG1pbnVzWHVwWSAgID0gICAgICAgICAgICAgICAgQHJvdF8yNzBfWVxuICAgIEBtaW51c1h1cFogICA9IEByb3RfOTBfWC5tdWwgIEByb3RfMjcwX1lcbiAgICBAbWludXNYZG93blkgPSBAcm90XzE4MF9YLm11bCBAcm90XzI3MF9ZXG4gICAgQG1pbnVzWGRvd25aID0gQHJvdF8yNzBfWC5tdWwgQHJvdF8yNzBfWVxuICAgICAgICAgICAgICAgICBcbiAgICBAbWludXNZdXBYICAgPSBAcm90XzkwX1kubXVsICBAcm90XzkwX1hcbiAgICBAbWludXNZdXBaICAgPSAgICAgICAgICAgICAgICBAcm90XzkwX1hcbiAgICBAbWludXNZZG93blggPSBAcm90XzI3MF9ZLm11bCBAcm90XzkwX1hcbiAgICBAbWludXNZZG93blogPSBAcm90XzE4MF9ZLm11bCBAcm90XzkwX1hcbiAgICBcbiAgICBAWnVwWCAgICAgICAgPSBAcm90XzI3MF9aXG4gICAgQFp1cFkgICAgICAgID0gQHJvdF8wXG4gICAgQFpkb3duWCAgICAgID0gQHJvdF85MF9aXG4gICAgQFpkb3duWSAgICAgID0gQHJvdF8xODBfWlxuICAgIFxuICAgIEBYdXBZICAgICAgICA9ICAgICAgICAgICAgICAgIEByb3RfOTBfWVxuICAgIEBYdXBaICAgICAgICA9IEByb3RfOTBfWC5tdWwgIEByb3RfOTBfWVxuICAgIEBYZG93blkgICAgICA9IEByb3RfMTgwX1gubXVsIEByb3RfOTBfWVxuICAgIEBYZG93blogICAgICA9IEByb3RfMjcwX1gubXVsIEByb3RfOTBfWVxuICAgICAgICAgICAgICAgICBcbiAgICBAWXVwWCAgICAgICAgPSBAcm90XzI3MF9ZLm11bCBAcm90XzI3MF9YXG4gICAgQFl1cFogICAgICAgID0gQHJvdF8xODBfWS5tdWwgQHJvdF8yNzBfWFxuICAgIEBZZG93blggICAgICA9IEByb3RfOTBfWS5tdWwgIEByb3RfMjcwX1hcbiAgICBAWWRvd25aICAgICAgPSAgICAgICAgICAgICAgICBAcm90XzI3MF9YXG4gICAgXG4gICAgQG1pbnVzWnVwWCAgID0gQHJvdF85MF9aLm11bCAgQHJvdF8xODBfWFxuICAgIEBtaW51c1p1cFkgICA9IEByb3RfMTgwX1oubXVsIEByb3RfMTgwX1hcbiAgICBAbWludXNaZG93blggPSBAcm90XzI3MF9aLm11bCBAcm90XzE4MF9YXG4gICAgQG1pbnVzWmRvd25ZID0gICAgICAgICAgICAgICAgQHJvdF8xODBfWFxuICAgICAgICBcbiAgICBAcm90XzAubmFtZSAgICAgICA9ICdyb3RfMCdcbiAgICBAcm90XzkwX1gubmFtZSAgICA9ICdyb3RfOTBfWCdcbiAgICBAcm90XzkwX1kubmFtZSAgICA9ICdyb3RfOTBfWSdcbiAgICBAcm90XzkwX1oubmFtZSAgICA9ICdyb3RfOTBfWidcbiAgICBAcm90XzE4MF9YLm5hbWUgICA9ICdyb3RfMTgwX1gnXG4gICAgQHJvdF8xODBfWS5uYW1lICAgPSAncm90XzE4MF9ZJ1xuICAgIEByb3RfMTgwX1oubmFtZSAgID0gJ3JvdF8xODBfWidcbiAgICBAcm90XzI3MF9YLm5hbWUgICA9ICdyb3RfMjcwX1gnXG4gICAgQHJvdF8yNzBfWS5uYW1lICAgPSAncm90XzI3MF9ZJ1xuICAgIEByb3RfMjcwX1oubmFtZSAgID0gJ3JvdF8yNzBfWidcbiAgICBcbiAgICBAWHVwWS5uYW1lICAgICAgICA9ICdYdXBZJ1xuICAgIEBYdXBaLm5hbWUgICAgICAgID0gJ1h1cFonXG4gICAgQFhkb3duWS5uYW1lICAgICAgPSAnWGRvd25ZJ1xuICAgIEBYZG93bloubmFtZSAgICAgID0gJ1hkb3duWidcbiAgICBAWXVwWC5uYW1lICAgICAgICA9ICdZdXBYJ1xuICAgIEBZdXBaLm5hbWUgICAgICAgID0gJ1l1cFonXG4gICAgQFlkb3duWC5uYW1lICAgICAgPSAnWWRvd25YJ1xuICAgIEBZZG93bloubmFtZSAgICAgID0gJ1lkb3duWidcbiAgICBAWnVwWC5uYW1lICAgICAgICA9ICdadXBYJ1xuICAgIEBadXBZLm5hbWUgICAgICAgID0gJ1p1cFknXG4gICAgQFpkb3duWC5uYW1lICAgICAgPSAnWmRvd25YJ1xuICAgIEBaZG93blkubmFtZSAgICAgID0gJ1pkb3duWSdcbiAgICBAbWludXNYdXBZLm5hbWUgICA9ICdtaW51c1h1cFknXG4gICAgQG1pbnVzWHVwWi5uYW1lICAgPSAnbWludXNYdXBaJ1xuICAgIEBtaW51c1hkb3duWS5uYW1lID0gJ21pbnVzWGRvd25ZJ1xuICAgIEBtaW51c1hkb3duWi5uYW1lID0gJ21pbnVzWGRvd25aJ1xuICAgIEBtaW51c1l1cFgubmFtZSAgID0gJ21pbnVzWXVwWCdcbiAgICBAbWludXNZdXBaLm5hbWUgICA9ICdtaW51c1l1cFonXG4gICAgQG1pbnVzWWRvd25YLm5hbWUgPSAnbWludXNZZG93blgnXG4gICAgQG1pbnVzWWRvd25aLm5hbWUgPSAnbWludXNZZG93blonXG4gICAgQG1pbnVzWnVwWC5uYW1lICAgPSAnbWludXNadXBYJ1xuICAgIEBtaW51c1p1cFkubmFtZSAgID0gJ21pbnVzWnVwWSdcbiAgICBAbWludXNaZG93blgubmFtZSA9ICdtaW51c1pkb3duWCdcbiAgICBAbWludXNaZG93blkubmFtZSA9ICdtaW51c1pkb3duWSdcbiAgICBcbm1vZHVsZS5leHBvcnRzID0gUXVhdFxuIl19
//# sourceURL=../coffee/quaternion.coffee