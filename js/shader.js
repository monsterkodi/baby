// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Effect, Engine, Mesh, MeshBuilder, RawTexture, RenderTargetTexture, Shader, ShaderMaterial, Texture, Vector2, Vector3, Vector4, klog, performance, ref, ref1, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('babylonjs'), Effect = ref.Effect, Engine = ref.Engine, Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, RawTexture = ref.RawTexture, RenderTargetTexture = ref.RenderTargetTexture, ShaderMaterial = ref.ShaderMaterial, Texture = ref.Texture, Vector2 = ref.Vector2, Vector3 = ref.Vector3, Vector4 = ref.Vector4;

performance = require('perf_hooks').performance;

ref1 = require('kxk'), klog = ref1.klog, slash = ref1.slash;

Shader = (function() {
    function Shader(world) {
        var buffer, bufferSource, fragSource;
        this.world = world;
        this.materialData = bind(this.materialData, this);
        this.scene = this.world.scene;
        this.bufferSize = {
            width: 256,
            height: 256
        };
        this.frameRates = [];
        klog("buffers " + this.world.canvas.width + "x" + this.world.canvas.height);
        buffer = new Uint8Array(4 * this.world.canvas.width * this.world.canvas.height);
        this.textures = {
            keys: RawTexture.CreateRTexture(this.world.keys, 256, 3, this.scene, false),
            buffer: new RawTexture(buffer, this.bufferSize.width, this.bufferSize.height, Engine.TEXTUREFORMAT_RGBA, this.scene, false),
            font: new Texture(__dirname + "/../img/font.png", this.scene)
        };
        this.iFrame = 0;
        this.vertexShader = "precision highp float; attribute vec3 position; attribute vec2 uv; uniform mat4 worldViewProjection;\nvoid main(void) { gl_Position = worldViewProjection * vec4(position, 1.0); }";
        fragSource = slash.readText(__dirname + "/../shader/follow.frag");
        bufferSource = slash.readText(__dirname + "/../shader/buffer.frag");
        this.commonSource = slash.readText(__dirname + "/../shader/common.frag");
        Effect.ShadersStore.mainVertexShader = this.vertexShader;
        Effect.ShadersStore.mainFragmentShader = this.shaderCode(fragSource);
        Effect.ShadersStore.bufferVertexShader = this.vertexShader;
        Effect.ShadersStore.bufferFragmentShader = this.shaderCode(bufferSource);
        this.shaderStart = performance.now();
        this.bufferMaterial = this.shaderMaterial('buffer');
        this.shaderMaterial = this.shaderMaterial('main');
        this.plane2 = MeshBuilder.CreatePlane("plane2", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane2.material = this.bufferMaterial;
        this.plane2.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.shaderMaterial.onCompiled = (function(_this) {
            return function() {
                _this.compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("shader compileTime " + (_this.compileTime / 1000) + "s");
            };
        })(this);
        this.bufferMaterial.onCompiled = (function(_this) {
            return function() {
                var compileTime;
                compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("buffer compileTime " + (compileTime / 1000) + "s");
            };
        })(this);
        this.renderTarget = new RenderTargetTexture("buf", this.bufferSize, this.scene, false);
        this.renderTarget.renderList.push(this.plane2);
        this.scene.customRenderTargets.push(this.renderTarget);
        this.renderTarget.onBeforeRender = (function(_this) {
            return function() {
                _this.plane2.position.copyFrom(_this.world.camera.position.add(_this.world.camera.getDir().scale(2)));
                return _this.materialData(_this.bufferMaterial);
            };
        })(this);
        this.scene.onBeforeRenderObservable.add((function(_this) {
            return function() {
                var j, len, r, ref2, ref3, ref4, ref5, ref6, ref7, ref8;
                _this.textures.keys.update(_this.world.keys);
                _this.iResolution = new Vector3(_this.world.canvas.width, _this.world.canvas.height, 1);
                _this.iDelta = new Vector2(_this.world.camera.mouseDelta.x, _this.world.camera.mouseDelta.y);
                _this.iMouse = new Vector4(_this.world.camera.mouseX * ((ref2 = window.devicePixelRatio) != null ? ref2 : 0), _this.iResolution.y - (_this.world.camera.mouseY * ((ref3 = window.devicePixelRatio) != null ? ref3 : _this.iResolution.y)), (_this.world.camera.downButtons && 1 || -1) * ((ref4 = _this.world.camera.downPos) != null ? ref4.x : void 0) * ((ref5 = window.devicePixelRatio) != null ? ref5 : 0), (_this.world.camera.downButtons && 1 || -1) * (_this.iResolution.y - (((ref6 = _this.world.camera.downPos) != null ? ref6.y : void 0) * ((ref7 = window.devicePixelRatio) != null ? ref7 : _this.iResolution.y))));
                _this.iCenter = new Vector3(_this.world.camera.center.x, _this.world.camera.center.y, _this.world.camera.center.z);
                _this.iCamera = new Vector3(_this.world.camera.position.x, _this.world.camera.position.y, _this.world.camera.position.z);
                _this.iTime = performance.now() / 1000;
                _this.iTimeDelta = _this.world.engine.getDeltaTime() / 1000;
                _this.frameRates.push(_this.world.engine.getFps());
                if (_this.frameRates.length > 30) {
                    _this.frameRates.shift();
                }
                _this.fps = 0;
                ref8 = _this.frameRates;
                for (j = 0, len = ref8.length; j < len; j++) {
                    r = ref8[j];
                    _this.fps += r;
                }
                return _this.fps /= _this.frameRates.length;
            };
        })(this));
        this.scene.onAfterRenderTargetsRenderObservable.add((function(_this) {
            return function() {
                return _this.textures.buffer.update(_this.renderTarget.readPixels());
            };
        })(this));
        this.scene.onAfterRenderObservable.add((function(_this) {
            return function() {
                var i, j, results;
                _this.iFrame++;
                results = [];
                for (i = j = 256; j < 512; i = ++j) {
                    results.push(_this.world.keys[i] = 0);
                }
                return results;
            };
        })(this));
    }

    Shader.prototype.render = function() {
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(1.5)));
        return this.materialData(this.shaderMaterial);
    };

    Shader.prototype.materialData = function(m) {
        m.setTexture('iChannel0', this.textures.keys);
        m.setTexture('iChannel1', this.textures.buffer);
        m.setTexture('iChannel2', this.textures.font);
        m.setInt('iFrame', this.iFrame);
        m.setFloat('iCompile', this.compileTime / 1000);
        m.setFloat('iTime', this.iTime);
        m.setFloat('iTimeDelta', this.iTimeDelta);
        m.setVector2('iDelta', this.iDelta);
        m.setVector4('iMouse', this.iMouse);
        m.setVector3('iResolution', this.iResolution);
        m.setVector3('iCenter', this.iCenter);
        m.setVector3('iCamera', this.iCamera);
        m.setFloat('iDist', this.world.camera.dist);
        m.setFloat('iMinDist', this.world.camera.minDist);
        m.setFloat('iMaxDist', this.world.camera.maxDist);
        m.setFloat('iRotate', this.world.camera.rotate);
        m.setFloat('iDegree', this.world.camera.degree);
        m.setFloat('iFrameRate', Math.round(this.fps));
        return m.setFloat('iMs', this.world.engine.getDeltaTime());
    };

    Shader.prototype.shaderMaterial = function(key) {
        return new ShaderMaterial(key + "Shader", this.scene, {
            vertex: key,
            fragment: key
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iCamera', 'iCenter', 'iDist', 'iMaxDist', 'iMinDist', 'iFrameRate', 'iMs', 'iFrame', 'iDelta', 'iTime', 'iTimeDelta', 'iMouse', 'iResolution', 'iRotate', 'iDegree', 'iCompile']
        });
    };

    Shader.prototype.shaderCode = function(fragSource) {
        return "precision highp float;\nuniform float     iTime;\nuniform float     iTimeDelta;\nuniform float     iFrameRate;\nuniform float     iMs;\nuniform float     iCompile;\nuniform float     iDist;\nuniform float     iMinDist;\nuniform float     iMaxDist;\nuniform float     iRotate;\nuniform float     iDegree;\nuniform vec2      iDelta;\nuniform vec4      iMouse;\nuniform vec3      iResolution;\nuniform vec3      iCenter;\nuniform vec3      iCamera;\nuniform int       iFrame;\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\n\n" + this.commonSource + "\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shader.coffee