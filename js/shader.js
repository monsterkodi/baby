// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Mesh, MeshBuilder, Shader, ShaderMaterial, Vector2, Vector3, performance, ref, slash;

ref = require('babylonjs'), Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, ShaderMaterial = ref.ShaderMaterial, Vector2 = ref.Vector2, Vector3 = ref.Vector3;

performance = require('perf_hooks').performance;

slash = require('kxk').slash;

Shader = (function() {
    function Shader(world) {
        var fragSource, fragmentShader, vertexShader;
        this.world = world;
        this.scene = this.world.scene;
        vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragSource = slash.readText(__dirname + "/../shader/sdf.frag");
        fragmentShader = "precision highp float;\nuniform float iTime;\nuniform float iMs;\nuniform float iDist;\nuniform float iMinDist;\nuniform float iMaxDist;\nuniform float iRotate;\nuniform float iDegree;\nuniform vec2  iDelta;\nuniform vec2  iMouse;\nuniform vec2  iResolution;\nuniform vec3  iCenter;\nuniform vec3  iCamera;\n\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            fragmentSource: fragmentShader,
            vertexSource: vertexShader
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iMs', 'iDist', 'iMaxDist', 'iMinDist', 'iCenter', 'iCamera', 'iDelta', 'iTime', 'iMouse', 'iResolution', 'iRotate', 'iDegree']
        });
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
    }

    Shader.prototype.render = function() {
        var dpr, mouseX, mouseY, ref1, ref2;
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(2)));
        dpr = window.devicePixelRatio;
        mouseX = (ref1 = this.world.camera.mouseX) != null ? ref1 : 0;
        mouseY = (ref2 = this.world.camera.mouseY) != null ? ref2 : this.world.canvas.height / dpr;
        this.shaderMaterial.setFloat('iMs', this.world.engine.getDeltaTime());
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setFloat('iDist', this.world.camera.dist);
        this.shaderMaterial.setFloat('iMinDist', this.world.camera.minDist);
        this.shaderMaterial.setFloat('iMaxDist', this.world.camera.maxDist);
        this.shaderMaterial.setFloat('iRotate', this.world.camera.rotate);
        this.shaderMaterial.setFloat('iDegree', this.world.camera.degree);
        this.shaderMaterial.setVector2('iDelta', new Vector2(this.world.camera.mouseDelta.x, this.world.camera.mouseDelta.y));
        this.shaderMaterial.setVector2('iMouse', new Vector2(mouseX * dpr, this.world.canvas.height - mouseY * dpr));
        this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
        this.shaderMaterial.setVector3('iCenter', new Vector3(this.world.camera.center.x, this.world.camera.center.y, this.world.camera.center.z));
        return this.shaderMaterial.setVector3('iCamera', new Vector3(this.world.camera.position.x, this.world.camera.position.y, this.world.camera.position.z));
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shader.coffee