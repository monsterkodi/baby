// koffee 1.4.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Effect, Engine, Mesh, MeshBuilder, RawTexture, RenderTargetTexture, Shader, ShaderMaterial, Texture, Vector2, Vector3, Vector4, klog, performance, ref, ref1, slash;

ref = require('babylonjs'), Effect = ref.Effect, Engine = ref.Engine, Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, RawTexture = ref.RawTexture, RenderTargetTexture = ref.RenderTargetTexture, ShaderMaterial = ref.ShaderMaterial, Texture = ref.Texture, Vector2 = ref.Vector2, Vector3 = ref.Vector3, Vector4 = ref.Vector4;

performance = require('perf_hooks').performance;

ref1 = require('kxk'), klog = ref1.klog, slash = ref1.slash;

Shader = (function() {
    function Shader(world) {
        var buffer, bufferSource, fragSource, i, j, k, l, m;
        this.world = world;
        this.scene = this.world.scene;
        this.frameRates = [];
        this.buffers = [];
        this.textures = [];
        klog("buffers " + this.world.canvas.width + "x" + this.world.canvas.height);
        for (i = k = 0; k < 3; i = ++k) {
            buffer = new Uint8Array(4 * this.world.canvas.width * this.world.canvas.height);
            this.buffers.push(buffer);
            l = buffer.length;
            for (j = m = 0; m < 2; j = ++m) {
                buffer[j * 4] = 1;
                buffer[j * 4 + 1] = 2;
                buffer[j * 4 + 2] = 3;
                buffer[j * 4 + 3] = 255;
            }
            this.textures.push(new RawTexture(buffer, this.world.canvas.width, this.world.canvas.height, Engine.TEXTUREFORMAT_RGBA, this.scene, false));
        }
        this.textures[1] = new Texture(__dirname + "/../img/font.png", this.scene);
        this.keytexture = RawTexture.CreateRTexture(this.world.keys, 256, 3, this.scene, false);
        this.iFrame = 0;
        this.vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragSource = slash.readText(__dirname + "/../shader/follow.frag");
        bufferSource = slash.readText(__dirname + "/../shader/buffer.frag");
        Effect.ShadersStore.mainVertexShader = this.vertexShader;
        Effect.ShadersStore.mainFragmentShader = this.shaderCode(fragSource);
        Effect.ShadersStore.bufferVertexShader = this.vertexShader;
        Effect.ShadersStore.bufferFragmentShader = this.shaderCode(bufferSource);
        this.uniforms = ['worldViewProjection', 'iMs', 'iDist', 'iMaxDist', 'iMinDist', 'iCenter', 'iCamera', 'iFrameRate', 'iDelta', 'iTime', 'iTimeDelta', 'iMouse', 'iResolution', 'iRotate', 'iDegree', 'iFrame', 'iCompile'];
        this.shaderStart = performance.now();
        this.bufferMaterial = new ShaderMaterial("bufferShader", this.scene, {
            vertex: 'buffer',
            fragment: 'buffer'
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: this.uniforms
        });
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            vertex: 'main',
            fragment: 'main'
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: this.uniforms
        });
        this.plane2 = MeshBuilder.CreatePlane("plane2", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane2.material = this.bufferMaterial;
        this.plane2.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.shaderMaterial.onCompiled = (function(_this) {
            return function() {
                _this.compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("shader compileTime " + (_this.compileTime / 1000) + "s");
            };
        })(this);
        this.bufferMaterial.onCompiled = (function(_this) {
            return function() {
                var compileTime;
                compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("buffer compileTime " + (compileTime / 1000) + "s");
            };
        })(this);
        this.renderBuffers();
    }

    Shader.prototype.shaderCode = function(fragSource) {
        return "precision highp float;\nuniform float iTime;\nuniform float iTimeDelta;\nuniform float iFrameRate;\nuniform float iMs;\nuniform float iCompile;\nuniform float iDist;\nuniform float iMinDist;\nuniform float iMaxDist;\nuniform float iRotate;\nuniform float iDegree;\nuniform vec2  iDelta;\nuniform vec4  iMouse;\nuniform vec2  iResolution;\nuniform vec3  iCenter;\nuniform vec3  iCamera;\nuniform int   iFrame;\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\nuniform sampler2D iChannel3;\n\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
    };

    Shader.prototype.renderBuffers = function() {
        this.renderTarget = new RenderTargetTexture("buf", {
            width: this.world.canvas.width,
            height: this.world.canvas.height
        }, this.scene, false);
        this.renderTarget.renderList.push(this.plane2);
        this.scene.customRenderTargets.push(this.renderTarget);
        this.renderTarget.onBeforeRender = (function(_this) {
            return function() {
                var mouseX, mouseY, ref2, ref3;
                _this.keytexture.update(_this.world.keys);
                _this.plane2.isVisible = true;
                _this.plane2.position.copyFrom(_this.world.camera.position.add(_this.world.camera.getDir().scale(2)));
                mouseX = (ref2 = _this.world.camera.mouseX * window.devicePixelRatio) != null ? ref2 : 0;
                mouseY = (ref3 = _this.world.camera.mouseY * window.devicePixelRatio) != null ? ref3 : _this.world.canvas.height;
                _this.bufferMaterial.setTexture('iChannel0', _this.keytexture);
                _this.bufferMaterial.setTexture('iChannel1', _this.textures[0]);
                _this.bufferMaterial.setTexture('iChannel2', _this.textures[1]);
                _this.bufferMaterial.setTexture('iChannel3', _this.textures[2]);
                _this.bufferMaterial.setInt('iFrame', _this.iFrame);
                _this.bufferMaterial.setFloat('iFrameRate', Math.round(_this.fps));
                _this.bufferMaterial.setFloat('iMs', _this.world.engine.getDeltaTime());
                _this.bufferMaterial.setFloat('iCompile', _this.compileTime / 1000);
                _this.bufferMaterial.setFloat('iTime', performance.now() / 1000);
                _this.bufferMaterial.setFloat('iTimeDelta', _this.world.engine.getDeltaTime() / 1000);
                _this.bufferMaterial.setFloat('iDist', _this.world.camera.dist);
                _this.bufferMaterial.setFloat('iMinDist', _this.world.camera.minDist);
                _this.bufferMaterial.setFloat('iMaxDist', _this.world.camera.maxDist);
                _this.bufferMaterial.setFloat('iRotate', _this.world.camera.rotate);
                _this.bufferMaterial.setFloat('iDegree', _this.world.camera.degree);
                _this.bufferMaterial.setVector2('iDelta', new Vector2(_this.world.camera.mouseDelta.x, _this.world.camera.mouseDelta.y));
                _this.bufferMaterial.setVector4('iMouse', new Vector4(mouseX, _this.world.canvas.height - mouseY, _this.world.camera.downButtons, 0));
                _this.bufferMaterial.setVector2('iResolution', new Vector2(_this.world.canvas.width, _this.world.canvas.height));
                _this.bufferMaterial.setVector3('iCenter', new Vector3(_this.world.camera.center.x, _this.world.camera.center.y, _this.world.camera.center.z));
                return _this.bufferMaterial.setVector3('iCamera', new Vector3(_this.world.camera.position.x, _this.world.camera.position.y, _this.world.camera.position.z));
            };
        })(this);
        this.renderTarget.onAfterRender = (function(_this) {
            return function() {};
        })(this);
        return this.scene.onAfterRenderTargetsRenderObservable.add((function(_this) {
            return function() {
                return _this.textures[0].update(_this.renderTarget.readPixels());
            };
        })(this));
    };

    Shader.prototype.render = function() {
        var i, k, len, m, mouseX, mouseY, r, ref2, ref3, ref4, results;
        this.plane2.isVisible = false;
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(1.5)));
        mouseX = (ref2 = this.world.camera.mouseX * window.devicePixelRatio) != null ? ref2 : 0;
        mouseY = (ref3 = this.world.camera.mouseY * window.devicePixelRatio) != null ? ref3 : this.world.canvas.height;
        this.frameRates.push(this.world.engine.getFps());
        if (this.frameRates.length > 30) {
            this.frameRates.shift();
        }
        this.fps = 0;
        ref4 = this.frameRates;
        for (k = 0, len = ref4.length; k < len; k++) {
            r = ref4[k];
            this.fps += r;
        }
        this.fps /= this.frameRates.length;
        this.shaderMaterial.setTexture('iChannel0', this.keytexture);
        this.shaderMaterial.setTexture('iChannel1', this.textures[0]);
        this.shaderMaterial.setTexture('iChannel2', this.textures[1]);
        this.shaderMaterial.setTexture('iChannel3', this.textures[2]);
        this.shaderMaterial.setInt('iFrame', this.iFrame++);
        this.shaderMaterial.setFloat('iFrameRate', Math.round(this.fps));
        this.shaderMaterial.setFloat('iMs', this.world.engine.getDeltaTime());
        this.shaderMaterial.setFloat('iCompile', this.compileTime / 1000);
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setFloat('iTimeDelta', this.world.engine.getDeltaTime() / 1000);
        this.shaderMaterial.setFloat('iDist', this.world.camera.dist);
        this.shaderMaterial.setFloat('iMinDist', this.world.camera.minDist);
        this.shaderMaterial.setFloat('iMaxDist', this.world.camera.maxDist);
        this.shaderMaterial.setFloat('iRotate', this.world.camera.rotate);
        this.shaderMaterial.setFloat('iDegree', this.world.camera.degree);
        this.shaderMaterial.setVector2('iDelta', new Vector2(this.world.camera.mouseDelta.x, this.world.camera.mouseDelta.y));
        this.shaderMaterial.setVector4('iMouse', new Vector4(mouseX, this.world.canvas.height - mouseY, this.world.camera.downButtons, 0));
        this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
        this.shaderMaterial.setVector3('iCenter', new Vector3(this.world.camera.center.x, this.world.camera.center.y, this.world.camera.center.z));
        this.shaderMaterial.setVector3('iCamera', new Vector3(this.world.camera.position.x, this.world.camera.position.y, this.world.camera.position.z));
        results = [];
        for (i = m = 256; m < 512; i = ++m) {
            results.push(this.world.keys[i] = 0);
        }
        return results;
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUE2SCxPQUFBLENBQVEsV0FBUixDQUE3SCxFQUFFLG1CQUFGLEVBQVUsbUJBQVYsRUFBa0IsZUFBbEIsRUFBd0IsNkJBQXhCLEVBQXFDLDJCQUFyQyxFQUFpRCw2Q0FBakQsRUFBc0UsbUNBQXRFLEVBQXNGLHFCQUF0RixFQUErRixxQkFBL0YsRUFBd0cscUJBQXhHLEVBQWlIOztBQUMvRyxjQUFnQixPQUFBLENBQVEsWUFBUjs7QUFDbEIsT0FBa0IsT0FBQSxDQUFRLEtBQVIsQ0FBbEIsRUFBRSxnQkFBRixFQUFROztBQUVGO0lBRUMsZ0JBQUMsS0FBRDtBQUVDLFlBQUE7UUFGQSxJQUFDLENBQUEsUUFBRDtRQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQztRQUNoQixJQUFDLENBQUEsVUFBRCxHQUFjO1FBQ2QsSUFBQyxDQUFBLE9BQUQsR0FBVztRQUNYLElBQUMsQ0FBQSxRQUFELEdBQVk7UUFFWixJQUFBLENBQUssVUFBQSxHQUFXLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQXpCLEdBQStCLEdBQS9CLEdBQWtDLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQXJEO0FBQ0EsYUFBUyx5QkFBVDtZQUVJLE1BQUEsR0FBUyxJQUFJLFVBQUosQ0FBZSxDQUFBLEdBQUUsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBaEIsR0FBc0IsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBbkQ7WUFDVCxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVQsQ0FBYyxNQUFkO1lBQ0EsQ0FBQSxHQUFJLE1BQU0sQ0FBQztBQUNYLGlCQUFTLHlCQUFUO2dCQUNJLE1BQU8sQ0FBQSxDQUFBLEdBQUUsQ0FBRixDQUFQLEdBQWdCO2dC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WSxNQUFaLEVBQW9CLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWQsR0FBcUIsTUFBekMsRUFBaUQsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBL0QsRUFBNEUsQ0FBNUUsQ0FBekM7UUFDQSxJQUFDLENBQUEsY0FBYyxDQUFDLFVBQWhCLENBQTJCLGFBQTNCLEVBQXlDLElBQUksT0FBSixDQUFZLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQTFCLEVBQWlDLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQS9DLENBQXpDO1FBQ0EsSUFBQyxDQUFBLGNBQWMsQ0FBQyxVQUFoQixDQUEyQixTQUEzQixFQUF5QyxJQUFJLE9BQUosQ0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBakMsRUFBb0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQXpELEVBQTRELElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFqRixDQUF6QztRQUNBLElBQUMsQ0FBQSxjQUFjLENBQUMsVUFBaEIsQ0FBMkIsU0FBM0IsRUFBeUMsSUFBSSxPQUFKLENBQVksSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQW5DLEVBQXNDLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUE3RCxFQUFnRSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBdkYsQ0FBekM7QUFFQTthQUFTLDZCQUFUO3lCQUNJLElBQUMsQ0FBQSxLQUFLLENBQUMsSUFBSyxDQUFBLENBQUEsQ0FBWixHQUFpQjtBQURyQjs7SUFuQ0k7Ozs7OztBQXNDWixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgRWZmZWN0LCBFbmdpbmUsIE1lc2gsIE1lc2hCdWlsZGVyLCBSYXdUZXh0dXJlLCBSZW5kZXJUYXJnZXRUZXh0dXJlLCBTaGFkZXJNYXRlcmlhbCwgVGV4dHVyZSwgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xueyBwZXJmb3JtYW5jZSB9ID0gcmVxdWlyZSAncGVyZl9ob29rcydcbnsga2xvZywgc2xhc2ggfSA9IHJlcXVpcmUgJ2t4aydcbiAgICAgICAgXG5jbGFzcyBTaGFkZXJcbiAgICBcbiAgICBAOiAoQHdvcmxkKSAtPlxuXG4gICAgICAgIEBzY2VuZSA9IEB3b3JsZC5zY2VuZVxuICAgICAgICBAZnJhbWVSYXRlcyA9IFtdXG4gICAgICAgIEBidWZmZXJzID0gW11cbiAgICAgICAgQHRleHR1cmVzID0gW11cblxuICAgICAgICBrbG9nIFwiYnVmZmVycyAje0B3b3JsZC5jYW52YXMud2lkdGh9eCN7QHdvcmxkLmNhbnZhcy5oZWlnaHR9XCJcbiAgICAgICAgZm9yIGkgaW4gWzAuLi4zXVxuICAgICAgICAgICAgIyBidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5IDQqQHdvcmxkLmNhbnZhcy53aWR0aCpAd29ybGQuY2FudmFzLmhlaWdodFxuICAgICAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkgNCpAd29ybGQuY2FudmFzLndpZHRoKkB3b3JsZC5jYW52YXMuaGVpZ2h0XG4gICAgICAgICAgICBAYnVmZmVycy5wdXNoIGJ1ZmZlclxuICAgICAgICAgICAgbCA9IGJ1ZmZlci5sZW5ndGhcbiAgICAgICAgICAgIGZvciBqIGluIFswLi4uMl1cbiAgICAgICAgICAgICAgICBidWZmZXJbaio0XSAgID0gMVxuICAgICAgICAgICAgICAgIGJ1ZmZlcltqKjQrMV0gPSAyXG4gICAgICAgICAgICAgICAgYnVmZmVyW2oqNCsyXSA9IDNcbiAgICAgICAgICAgICAgICBidWZmZXJbaio0KzNdID0gMjU1XG4gICAgICAgICAgICAjIEB0ZXh0dXJlcy5wdXNoIFJhd1RleHR1cmUuQ3JlYXRlUkdCQVRleHR1cmUgYnVmZmVyLCBAd29ybGQuY2FudmFzLndpZHRoLCBAd29ybGQuY2FudmFzLmhlaWdodCwgXG4gICAgICAgICAgICAgICAgIyBAc2NlbmUsIGZhbHNlLCBmYWxzZSwgVGV4dHVyZS5ORUFSRVNUX1NBTVBMSU5HTU9ERSwgRW5naW5lLlRFWFRVUkVUWVBFX0ZMT0FUXG4gICAgICAgICAgICBAdGV4dHVyZXMucHVzaCBuZXcgUmF3VGV4dHVyZSBidWZmZXIsIEB3b3JsZC5jYW52YXMud2lkdGgsIEB3b3JsZC5jYW52YXMuaGVpZ2h0LCBFbmdpbmUuVEVYVFVSRUZPUk1BVF9SR0JBLFxuICAgICAgICAgICAgICAgIEBzY2VuZSwgZmFsc2UgIywgZmFsc2UsIFRleHR1cmUuQklMSU5FQVJfU0FNUExJTkdNT0RFLCBFbmdpbmUuVEVYVFVSRVRZUEVfRkxPQVRcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgQHRleHR1cmVzWzFdID0gbmV3IFRleHR1cmUoXCIje19fZGlybmFtZX0vLi4vaW1nL2ZvbnQucG5nXCIsIEBzY2VuZSlcbiAgICAgICAgQGtleXRleHR1cmUgPSBSYXdUZXh0dXJlLkNyZWF0ZVJUZXh0dXJlIEB3b3JsZC5rZXlzLCAyNTYsIDMsIEBzY2VuZSwgZmFsc2VcbiAgICAgICAgQGlGcmFtZSA9IDBcbiAgICAgICAgQHZlcnRleFNoYWRlciA9ICBcIlwiXCJcbiAgICAgICAgICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICAgICAgICAgIGF0dHJpYnV0ZSB2ZWMzIHBvc2l0aW9uO1xuICAgICAgICAgICAgYXR0cmlidXRlIHZlYzIgdXY7XG4gICAgICAgICAgICB1bmlmb3JtIG1hdDQgd29ybGRWaWV3UHJvamVjdGlvbjtcbiAgICAgICAgICAgIHZvaWQgbWFpbih2b2lkKSB7XG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSB3b3JsZFZpZXdQcm9qZWN0aW9uICogdmVjNChwb3NpdGlvbiwgMS4wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICBcclxuICAgICAgICAjIGZyYWdTb3VyY2UgPSBzbGFzaC5yZWFkVGV4dCBcIiN7X19kaXJuYW1lfS8uLi9zaGFkZXIvZ3JhcGguZnJhZ1wiXG4gICAgICAgICMgZnJhZ1NvdXJjZSA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci9rYWxhbWFyaS5mcmFnXCJcbiAgICAgICAgIyBmcmFnU291cmNlID0gc2xhc2gucmVhZFRleHQgXCIje19fZGlybmFtZX0vLi4vc2hhZGVyL2thbGFtYXJpX2JsdWVwcmludC5mcmFnXCJcbiAgICAgICAgIyBmcmFnU291cmNlID0gc2xhc2gucmVhZFRleHQgXCIje19fZGlybmFtZX0vLi4vc2hhZGVyL2tyYXAuZnJhZ1wiXG4gICAgICAgICMgZnJhZ1NvdXJjZSA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci90d2lzdC5mcmFnXCJcbiAgICAgICAgIyBmcmFnU291cmNlID0gc2xhc2gucmVhZFRleHQgXCIje19fZGlybmFtZX0vLi4vc2hhZGVyL3dvcm0uZnJhZ1wiXG4gICAgICAgICMgZnJhZ1NvdXJjZSA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci9rZXJsLmZyYWdcIlxuICAgICAgICAjIGZyYWdTb3VyY2UgPSBzbGFzaC5yZWFkVGV4dCBcIiN7X19kaXJuYW1lfS8uLi9zaGFkZXIvYXN0cm8uZnJhZ1wiXG4gICAgICAgICMgZnJhZ1NvdXJjZSA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci9hc3Ryb19ub3F1YXQuZnJhZ1wiXG4gICAgICAgIGZyYWdTb3VyY2UgPSBzbGFzaC5yZWFkVGV4dCBcIiN7X19kaXJuYW1lfS8uLi9zaGFkZXIvZm9sbG93LmZyYWdcIlxuICAgICAgICBidWZmZXJTb3VyY2UgPSBzbGFzaC5yZWFkVGV4dCBcIiN7X19kaXJuYW1lfS8uLi9zaGFkZXIvYnVmZmVyLmZyYWdcIlxuICAgICAgICBcbiAgICAgICAgRWZmZWN0LlNoYWRlcnNTdG9yZS5tYWluVmVydGV4U2hhZGVyID0gQHZlcnRleFNoYWRlclxuICAgICAgICBFZmZlY3QuU2hhZGVyc1N0b3JlLm1haW5GcmFnbWVudFNoYWRlciA9IEBzaGFkZXJDb2RlIGZyYWdTb3VyY2UgXG4gICAgICAgIFxuICAgICAgICBFZmZlY3QuU2hhZGVyc1N0b3JlLmJ1ZmZlclZlcnRleFNoYWRlciA9IEB2ZXJ0ZXhTaGFkZXJcbiAgICAgICAgRWZmZWN0LlNoYWRlcnNTdG9yZS5idWZmZXJGcmFnbWVudFNoYWRlciA9IEBzaGFkZXJDb2RlIGJ1ZmZlclNvdXJjZSBcbiAgICAgICAgXG4gICAgICAgIEB1bmlmb3JtcyA9IFtcbiAgICAgICAgICAgICd3b3JsZFZpZXdQcm9qZWN0aW9uJyAnaU1zJyAnaURpc3QnICdpTWF4RGlzdCcgJ2lNaW5EaXN0JyBcbiAgICAgICAgICAgICdpQ2VudGVyJyAnaUNhbWVyYScgJ2lGcmFtZVJhdGUnIFxuICAgICAgICAgICAgJ2lEZWx0YScgJ2lUaW1lJyAnaVRpbWVEZWx0YScgJ2lNb3VzZScgJ2lSZXNvbHV0aW9uJyBcbiAgICAgICAgICAgICdpUm90YXRlJyAnaURlZ3JlZScgJ2lGcmFtZScgJ2lDb21waWxlJ1xuICAgICAgICBdXG4gICAgICAgICAgICBcbiAgICAgICAgQHNoYWRlclN0YXJ0ID0gcGVyZm9ybWFuY2Uubm93KClcbiAgICAgICAgXG4gICAgICAgIEBidWZmZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCBcImJ1ZmZlclNoYWRlclwiLCBAc2NlbmUsICBcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6ICAgJ2J1ZmZlcidcbiAgICAgICAgICAgICAgICBmcmFnbWVudDogJ2J1ZmZlcidcbiAgICAgICAgICAgICxcclxyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogWydwb3NpdGlvbicgJ25vcm1hbCcgJ3V2J11cbiAgICAgICAgICAgICAgICB1bmlmb3JtczogICBAdW5pZm9ybXNcbiAgICAgICAgXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCBcInNoYWRlclwiLCBAc2NlbmUsICBcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6ICAgJ21haW4nXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQ6ICdtYWluJ1xuICAgICAgICAgICAgLFxyXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBbJ3Bvc2l0aW9uJyAnbm9ybWFsJyAndXYnXVxuICAgICAgICAgICAgICAgIHVuaWZvcm1zOiAgIEB1bmlmb3Jtc1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBAcGxhbmUyID0gTWVzaEJ1aWxkZXIuQ3JlYXRlUGxhbmUgXCJwbGFuZTJcIiwgeyB3aWR0aDogMTAsIGhlaWdodDogMTAgfSwgQHNjZW5lXG4gICAgICAgIEBwbGFuZTIubWF0ZXJpYWwgPSBAYnVmZmVyTWF0ZXJpYWxcbiAgICAgICAgQHBsYW5lMi5iaWxsYm9hcmRNb2RlID0gTWVzaC5CSUxMQk9BUkRNT0RFX0FMTFxuXG4gICAgICAgIEBwbGFuZSA9IE1lc2hCdWlsZGVyLkNyZWF0ZVBsYW5lIFwicGxhbmVcIiwgeyB3aWR0aDogMTAsIGhlaWdodDogMTAgfSwgQHNjZW5lXG4gICAgICAgIEBwbGFuZS5tYXRlcmlhbCA9IEBzaGFkZXJNYXRlcmlhbFxuICAgICAgICBAcGxhbmUuYmlsbGJvYXJkTW9kZSA9IE1lc2guQklMTEJPQVJETU9ERV9BTExcbiAgICAgICAgXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5vbkNvbXBpbGVkID0gPT4gXG4gICAgICAgICAgICBAY29tcGlsZVRpbWUgPSBwYXJzZUludCBwZXJmb3JtYW5jZS5ub3coKS1Ac2hhZGVyU3RhcnRcbiAgICAgICAgICAgIGtsb2cgXCJzaGFkZXIgY29tcGlsZVRpbWUgI3tAY29tcGlsZVRpbWUvMTAwMH1zXCIgXG4gICAgICAgICAgICBcbiAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLm9uQ29tcGlsZWQgPSA9PiBcbiAgICAgICAgICAgIGNvbXBpbGVUaW1lID0gcGFyc2VJbnQgcGVyZm9ybWFuY2Uubm93KCktQHNoYWRlclN0YXJ0XG4gICAgICAgICAgICBrbG9nIFwiYnVmZmVyIGNvbXBpbGVUaW1lICN7Y29tcGlsZVRpbWUvMTAwMH1zXCIgXG4gICAgICAgICAgICBcbiAgICAgICAgQHJlbmRlckJ1ZmZlcnMoKVxuICAgICAgICBcbiAgICBzaGFkZXJDb2RlOiAoZnJhZ1NvdXJjZSkgLT5cbiAgICAgICAgXCJcIlwiXG4gICAgICAgICAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IGlUaW1lO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpVGltZURlbHRhO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpRnJhbWVSYXRlO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpTXM7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IGlDb21waWxlO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpRGlzdDtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgaU1pbkRpc3Q7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0IGlNYXhEaXN0O1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpUm90YXRlO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpRGVncmVlO1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWMyICBpRGVsdGE7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzQgIGlNb3VzZTtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjMiAgaVJlc29sdXRpb247XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzMgIGlDZW50ZXI7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzMgIGlDYW1lcmE7XG4gICAgICAgICAgICB1bmlmb3JtIGludCAgIGlGcmFtZTtcbiAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGlDaGFubmVsMDtcbiAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGlDaGFubmVsMTtcbiAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGlDaGFubmVsMjtcbiAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGlDaGFubmVsMztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgI3tmcmFnU291cmNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2b2lkIG1haW4odm9pZCkgXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWFpbkltYWdlKGdsX0ZyYWdDb2xvciwgZ2xfRnJhZ0Nvb3JkLnh5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICBcbiAgICByZW5kZXJCdWZmZXJzOiAtPlxuICAgICAgICAgICAgICAgIFxuICAgICAgICBAcmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldFRleHR1cmUgXCJidWZcIiwgeyB3aWR0aDpAd29ybGQuY2FudmFzLndpZHRoLCBoZWlnaHQ6QHdvcmxkLmNhbnZhcy5oZWlnaHQgfSwgQHNjZW5lLCBmYWxzZSAjLCBmYWxzZSwgVGV4dHVyZS5CSUxJTkVBUl9TQU1QTElOR01PREUsIEVuZ2luZS5URVhUVVJFVFlQRV9CWVRFXG4gICAgICAgIEByZW5kZXJUYXJnZXQucmVuZGVyTGlzdC5wdXNoIEBwbGFuZTJcbiAgICAgICAgQHNjZW5lLmN1c3RvbVJlbmRlclRhcmdldHMucHVzaCBAcmVuZGVyVGFyZ2V0XG4gICAgXHJcbiAgICAgICAgQHJlbmRlclRhcmdldC5vbkJlZm9yZVJlbmRlciA9ICgpID0+IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAa2V5dGV4dHVyZS51cGRhdGUgQHdvcmxkLmtleXNcbiAgICAgICAgICAgIEBwbGFuZTIuaXNWaXNpYmxlID0gdHJ1ZVxuICAgICAgICAgICAgQHBsYW5lMi5wb3NpdGlvbi5jb3B5RnJvbSBAd29ybGQuY2FtZXJhLnBvc2l0aW9uLmFkZCBAd29ybGQuY2FtZXJhLmdldERpcigpLnNjYWxlIDJcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBtb3VzZVggPSBAd29ybGQuY2FtZXJhLm1vdXNlWCAqIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID8gMDtcbiAgICAgICAgICAgIG1vdXNlWSA9IEB3b3JsZC5jYW1lcmEubW91c2VZICogd2luZG93LmRldmljZVBpeGVsUmF0aW8gPyBAd29ybGQuY2FudmFzLmhlaWdodDtcbiAgICAgICAgICAgICBcbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRUZXh0dXJlICdpQ2hhbm5lbDAnICAgQGtleXRleHR1cmVcbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRUZXh0dXJlICdpQ2hhbm5lbDEnICAgQHRleHR1cmVzWzBdXG4gICAgICAgICAgICBAYnVmZmVyTWF0ZXJpYWwuc2V0VGV4dHVyZSAnaUNoYW5uZWwyJyAgIEB0ZXh0dXJlc1sxXVxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldFRleHR1cmUgJ2lDaGFubmVsMycgICBAdGV4dHVyZXNbMl1cbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRJbnQgICAgICdpRnJhbWUnICAgICAgQGlGcmFtZVxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lGcmFtZVJhdGUnICBNYXRoLnJvdW5kIEBmcHNcbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpTXMnICAgICAgICAgQHdvcmxkLmVuZ2luZS5nZXREZWx0YVRpbWUoKVxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lDb21waWxlJyAgICBAY29tcGlsZVRpbWUvMTAwMFxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lUaW1lJyAgICAgICBwZXJmb3JtYW5jZS5ub3coKS8xMDAwXG4gICAgICAgICAgICBAYnVmZmVyTWF0ZXJpYWwuc2V0RmxvYXQgICAnaVRpbWVEZWx0YScgIEB3b3JsZC5lbmdpbmUuZ2V0RGVsdGFUaW1lKCkvMTAwMFxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lEaXN0JyAgICAgICBAd29ybGQuY2FtZXJhLmRpc3RcbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpTWluRGlzdCcgICAgQHdvcmxkLmNhbWVyYS5taW5EaXN0XG4gICAgICAgICAgICBAYnVmZmVyTWF0ZXJpYWwuc2V0RmxvYXQgICAnaU1heERpc3QnICAgIEB3b3JsZC5jYW1lcmEubWF4RGlzdFxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lSb3RhdGUnICAgICBAd29ybGQuY2FtZXJhLnJvdGF0ZVxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lEZWdyZWUnICAgICBAd29ybGQuY2FtZXJhLmRlZ3JlZVxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldFZlY3RvcjIgJ2lEZWx0YScgICAgICBuZXcgVmVjdG9yMihAd29ybGQuY2FtZXJhLm1vdXNlRGVsdGEueCwgQHdvcmxkLmNhbWVyYS5tb3VzZURlbHRhLnkpIFxuICAgICAgICAgICAgQGJ1ZmZlck1hdGVyaWFsLnNldFZlY3RvcjQgJ2lNb3VzZScgICAgICBuZXcgVmVjdG9yNChtb3VzZVgsIEB3b3JsZC5jYW52YXMuaGVpZ2h0LW1vdXNlWSwgQHdvcmxkLmNhbWVyYS5kb3duQnV0dG9ucywgMClcbiAgICAgICAgICAgIEBidWZmZXJNYXRlcmlhbC5zZXRWZWN0b3IyICdpUmVzb2x1dGlvbicgbmV3IFZlY3RvcjIoQHdvcmxkLmNhbnZhcy53aWR0aCwgQHdvcmxkLmNhbnZhcy5oZWlnaHQpXG4gICAgICAgICAgICBAYnVmZmVyTWF0ZXJpYWwuc2V0VmVjdG9yMyAnaUNlbnRlcicgICAgIG5ldyBWZWN0b3IzKEB3b3JsZC5jYW1lcmEuY2VudGVyLngsIEB3b3JsZC5jYW1lcmEuY2VudGVyLnksIEB3b3JsZC5jYW1lcmEuY2VudGVyLnopXG4gICAgICAgICAgICBAYnVmZmVyTWF0ZXJpYWwuc2V0VmVjdG9yMyAnaUNhbWVyYScgICAgIG5ldyBWZWN0b3IzKEB3b3JsZC5jYW1lcmEucG9zaXRpb24ueCwgQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi55LCBAd29ybGQuY2FtZXJhLnBvc2l0aW9uLnopXG4gICAgICAgICAgICBcbiAgICAgICAgQHJlbmRlclRhcmdldC5vbkFmdGVyUmVuZGVyID0gKCkgPT4gXG4gICAgICAgICAgICBcbiAgICAgICAgQHNjZW5lLm9uQWZ0ZXJSZW5kZXJUYXJnZXRzUmVuZGVyT2JzZXJ2YWJsZS5hZGQgPT4gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEB0ZXh0dXJlc1swXS51cGRhdGUgQHJlbmRlclRhcmdldC5yZWFkUGl4ZWxzKClcbiAgICAgICAgICAgIFxuICAgIHJlbmRlcjogLT5cblxuICAgICAgICBAcGxhbmUyLmlzVmlzaWJsZSA9IGZhbHNlXG4gICAgICAgIEBwbGFuZS5wb3NpdGlvbi5jb3B5RnJvbSBAd29ybGQuY2FtZXJhLnBvc2l0aW9uLmFkZCBAd29ybGQuY2FtZXJhLmdldERpcigpLnNjYWxlIDEuNVxuICAgICAgICBcbiAgICAgICAgbW91c2VYID0gQHdvcmxkLmNhbWVyYS5tb3VzZVgqd2luZG93LmRldmljZVBpeGVsUmF0aW8gPyAwO1xuICAgICAgICBtb3VzZVkgPSBAd29ybGQuY2FtZXJhLm1vdXNlWSp3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IEB3b3JsZC5jYW52YXMuaGVpZ2h0O1xuICAgICAgICBcbiAgICAgICAgQGZyYW1lUmF0ZXMucHVzaCBAd29ybGQuZW5naW5lLmdldEZwcygpXG4gICAgICAgIGlmIEBmcmFtZVJhdGVzLmxlbmd0aCA+IDMwIHRoZW4gQGZyYW1lUmF0ZXMuc2hpZnQoKVxuICAgICAgICBAZnBzID0gMFxuICAgICAgICBmb3IgciBpbiBAZnJhbWVSYXRlcyB0aGVuIEBmcHMgKz0gclxuICAgICAgICBAZnBzIC89IEBmcmFtZVJhdGVzLmxlbmd0aFxuXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRUZXh0dXJlICdpQ2hhbm5lbDAnICAgQGtleXRleHR1cmVcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldFRleHR1cmUgJ2lDaGFubmVsMScgICBAdGV4dHVyZXNbMF1cbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldFRleHR1cmUgJ2lDaGFubmVsMicgICBAdGV4dHVyZXNbMV1cbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldFRleHR1cmUgJ2lDaGFubmVsMycgICBAdGV4dHVyZXNbMl1cbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldEludCAgICAgJ2lGcmFtZScgICAgICBAaUZyYW1lKytcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lGcmFtZVJhdGUnICBNYXRoLnJvdW5kIEBmcHNcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lNcycgICAgICAgICBAd29ybGQuZW5naW5lLmdldERlbHRhVGltZSgpXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpQ29tcGlsZScgICAgQGNvbXBpbGVUaW1lLzEwMDBcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lUaW1lJyAgICAgICBwZXJmb3JtYW5jZS5ub3coKS8xMDAwXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpVGltZURlbHRhJyAgQHdvcmxkLmVuZ2luZS5nZXREZWx0YVRpbWUoKS8xMDAwXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpRGlzdCcgICAgICAgQHdvcmxkLmNhbWVyYS5kaXN0XG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpTWluRGlzdCcgICAgQHdvcmxkLmNhbWVyYS5taW5EaXN0XG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpTWF4RGlzdCcgICAgQHdvcmxkLmNhbWVyYS5tYXhEaXN0XG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRGbG9hdCAgICdpUm90YXRlJyAgICAgQHdvcmxkLmNhbWVyYS5yb3RhdGVcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldEZsb2F0ICAgJ2lEZWdyZWUnICAgICBAd29ybGQuY2FtZXJhLmRlZ3JlZVxuICAgICAgICBAc2hhZGVyTWF0ZXJpYWwuc2V0VmVjdG9yMiAnaURlbHRhJyAgICAgIG5ldyBWZWN0b3IyKEB3b3JsZC5jYW1lcmEubW91c2VEZWx0YS54LCBAd29ybGQuY2FtZXJhLm1vdXNlRGVsdGEueSkgXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRWZWN0b3I0ICdpTW91c2UnICAgICAgbmV3IFZlY3RvcjQobW91c2VYLCBAd29ybGQuY2FudmFzLmhlaWdodC1tb3VzZVksIEB3b3JsZC5jYW1lcmEuZG93bkJ1dHRvbnMsIDApXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRWZWN0b3IyICdpUmVzb2x1dGlvbicgbmV3IFZlY3RvcjIoQHdvcmxkLmNhbnZhcy53aWR0aCwgQHdvcmxkLmNhbnZhcy5oZWlnaHQpXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbC5zZXRWZWN0b3IzICdpQ2VudGVyJyAgICAgbmV3IFZlY3RvcjMoQHdvcmxkLmNhbWVyYS5jZW50ZXIueCwgQHdvcmxkLmNhbWVyYS5jZW50ZXIueSwgQHdvcmxkLmNhbWVyYS5jZW50ZXIueilcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldFZlY3RvcjMgJ2lDYW1lcmEnICAgICBuZXcgVmVjdG9yMyhAd29ybGQuY2FtZXJhLnBvc2l0aW9uLngsIEB3b3JsZC5jYW1lcmEucG9zaXRpb24ueSwgQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi56KVxuICAgICAgICAgICAgXG4gICAgICAgIGZvciBpIGluIFsyNTYuLi41MTJdIFxuICAgICAgICAgICAgQHdvcmxkLmtleXNbaV0gPSAwXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXJcbiJdfQ==
//# sourceURL=../coffee/shader.coffee