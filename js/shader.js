// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Mesh, MeshBuilder, RawTexture, Shader, ShaderMaterial, Vector2, Vector3, Vector4, performance, ref, slash;

ref = require('babylonjs'), Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, RawTexture = ref.RawTexture, ShaderMaterial = ref.ShaderMaterial, Vector2 = ref.Vector2, Vector3 = ref.Vector3, Vector4 = ref.Vector4;

performance = require('perf_hooks').performance;

slash = require('kxk').slash;

Shader = (function() {
    function Shader(world) {
        var fragSource, fragmentShader, vertexShader;
        this.world = world;
        this.scene = this.world.scene;
        this.frameRates = [];
        this.iFrame = 0;
        vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragSource = slash.readText(__dirname + "/../shader/worm.frag");
        fragmentShader = "precision highp float;\nuniform float iTime;\nuniform float iTimeDelta;\nuniform float iFrameRate;\nuniform float iMs;\nuniform float iDist;\nuniform float iMinDist;\nuniform float iMaxDist;\nuniform float iRotate;\nuniform float iDegree;\nuniform vec2  iDelta;\nuniform vec4  iMouse;\nuniform vec2  iResolution;\nuniform vec3  iCenter;\nuniform vec3  iCamera;\nuniform int   iFrame;\nuniform sampler2D iChannel0;\n\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            fragmentSource: fragmentShader,
            vertexSource: vertexShader
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iMs', 'iDist', 'iMaxDist', 'iMinDist', 'iCenter', 'iCamera', 'iFrameRate', 'iDelta', 'iTime', 'iTimeDelta', 'iMouse', 'iResolution', 'iRotate', 'iDegree', 'iFrame']
        });
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
    }

    Shader.prototype.render = function() {
        var dpr, fps, i, j, k, len, mouseX, mouseY, r, ref1, ref2, ref3, results;
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(2)));
        dpr = window.devicePixelRatio;
        mouseX = (ref1 = this.world.camera.mouseX) != null ? ref1 : 0;
        mouseY = (ref2 = this.world.camera.mouseY) != null ? ref2 : this.world.canvas.height / dpr;
        this.frameRates.push(this.world.engine.getFps());
        if (this.frameRates.length > 30) {
            this.frameRates.shift();
        }
        fps = 0;
        ref3 = this.frameRates;
        for (j = 0, len = ref3.length; j < len; j++) {
            r = ref3[j];
            fps += r;
        }
        fps /= this.frameRates.length;
        this.shaderMaterial.setTexture('iChannel0', RawTexture.CreateRTexture(this.world.keys, 256, 3, this.scene, false));
        this.shaderMaterial.setInt('iFrame', this.iFrame++);
        this.shaderMaterial.setFloat('iFrameRate', Math.round(fps));
        this.shaderMaterial.setFloat('iMs', this.world.engine.getDeltaTime());
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setFloat('iTimeDelta', this.world.engine.getDeltaTime() / 1000);
        this.shaderMaterial.setFloat('iDist', this.world.camera.dist);
        this.shaderMaterial.setFloat('iMinDist', this.world.camera.minDist);
        this.shaderMaterial.setFloat('iMaxDist', this.world.camera.maxDist);
        this.shaderMaterial.setFloat('iRotate', this.world.camera.rotate);
        this.shaderMaterial.setFloat('iDegree', this.world.camera.degree);
        this.shaderMaterial.setVector2('iDelta', new Vector2(this.world.camera.mouseDelta.x, this.world.camera.mouseDelta.y));
        this.shaderMaterial.setVector4('iMouse', new Vector4(mouseX * dpr, this.world.canvas.height - mouseY * dpr, this.world.camera.downButtons, 0));
        this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
        this.shaderMaterial.setVector3('iCenter', new Vector3(this.world.camera.center.x, this.world.camera.center.y, this.world.camera.center.z));
        this.shaderMaterial.setVector3('iCamera', new Vector3(this.world.camera.position.x, this.world.camera.position.y, this.world.camera.position.z));
        results = [];
        for (i = k = 256; k < 512; i = ++k) {
            results.push(this.world.keys[i] = 0);
        }
        return results;
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shader.coffee