// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Mesh, MeshBuilder, Shader, ShaderMaterial, Vector2, performance, ref, slash;

ref = require('babylonjs'), Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, ShaderMaterial = ref.ShaderMaterial, Vector2 = ref.Vector2;

performance = require('perf_hooks').performance;

slash = require('kxk').slash;

Shader = (function() {
    function Shader(world) {
        var fragSource, fragmentShader, vertexShader;
        this.world = world;
        this.scene = this.world.scene;
        vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragSource = slash.readText(__dirname + "/../shader/sdf.frag");
        fragmentShader = "precision highp float;\nuniform float iTime;\nuniform vec2  iMouse;\nuniform vec2  iResolution;\n\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            fragmentSource: fragmentShader,
            vertexSource: vertexShader
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iTime', 'iMouse', 'iResolution']
        });
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
    }

    Shader.prototype.render = function() {
        var dpr, mouseX, mouseY, ref1, ref2;
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(2)));
        dpr = window.devicePixelRatio;
        mouseX = (ref1 = this.world.camera.mouseX) != null ? ref1 : 0;
        mouseY = (ref2 = this.world.camera.mouseY) != null ? ref2 : this.world.canvas.height / dpr;
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setVector2('iMouse', new Vector2(mouseX * dpr, this.world.canvas.height - mouseY * dpr));
        return this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQTs7QUFRQSxNQUFpRCxPQUFBLENBQVEsV0FBUixDQUFqRCxFQUFFLGVBQUYsRUFBUSw2QkFBUixFQUFxQixtQ0FBckIsRUFBcUM7O0FBQ25DLGNBQWdCLE9BQUEsQ0FBUSxZQUFSOztBQUNoQixRQUFVLE9BQUEsQ0FBUSxLQUFSOztBQUdOO0lBRUMsZ0JBQUMsS0FBRDtBQUVDLFlBQUE7UUFGQSxJQUFDLENBQUEsUUFBRDtRQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQztRQUVoQixZQUFBLEdBQWdCO1FBVWhCLFVBQUEsR0FBYSxLQUFLLENBQUMsUUFBTixDQUFrQixTQUFELEdBQVcscUJBQTVCO1FBRWIsY0FBQSxHQUFpQixxR0FBQSxHQU1YLFVBTlcsR0FNQTtRQVFqQixJQUFDLENBQUEsY0FBRCxHQUFrQixJQUFJLGNBQUosQ0FBbUIsUUFBbkIsRUFBNkIsSUFBQyxDQUFBLEtBQTlCLEVBQ1Y7WUFBQSxjQUFBLEVBQWUsY0FBZjtZQUNBLFlBQUEsRUFBZSxZQURmO1NBRFUsRUFJVjtZQUFBLFVBQUEsRUFBWSxDQUFDLFVBQUQsRUFBWSxRQUFaLEVBQXFCLElBQXJCLENBQVo7WUFDQSxRQUFBLEVBQVksQ0FBQyxxQkFBRCxFQUF1QixPQUF2QixFQUErQixRQUEvQixFQUF3QyxhQUF4QyxDQURaO1NBSlU7UUFPbEIsSUFBQyxDQUFBLEtBQUQsR0FBUyxXQUFXLENBQUMsV0FBWixDQUF3QixPQUF4QixFQUFpQztZQUFFLEtBQUEsRUFBTyxFQUFUO1lBQWEsTUFBQSxFQUFRLEVBQXJCO1NBQWpDLEVBQTRELElBQUMsQ0FBQSxLQUE3RDtRQUNULElBQUMsQ0FBQSxLQUFLLENBQUMsUUFBUCxHQUFrQixJQUFDLENBQUE7UUFDbkIsSUFBQyxDQUFBLEtBQUssQ0FBQyxhQUFQLEdBQXVCLElBQUksQ0FBQztJQXZDN0I7O3FCQXlDSCxNQUFBLEdBQVEsU0FBQTtBQUVKLFlBQUE7UUFBQSxJQUFDLENBQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFoQixDQUF5QixJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBdkIsQ0FBMkIsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBZCxDQUFBLENBQXNCLENBQUMsS0FBdkIsQ0FBNkIsQ0FBN0IsQ0FBM0IsQ0FBekI7UUFFQSxHQUFBLEdBQU0sTUFBTSxDQUFDO1FBRWIsTUFBQSxzREFBZ0M7UUFDaEMsTUFBQSxzREFBZ0MsSUFBQyxDQUFBLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBZCxHQUFxQjtRQUVyRCxJQUFDLENBQUEsY0FBYyxDQUFDLFFBQWhCLENBQTJCLE9BQTNCLEVBQW1DLFdBQVcsQ0FBQyxHQUFaLENBQUEsQ0FBQSxHQUFrQixJQUFyRDtRQUNBLElBQUMsQ0FBQSxjQUFjLENBQUMsVUFBaEIsQ0FBMkIsUUFBM0IsRUFBeUMsSUFBSSxPQUFKLENBQVksTUFBQSxHQUFPLEdBQW5CLEVBQXdCLElBQUMsQ0FBQSxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQWQsR0FBcUIsTUFBQSxHQUFPLEdBQXBELENBQXpDO2VBQ0EsSUFBQyxDQUFBLGNBQWMsQ0FBQyxVQUFoQixDQUEyQixhQUEzQixFQUF5QyxJQUFJLE9BQUosQ0FBWSxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUExQixFQUFpQyxJQUFDLENBQUEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUEvQyxDQUF6QztJQVhJOzs7Ozs7QUFhWixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgTWVzaCwgTWVzaEJ1aWxkZXIsIFNoYWRlck1hdGVyaWFsLCBWZWN0b3IyIH0gPSByZXF1aXJlICdiYWJ5bG9uanMnXG57IHBlcmZvcm1hbmNlIH0gPSByZXF1aXJlICdwZXJmX2hvb2tzJ1xueyBzbGFzaCB9ID0gcmVxdWlyZSAna3hrJ1xuIyBWZWN0ID0gcmVxdWlyZSAnLi92ZWN0J1xuICAgICAgICBcbmNsYXNzIFNoYWRlclxuICAgIFxuICAgIEA6IChAd29ybGQpIC0+XG5cbiAgICAgICAgQHNjZW5lID0gQHdvcmxkLnNjZW5lXG4gICAgICAgIFxuICAgICAgICB2ZXJ0ZXhTaGFkZXIgPSAgXCJcIlwiXG4gICAgICAgICAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XG4gICAgICAgICAgICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjtcbiAgICAgICAgICAgIGF0dHJpYnV0ZSB2ZWMyIHV2O1xuICAgICAgICAgICAgdW5pZm9ybSBtYXQ0IHdvcmxkVmlld1Byb2plY3Rpb247XG4gICAgICAgICAgICB2b2lkIG1haW4odm9pZCkge1xuICAgICAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gd29ybGRWaWV3UHJvamVjdGlvbiAqIHZlYzQocG9zaXRpb24sIDEuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcIlwiXCJcbiAgICAgICAgXHJcbiAgICAgICAgZnJhZ1NvdXJjZSA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci9zZGYuZnJhZ1wiXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBmcmFnbWVudFNoYWRlciA9IFwiXCJcIlxuICAgICAgICAgICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCBpVGltZTtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjMiAgaU1vdXNlO1xuICAgICAgICAgICAgdW5pZm9ybSB2ZWMyICBpUmVzb2x1dGlvbjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgI3tmcmFnU291cmNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2b2lkIG1haW4odm9pZCkgXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWFpbkltYWdlKGdsX0ZyYWdDb2xvciwgZ2xfRnJhZ0Nvb3JkLnh5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgXG4gICAgICAgIEBzaGFkZXJNYXRlcmlhbCA9IG5ldyBTaGFkZXJNYXRlcmlhbCBcInNoYWRlclwiLCBAc2NlbmUsICBcbiAgICAgICAgICAgICAgICBmcmFnbWVudFNvdXJjZTpmcmFnbWVudFNoYWRlclxuICAgICAgICAgICAgICAgIHZlcnRleFNvdXJjZTogIHZlcnRleFNoYWRlclxuICAgICAgICAgICAgLFxyXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBbJ3Bvc2l0aW9uJyAnbm9ybWFsJyAndXYnXVxuICAgICAgICAgICAgICAgIHVuaWZvcm1zOiAgIFsnd29ybGRWaWV3UHJvamVjdGlvbicgJ2lUaW1lJyAnaU1vdXNlJyAnaVJlc29sdXRpb24nXVxuICAgICAgICAgICAgXG4gICAgICAgIEBwbGFuZSA9IE1lc2hCdWlsZGVyLkNyZWF0ZVBsYW5lIFwicGxhbmVcIiwgeyB3aWR0aDogMTAsIGhlaWdodDogMTAgfSwgQHNjZW5lXG4gICAgICAgIEBwbGFuZS5tYXRlcmlhbCA9IEBzaGFkZXJNYXRlcmlhbFxuICAgICAgICBAcGxhbmUuYmlsbGJvYXJkTW9kZSA9IE1lc2guQklMTEJPQVJETU9ERV9BTExcbiAgICAgICAgICAgXG4gICAgcmVuZGVyOiAtPlxuICAgICAgICBcbiAgICAgICAgQHBsYW5lLnBvc2l0aW9uLmNvcHlGcm9tIEB3b3JsZC5jYW1lcmEucG9zaXRpb24uYWRkIEB3b3JsZC5jYW1lcmEuZ2V0RGlyKCkuc2NhbGUgMlxuICAgICAgICBcbiAgICAgICAgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW9cbiAgICAgICAgXG4gICAgICAgIG1vdXNlWCA9IEB3b3JsZC5jYW1lcmEubW91c2VYID8gMDtcbiAgICAgICAgbW91c2VZID0gQHdvcmxkLmNhbWVyYS5tb3VzZVkgPyBAd29ybGQuY2FudmFzLmhlaWdodC9kcHI7XG4gICAgICAgIFxuICAgICAgICBAc2hhZGVyTWF0ZXJpYWwuc2V0RmxvYXQgICAnaVRpbWUnIHBlcmZvcm1hbmNlLm5vdygpLzEwMDBcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLnNldFZlY3RvcjIgJ2lNb3VzZScgICAgICBuZXcgVmVjdG9yMihtb3VzZVgqZHByLCBAd29ybGQuY2FudmFzLmhlaWdodC1tb3VzZVkqZHByKVxuICAgICAgICBAc2hhZGVyTWF0ZXJpYWwuc2V0VmVjdG9yMiAnaVJlc29sdXRpb24nIG5ldyBWZWN0b3IyKEB3b3JsZC5jYW52YXMud2lkdGgsIEB3b3JsZC5jYW52YXMuaGVpZ2h0KVxuICAgICAgICAgICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXJcbiJdfQ==
//# sourceURL=../coffee/shader.coffee