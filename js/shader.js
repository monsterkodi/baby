// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Engine, Mesh, MeshBuilder, RawTexture, RenderTargetTexture, Scene, Shader, ShaderMaterial, Texture, Vector2, Vector3, Vector4, klog, performance, ref, ref1, slash;

ref = require('babylonjs'), Engine = ref.Engine, Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, RawTexture = ref.RawTexture, RenderTargetTexture = ref.RenderTargetTexture, Scene = ref.Scene, ShaderMaterial = ref.ShaderMaterial, Texture = ref.Texture, Vector2 = ref.Vector2, Vector3 = ref.Vector3, Vector4 = ref.Vector4;

performance = require('perf_hooks').performance;

ref1 = require('kxk'), klog = ref1.klog, slash = ref1.slash;

Shader = (function() {
    function Shader(world) {
        var buffer, fragSource, i, j, k, l, m;
        this.world = world;
        this.scene = this.world.scene;
        this.frameRates = [];
        this.buffers = [];
        this.textures = [];
        klog("buffers " + this.world.canvas.width + "x" + this.world.canvas.height);
        for (i = k = 0; k < 3; i = ++k) {
            buffer = new Int8Array(4 * this.world.canvas.width * this.world.canvas.height);
            this.buffers.push(buffer);
            l = buffer.length;
            for (j = m = 0; m < 2; j = ++m) {
                buffer[j * 4] = 255;
                buffer[j * 4 + 1] = 255;
                buffer[j * 4 + 2] = 255;
                buffer[j * 4 + 3] = 255;
            }
            this.textures.push(new RawTexture(buffer, this.world.canvas.width, this.world.canvas.height, Engine.TEXTUREFORMAT_RGBA, this.scene, false, false, Texture.NEAREST_SAMPLINGMODE, Engine.TEXTURETYPE_BYTE));
        }
        this.textures[1] = new Texture(__dirname + "/../img/font.png", this.scene);
        this.iFrame = 0;
        this.vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragSource = slash.readText(__dirname + "/../shader/follow.frag");
        this.uniforms = ['worldViewProjection', 'iMs', 'iDist', 'iMaxDist', 'iMinDist', 'iCenter', 'iCamera', 'iFrameRate', 'iDelta', 'iTime', 'iTimeDelta', 'iMouse', 'iResolution', 'iRotate', 'iDegree', 'iFrame', 'iCompile'];
        this.shaderStart = performance.now();
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            vertexSource: this.vertexShader,
            fragmentSource: this.shaderCode(fragSource)
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: this.uniforms
        });
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.planeFake = MeshBuilder.CreatePlane("planeFake", {
            width: 1,
            height: 1
        }, this.scene);
        this.planeFake.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.shaderMaterial.onCompiled = (function(_this) {
            return function() {
                _this.compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("compileTime " + (_this.compileTime / 1000) + "s");
            };
        })(this);
        this.renderBuffers();
    }

    Shader.prototype.shaderCode = function(fragSource) {
        return "precision highp float;\nuniform float iTime;\nuniform float iTimeDelta;\nuniform float iFrameRate;\nuniform float iMs;\nuniform float iCompile;\nuniform float iDist;\nuniform float iMinDist;\nuniform float iMaxDist;\nuniform float iRotate;\nuniform float iDegree;\nuniform vec2  iDelta;\nuniform vec4  iMouse;\nuniform vec2  iResolution;\nuniform vec3  iCenter;\nuniform vec3  iCamera;\nuniform int   iFrame;\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\nuniform sampler2D iChannel3;\n\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
    };

    Shader.prototype.renderBuffers = function() {
        var bufferSource;
        bufferSource = slash.readText(__dirname + "/../shader/buffer.frag");
        this.sceneFake = new Scene(this);
        this.bufferMaterial = new ShaderMaterial("bufferShader", this.scene, {
            vertexSource: this.vertexShader,
            fragmentSource: this.shaderCode(bufferSource)
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: this.uniforms
        });
        this.plane2 = MeshBuilder.CreatePlane("plane2", {
            width: 1,
            height: 1
        }, this.scene);
        this.plane2.material = this.bufferMaterial;
        this.plane2.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.renderTarget = new RenderTargetTexture("buf", {
            width: this.world.canvas.width,
            height: this.world.canvas.height
        }, this.scene, false);
        this.renderTarget.renderList.push(this.plane2);
        this.scene.customRenderTargets.push(this.renderTarget);
        this.rttMaterial = new BABYLON.StandardMaterial("RTT material", this.scene);
        this.rttMaterial.emissiveTexture = this.renderTarget;
        this.rttMaterial.disableLighting = true;
        return this.planeFake.material = this.rttMaterial;
    };

    Shader.prototype.render = function() {
        var dpr, fps, i, k, len, m, mouseX, mouseY, r, ref2, ref3, ref4, results;
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(2)));
        dpr = window.devicePixelRatio;
        mouseX = (ref2 = this.world.camera.mouseX) != null ? ref2 : 0;
        mouseY = (ref3 = this.world.camera.mouseY) != null ? ref3 : this.world.canvas.height / dpr;
        this.frameRates.push(this.world.engine.getFps());
        if (this.frameRates.length > 30) {
            this.frameRates.shift();
        }
        fps = 0;
        ref4 = this.frameRates;
        for (k = 0, len = ref4.length; k < len; k++) {
            r = ref4[k];
            fps += r;
        }
        fps /= this.frameRates.length;
        this.shaderMaterial.setTexture('iChannel0', RawTexture.CreateRTexture(this.world.keys, 256, 3, this.scene, false));
        this.shaderMaterial.setTexture('iChannel1', this.textures[0]);
        this.shaderMaterial.setTexture('iChannel2', this.textures[1]);
        this.shaderMaterial.setTexture('iChannel3', this.textures[2]);
        this.shaderMaterial.setInt('iFrame', this.iFrame++);
        this.shaderMaterial.setFloat('iFrameRate', Math.round(fps));
        this.shaderMaterial.setFloat('iMs', this.world.engine.getDeltaTime());
        this.shaderMaterial.setFloat('iCompile', this.compileTime / 1000);
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setFloat('iTimeDelta', this.world.engine.getDeltaTime() / 1000);
        this.shaderMaterial.setFloat('iDist', this.world.camera.dist);
        this.shaderMaterial.setFloat('iMinDist', this.world.camera.minDist);
        this.shaderMaterial.setFloat('iMaxDist', this.world.camera.maxDist);
        this.shaderMaterial.setFloat('iRotate', this.world.camera.rotate);
        this.shaderMaterial.setFloat('iDegree', this.world.camera.degree);
        this.shaderMaterial.setVector2('iDelta', new Vector2(this.world.camera.mouseDelta.x, this.world.camera.mouseDelta.y));
        this.shaderMaterial.setVector4('iMouse', new Vector4(mouseX * dpr, this.world.canvas.height - mouseY * dpr, this.world.camera.downButtons, 0));
        this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
        this.shaderMaterial.setVector3('iCenter', new Vector3(this.world.camera.center.x, this.world.camera.center.y, this.world.camera.center.z));
        this.shaderMaterial.setVector3('iCamera', new Vector3(this.world.camera.position.x, this.world.camera.position.y, this.world.camera.position.z));
        results = [];
        for (i = m = 256; m < 512; i = ++m) {
            results.push(this.world.keys[i] = 0);
        }
        return results;
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shader.coffee