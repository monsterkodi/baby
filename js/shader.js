// koffee 1.7.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var Effect, Engine, Mesh, MeshBuilder, RawTexture, RenderTargetTexture, Shader, ShaderMaterial, Texture, Vector2, Vector3, Vector4, klog, performance, ref, ref1, slash,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ref = require('babylonjs'), Effect = ref.Effect, Engine = ref.Engine, Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, RawTexture = ref.RawTexture, RenderTargetTexture = ref.RenderTargetTexture, ShaderMaterial = ref.ShaderMaterial, Texture = ref.Texture, Vector2 = ref.Vector2, Vector3 = ref.Vector3, Vector4 = ref.Vector4;

performance = require('perf_hooks').performance;

ref1 = require('kxk'), klog = ref1.klog, slash = ref1.slash;

Shader = (function() {
    function Shader(world) {
        var buffer, bufferSource, fragSource;
        this.world = world;
        this.materialData = bind(this.materialData, this);
        this.scene = this.world.scene;
        this.bufferSize = {
            width: 256,
            height: 256
        };
        this.frameRates = [];
        buffer = new Float32Array(4 * this.bufferSize.width * this.bufferSize.height);
        this.textures = {
            keys: RawTexture.CreateRTexture(this.world.keys, 256, 3, this.scene, false),
            buffer: new RawTexture(buffer, this.bufferSize.width, this.bufferSize.height, Engine.TEXTUREFORMAT_RGBA, this.scene, false, false, Texture.BILINEAR_SAMPLINGMODE, Engine.TEXTURETYPE_FLOAT),
            font: new Texture(__dirname + "/../img/font.png", this.scene)
        };
        this.iFrame = 0;
        this.vertexShader = "precision highp float; attribute vec3 position; attribute vec2 uv; uniform mat4 worldViewProjection;\nvoid main(void) { gl_Position = worldViewProjection * vec4(position, 1.0); }";
        fragSource = slash.readText(__dirname + "/../shader/follow.frag");
        bufferSource = slash.readText(__dirname + "/../shader/buffer.frag");
        this.commonSource = slash.readText(__dirname + "/../shader/common.frag");
        Effect.ShadersStore.mainVertexShader = this.vertexShader;
        Effect.ShadersStore.mainFragmentShader = this.shaderCode(fragSource);
        Effect.ShadersStore.bufferVertexShader = this.vertexShader;
        Effect.ShadersStore.bufferFragmentShader = this.shaderCode(bufferSource);
        this.shaderStart = performance.now();
        this.bufferMaterial = this.shaderMaterial('buffer');
        this.shaderMaterial = this.shaderMaterial('main');
        this.plane2 = MeshBuilder.CreatePlane("plane2", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane2.material = this.bufferMaterial;
        this.plane2.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.plane = MeshBuilder.CreatePlane("plane", {
            width: 10,
            height: 10
        }, this.scene);
        this.plane.material = this.shaderMaterial;
        this.plane.billboardMode = Mesh.BILLBOARDMODE_ALL;
        this.shaderMaterial.onCompiled = (function(_this) {
            return function() {
                _this.compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("shader compileTime " + (_this.compileTime / 1000) + "s");
            };
        })(this);
        this.bufferMaterial.onCompiled = (function(_this) {
            return function() {
                var compileTime;
                compileTime = parseInt(performance.now() - _this.shaderStart);
                return klog("buffer compileTime " + (compileTime / 1000) + "s");
            };
        })(this);
        this.renderTarget = new RenderTargetTexture("buf", this.bufferSize, this.scene, false, false, Texture.BILINEAR_SAMPLINGMODE, Engine.TEXTURETYPE_FLOAT);
        this.renderTarget.renderList.push(this.plane2);
        this.scene.customRenderTargets.push(this.renderTarget);
        this.renderTarget.onBeforeRender = (function(_this) {
            return function() {
                _this.plane2.position.copyFrom(_this.world.camera.position.add(_this.world.camera.getDir().scale(2)));
                return _this.materialData(_this.bufferMaterial);
            };
        })(this);
        this.scene.onBeforeRenderObservable.add((function(_this) {
            return function() {
                var j, len, r, ref2, ref3, ref4, ref5, ref6;
                _this.textures.keys.update(_this.world.keys);
                _this.iResolution = new Vector3(_this.world.canvas.width, _this.world.canvas.height, 1);
                _this.iDelta = new Vector2(_this.world.camera.mouse.delta.x, _this.world.camera.mouse.delta.y);
                _this.iMouse = new Vector4(_this.world.camera.mouse.pos.x * ((ref2 = window.devicePixelRatio) != null ? ref2 : 0), _this.iResolution.y - (_this.world.camera.mouse.pos.y * ((ref3 = window.devicePixelRatio) != null ? ref3 : _this.iResolution.y)), (_this.world.camera.mouse.buttons && 1 || -1) * _this.world.camera.mouse.down.x * ((ref4 = window.devicePixelRatio) != null ? ref4 : 0), (_this.world.camera.mouse.buttons && 1 || -1) * (_this.iResolution.y - (_this.world.camera.mouse.down.y * ((ref5 = window.devicePixelRatio) != null ? ref5 : _this.iResolution.y))));
                _this.iCenter = new Vector3(_this.world.camera.center.x, _this.world.camera.center.y, _this.world.camera.center.z);
                _this.iCamera = new Vector3(_this.world.camera.position.x, _this.world.camera.position.y, _this.world.camera.position.z);
                _this.iTime = performance.now() / 1000;
                _this.iTimeDelta = _this.world.engine.getDeltaTime() / 1000;
                _this.frameRates.push(_this.world.engine.getFps());
                if (_this.frameRates.length > 30) {
                    _this.frameRates.shift();
                }
                _this.fps = 0;
                ref6 = _this.frameRates;
                for (j = 0, len = ref6.length; j < len; j++) {
                    r = ref6[j];
                    _this.fps += r;
                }
                return _this.fps /= _this.frameRates.length;
            };
        })(this));
        this.scene.onAfterRenderTargetsRenderObservable.add((function(_this) {
            return function() {
                return _this.textures.buffer.update(_this.renderTarget.readPixels());
            };
        })(this));
        this.scene.onAfterRenderObservable.add((function(_this) {
            return function() {
                var i, j, results;
                _this.iFrame++;
                results = [];
                for (i = j = 256; j < 512; i = ++j) {
                    results.push(_this.world.keys[i] = 0);
                }
                return results;
            };
        })(this));
    }

    Shader.prototype.render = function() {
        this.plane.position.copyFrom(this.world.camera.position.add(this.world.camera.getDir().scale(1.5)));
        return this.materialData(this.shaderMaterial);
    };

    Shader.prototype.materialData = function(m) {
        m.setTexture('iChannel0', this.textures.keys);
        m.setTexture('iChannel1', this.textures.buffer);
        m.setTexture('iChannel2', this.textures.font);
        m.setInt('iFrame', this.iFrame);
        m.setFloat('iCompile', this.compileTime / 1000);
        m.setFloat('iTime', this.iTime);
        m.setFloat('iTimeDelta', this.iTimeDelta);
        m.setVector2('iDelta', this.iDelta);
        m.setVector4('iMouse', this.iMouse);
        m.setVector3('iResolution', this.iResolution);
        m.setVector3('iCenter', this.iCenter);
        m.setVector3('iCamera', this.iCamera);
        m.setFloat('iDist', this.world.camera.dist);
        m.setFloat('iMinDist', this.world.camera.minDist);
        m.setFloat('iMaxDist', this.world.camera.maxDist);
        m.setFloat('iRotate', this.world.camera.rotate);
        m.setFloat('iDegree', this.world.camera.degree);
        m.setFloat('iFrameRate', Math.round(this.fps));
        return m.setFloat('iMs', this.world.engine.getDeltaTime());
    };

    Shader.prototype.shaderMaterial = function(key) {
        return new ShaderMaterial(key + "Shader", this.scene, {
            vertex: key,
            fragment: key
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iCamera', 'iCenter', 'iDist', 'iMaxDist', 'iMinDist', 'iFrameRate', 'iMs', 'iFrame', 'iDelta', 'iTime', 'iTimeDelta', 'iMouse', 'iResolution', 'iRotate', 'iDegree', 'iCompile']
        });
    };

    Shader.prototype.shaderCode = function(fragSource) {
        return "precision highp float;\nuniform float     iTime;\nuniform float     iTimeDelta;\nuniform float     iFrameRate;\nuniform float     iMs;\nuniform float     iCompile;\nuniform float     iDist;\nuniform float     iMinDist;\nuniform float     iMaxDist;\nuniform float     iRotate;\nuniform float     iDegree;\nuniform vec2      iDelta;\nuniform vec4      iMouse;\nuniform vec3      iResolution;\nuniform vec3      iCenter;\nuniform vec3      iCamera;\nuniform int       iFrame;\nuniform sampler2D iChannel0;\nuniform sampler2D iChannel1;\nuniform sampler2D iChannel2;\n\n" + this.commonSource + "\n" + fragSource + "\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZGVyLmpzIiwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7O0FBQUEsSUFBQSxtS0FBQTtJQUFBOztBQVFBLE1BQTZILE9BQUEsQ0FBUSxXQUFSLENBQTdILEVBQUUsbUJBQUYsRUFBVSxtQkFBVixFQUFrQixlQUFsQixFQUF3Qiw2QkFBeEIsRUFBcUMsMkJBQXJDLEVBQWlELDZDQUFqRCxFQUFzRSxtQ0FBdEUsRUFBc0YscUJBQXRGLEVBQStGLHFCQUEvRixFQUF3RyxxQkFBeEcsRUFBaUg7O0FBQy9HLGNBQWdCLE9BQUEsQ0FBUSxZQUFSOztBQUNsQixPQUFrQixPQUFBLENBQVEsS0FBUixDQUFsQixFQUFFLGdCQUFGLEVBQVE7O0FBRUY7SUFFQyxnQkFBQyxLQUFEO0FBRUMsWUFBQTtRQUZBLElBQUMsQ0FBQSxRQUFEOztRQUVBLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBLEtBQUssQ0FBQztRQUNoQixJQUFDLENBQUEsVUFBRCxHQUFjO1lBQUEsS0FBQSxFQUFNLEdBQU47WUFBVyxNQUFBLEVBQU8sR0FBbEI7O1FBQ2QsSUFBQyxDQUFBLFVBQUQsR0FBYztRQUVkLE1BQUEsR0FBUyxJQUFJLFlBQUosQ0FBaUIsQ0FBQSxHQUFFLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBZCxHQUFvQixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQWpEO1FBRVQsSUFBQyxDQUFBLFFBQUQsR0FDSTtZQUFBLElBQUEsRUFBUSxVQUFVLENBQUMsY0FBWCxDQUEwQixJQUFDLENBQUEsS0FBSyxDQUFDLElBQWpDLEVBQXVDLEdBQXZDLEVBQTRDLENBQTVDLEVBQStDLElBQUMsQ0FBQSxLQUFoRCxFQUF1RCxLQUF2RCxDQUFSO1lBQ0EsTUFBQSxFQUFRLElBQUksVUFBSixDQUFlLE1BQWYsRUFBdUIsSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFuQyxFQUEwQyxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQXRE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RCxHQUFLLFFBQTFCLEVBQW1DLElBQUMsQ0FBQSxLQUFwQyxFQUNRO1lBQUEsTUFBQSxFQUFVLEdBQVY7WUFDQSxRQUFBLEVBQVUsR0FEVjtTQURSLEVBSVE7WUFBQSxVQUFBLEVBQVksQ0FBQyxVQUFELEVBQVksUUFBWixFQUFxQixJQUFyQixDQUFaO1lBQ0EsUUFBQSxFQUFZLENBQ1IscUJBRFEsRUFFUixTQUZRLEVBRUUsU0FGRixFQUVZLE9BRlosRUFFb0IsVUFGcEIsRUFFK0IsVUFGL0IsRUFHUixZQUhRLEVBR0ssS0FITCxFQUdXLFFBSFgsRUFJUixRQUpRLEVBSUMsT0FKRCxFQUlTLFlBSlQsRUFLUixRQUxRLEVBS0MsYUFMRCxFQU1SLFNBTlEsRUFNRSxTQU5GLEVBT1IsVUFQUSxDQURaO1NBSlI7SUFGWTs7cUJBaUJoQixVQUFBLEdBQVksU0FBQyxVQUFEO2VBQ1Isd2pCQUFBLEdBc0JNLElBQUMsQ0FBQSxZQXRCUCxHQXNCb0IsSUF0QnBCLEdBdUJNLFVBdkJOLEdBdUJpQjtJQXhCVDs7Ozs7O0FBZ0NoQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuIDAwMDAwMDAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIFxuMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMDAwMDAwMCAgMDAwMDAwMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuMDAwMDAwMCAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuIyMjXG5cbnsgRWZmZWN0LCBFbmdpbmUsIE1lc2gsIE1lc2hCdWlsZGVyLCBSYXdUZXh0dXJlLCBSZW5kZXJUYXJnZXRUZXh0dXJlLCBTaGFkZXJNYXRlcmlhbCwgVGV4dHVyZSwgVmVjdG9yMiwgVmVjdG9yMywgVmVjdG9yNCB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xueyBwZXJmb3JtYW5jZSB9ID0gcmVxdWlyZSAncGVyZl9ob29rcydcbnsga2xvZywgc2xhc2ggfSA9IHJlcXVpcmUgJ2t4aydcbiAgICAgICAgXG5jbGFzcyBTaGFkZXJcbiAgICBcbiAgICBAOiAoQHdvcmxkKSAtPlxuXG4gICAgICAgIEBzY2VuZSA9IEB3b3JsZC5zY2VuZVxuICAgICAgICBAYnVmZmVyU2l6ZSA9IHdpZHRoOjI1NiwgaGVpZ2h0OjI1NlxuICAgICAgICBAZnJhbWVSYXRlcyA9IFtdXG5cbiAgICAgICAgYnVmZmVyID0gbmV3IEZsb2F0MzJBcnJheSA0KkBidWZmZXJTaXplLndpZHRoKkBidWZmZXJTaXplLmhlaWdodFxuICAgICAgICAgICAgXG4gICAgICAgIEB0ZXh0dXJlcyA9IFxuICAgICAgICAgICAga2V5czogICBSYXdUZXh0dXJlLkNyZWF0ZVJUZXh0dXJlIEB3b3JsZC5rZXlzLCAyNTYsIDMsIEBzY2VuZSwgZmFsc2VcbiAgICAgICAgICAgIGJ1ZmZlcjogbmV3IFJhd1RleHR1cmUgYnVmZmVyLCBAYnVmZmVyU2l6ZS53aWR0aCwgQGJ1ZmZlclNpemUuaGVpZ2h0LCBFbmdpbmUuVEVYVFVSRUZPUk1BVF9SR0JBLCBAc2NlbmUsIGZhbHNlLCBmYWxzZSwgVGV4dHVyZS5CSUxJTkVBUl9TQU1QTElOR01PREUsIEVuZ2luZS5URVhUVVJFVFlQRV9GTE9BVFxuICAgICAgICAgICAgZm9udDogICBuZXcgVGV4dHVyZShcIiN7X19kaXJuYW1lfS8uLi9pbWcvZm9udC5wbmdcIiwgQHNjZW5lKVxuICAgICAgICBcbiAgICAgICAgQGlGcmFtZSA9IDBcbiAgICAgICAgQHZlcnRleFNoYWRlciA9ICBcIlwiXCJcbiAgICAgICAgICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDsgYXR0cmlidXRlIHZlYzMgcG9zaXRpb247IGF0dHJpYnV0ZSB2ZWMyIHV2OyB1bmlmb3JtIG1hdDQgd29ybGRWaWV3UHJvamVjdGlvbjtcbiAgICAgICAgICAgIHZvaWQgbWFpbih2b2lkKSB7IGdsX1Bvc2l0aW9uID0gd29ybGRWaWV3UHJvamVjdGlvbiAqIHZlYzQocG9zaXRpb24sIDEuMCk7IH1cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICBcclxuICAgICAgICBmcmFnU291cmNlICAgID0gc2xhc2gucmVhZFRleHQgXCIje19fZGlybmFtZX0vLi4vc2hhZGVyL2ZvbGxvdy5mcmFnXCJcbiAgICAgICAgYnVmZmVyU291cmNlICA9IHNsYXNoLnJlYWRUZXh0IFwiI3tfX2Rpcm5hbWV9Ly4uL3NoYWRlci9idWZmZXIuZnJhZ1wiXG4gICAgICAgIEBjb21tb25Tb3VyY2UgPSBzbGFzaC5yZWFkVGV4dCBcIiN7X19kaXJuYW1lfS8uLi9zaGFkZXIvY29tbW9uLmZyYWdcIlxuICAgICAgICBcbiAgICAgICAgRWZmZWN0LlNoYWRlcnNTdG9yZS5tYWluVmVydGV4U2hhZGVyID0gQHZlcnRleFNoYWRlclxuICAgICAgICBFZmZlY3QuU2hhZGVyc1N0b3JlLm1haW5GcmFnbWVudFNoYWRlciA9IEBzaGFkZXJDb2RlIGZyYWdTb3VyY2UgXG4gICAgICAgIFxuICAgICAgICBFZmZlY3QuU2hhZGVyc1N0b3JlLmJ1ZmZlclZlcnRleFNoYWRlciA9IEB2ZXJ0ZXhTaGFkZXJcbiAgICAgICAgRWZmZWN0LlNoYWRlcnNTdG9yZS5idWZmZXJGcmFnbWVudFNoYWRlciA9IEBzaGFkZXJDb2RlIGJ1ZmZlclNvdXJjZSBcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIEBzaGFkZXJTdGFydCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gICAgICAgIFxuICAgICAgICAjIDAwICAgICAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAgICAgICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgXG4gICAgICAgICMgMDAwMDAwMDAwICAwMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwMDAwMCAgIDAwMDAwMDAgICAgMDAwICAwMDAwMDAwMDAgIDAwMCAgICAgIFxuICAgICAgICAjIDAwMCAwIDAwMCAgMDAwICAgMDAwICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgXG4gICAgICAgIFxuICAgICAgICBAYnVmZmVyTWF0ZXJpYWwgPSBAc2hhZGVyTWF0ZXJpYWwgJ2J1ZmZlcidcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsID0gQHNoYWRlck1hdGVyaWFsICdtYWluJ1xuXG4gICAgICAgIEBwbGFuZTIgPSBNZXNoQnVpbGRlci5DcmVhdGVQbGFuZSBcInBsYW5lMlwiLCB7IHdpZHRoOiAxMCwgaGVpZ2h0OiAxMCB9LCBAc2NlbmVcbiAgICAgICAgQHBsYW5lMi5tYXRlcmlhbCA9IEBidWZmZXJNYXRlcmlhbFxuICAgICAgICBAcGxhbmUyLmJpbGxib2FyZE1vZGUgPSBNZXNoLkJJTExCT0FSRE1PREVfQUxMXG5cbiAgICAgICAgQHBsYW5lID0gTWVzaEJ1aWxkZXIuQ3JlYXRlUGxhbmUgXCJwbGFuZVwiLCB7IHdpZHRoOiAxMCwgaGVpZ2h0OiAxMCB9LCBAc2NlbmVcbiAgICAgICAgQHBsYW5lLm1hdGVyaWFsID0gQHNoYWRlck1hdGVyaWFsXG4gICAgICAgIEBwbGFuZS5iaWxsYm9hcmRNb2RlID0gTWVzaC5CSUxMQk9BUkRNT0RFX0FMTFxuICAgICAgICBcbiAgICAgICAgQHNoYWRlck1hdGVyaWFsLm9uQ29tcGlsZWQgPSA9PiBcbiAgICAgICAgICAgIEBjb21waWxlVGltZSA9IHBhcnNlSW50IHBlcmZvcm1hbmNlLm5vdygpLUBzaGFkZXJTdGFydFxuICAgICAgICAgICAga2xvZyBcInNoYWRlciBjb21waWxlVGltZSAje0Bjb21waWxlVGltZS8xMDAwfXNcIiBcbiAgICAgICAgICAgIFxuICAgICAgICBAYnVmZmVyTWF0ZXJpYWwub25Db21waWxlZCA9ID0+IFxuICAgICAgICAgICAgY29tcGlsZVRpbWUgPSBwYXJzZUludCBwZXJmb3JtYW5jZS5ub3coKS1Ac2hhZGVyU3RhcnRcbiAgICAgICAgICAgIGtsb2cgXCJidWZmZXIgY29tcGlsZVRpbWUgI3tjb21waWxlVGltZS8xMDAwfXNcIiBcbiAgICAgICAgICAgIFxuICAgICAgICAjIDAwMDAwMDAwICAgICAgICAgICAwMDAwMDAwMDAgICAwMDAwMDAwICAgMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIFxuICAgICAgICAjIDAwMCAgIDAwMCAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICAgICAjIDAwMDAwMDAgICAgMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAwMCAgMDAwMDAwMCAgICAwMDAgIDAwMDAgIDAwMDAwMDAgICAgICAwMDAgICAgIFxuICAgICAgICAjIDAwMCAgIDAwMCAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIFxuICAgICAgICAjIDAwMCAgIDAwMCAgICAgICAgICAgICAwMDAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAwICAgICAwMDAgICAgIFxuICAgICAgICBcbiAgICAgICAgQHJlbmRlclRhcmdldCA9IG5ldyBSZW5kZXJUYXJnZXRUZXh0dXJlIFwiYnVmXCIsIEBidWZmZXJTaXplLCBAc2NlbmUsIGZhbHNlLCBmYWxzZSwgVGV4dHVyZS5CSUxJTkVBUl9TQU1QTElOR01PREUsIEVuZ2luZS5URVhUVVJFVFlQRV9GTE9BVFxuICAgICAgICBAcmVuZGVyVGFyZ2V0LnJlbmRlckxpc3QucHVzaCBAcGxhbmUyXG4gICAgICAgIEBzY2VuZS5jdXN0b21SZW5kZXJUYXJnZXRzLnB1c2ggQHJlbmRlclRhcmdldFxuICAgIFxyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgIyAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgIDAwMDAwMDAwICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAgICAgIyAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAgICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAgICAgIyAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAgICAgIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMDAwMDAwICBcblxuICAgICAgICBAcmVuZGVyVGFyZ2V0Lm9uQmVmb3JlUmVuZGVyID0gKCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIEBwbGFuZTIucG9zaXRpb24uY29weUZyb20gQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi5hZGQgQHdvcmxkLmNhbWVyYS5nZXREaXIoKS5zY2FsZSAyXG4gICAgICAgICAgICBAbWF0ZXJpYWxEYXRhIEBidWZmZXJNYXRlcmlhbFxuICAgICAgICBcbiAgICAgICAgQHNjZW5lLm9uQmVmb3JlUmVuZGVyT2JzZXJ2YWJsZS5hZGQgPT4gXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEB0ZXh0dXJlcy5rZXlzLnVwZGF0ZSBAd29ybGQua2V5c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBAaVJlc29sdXRpb24gPSBuZXcgVmVjdG9yMyBAd29ybGQuY2FudmFzLndpZHRoLCBAd29ybGQuY2FudmFzLmhlaWdodCwgMVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAaURlbHRhID0gbmV3IFZlY3RvcjIoQHdvcmxkLmNhbWVyYS5tb3VzZS5kZWx0YS54LCBAd29ybGQuY2FtZXJhLm1vdXNlLmRlbHRhLnkpIFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBAaU1vdXNlID0gbmV3IFZlY3RvcjQoXG4gICAgICAgICAgICAgICAgQHdvcmxkLmNhbWVyYS5tb3VzZS5wb3MueCAqICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IDApXG4gICAgICAgICAgICAgICAgQGlSZXNvbHV0aW9uLnkgLSAoQHdvcmxkLmNhbWVyYS5tb3VzZS5wb3MueSAqICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IEBpUmVzb2x1dGlvbi55KSlcbiAgICAgICAgICAgICAgICAoQHdvcmxkLmNhbWVyYS5tb3VzZS5idXR0b25zIGFuZCAxIG9yIC0xKSAqIEB3b3JsZC5jYW1lcmEubW91c2UuZG93bi54ICogKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvID8gMClcbiAgICAgICAgICAgICAgICAoQHdvcmxkLmNhbWVyYS5tb3VzZS5idXR0b25zIGFuZCAxIG9yIC0xKSAqIChAaVJlc29sdXRpb24ueSAtIChAd29ybGQuY2FtZXJhLm1vdXNlLmRvd24ueSAqICh3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/IEBpUmVzb2x1dGlvbi55KSkpKVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAaUNlbnRlciA9IG5ldyBWZWN0b3IzIEB3b3JsZC5jYW1lcmEuY2VudGVyLngsIEB3b3JsZC5jYW1lcmEuY2VudGVyLnksIEB3b3JsZC5jYW1lcmEuY2VudGVyLnpcbiAgICAgICAgICAgIEBpQ2FtZXJhID0gbmV3IFZlY3RvcjMgQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi54LCBAd29ybGQuY2FtZXJhLnBvc2l0aW9uLnksIEB3b3JsZC5jYW1lcmEucG9zaXRpb24uelxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAaVRpbWUgICAgICA9IHBlcmZvcm1hbmNlLm5vdygpLzEwMDBcbiAgICAgICAgICAgIEBpVGltZURlbHRhID0gQHdvcmxkLmVuZ2luZS5nZXREZWx0YVRpbWUoKS8xMDAwXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBmcmFtZVJhdGVzLnB1c2ggQHdvcmxkLmVuZ2luZS5nZXRGcHMoKVxuICAgICAgICAgICAgaWYgQGZyYW1lUmF0ZXMubGVuZ3RoID4gMzAgdGhlbiBAZnJhbWVSYXRlcy5zaGlmdCgpXG4gICAgICAgICAgICBAZnBzID0gMFxuICAgICAgICAgICAgZm9yIHIgaW4gQGZyYW1lUmF0ZXMgdGhlbiBAZnBzICs9IHJcbiAgICAgICAgICAgIEBmcHMgLz0gQGZyYW1lUmF0ZXMubGVuZ3RoXG4gICAgICAgICAgICBcbiAgICAgICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAwMDAwMDAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIFxuICAgICAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgICAgIDAwMCAgIDAwMCAgXG4gICAgICAgICMgMDAwMDAwMDAwICAwMDAwMDAgICAgICAgMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAgICAgIyAwMDAgICAwMDAgIDAwMCAgICAgICAgICAwMDAgICAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICAgICAjIDAwMCAgIDAwMCAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwMDAwMDAgIDAwMCAgIDAwMCAgXG4gICAgICAgIFxuICAgICAgICBAc2NlbmUub25BZnRlclJlbmRlclRhcmdldHNSZW5kZXJPYnNlcnZhYmxlLmFkZCA9PiBcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgQHRleHR1cmVzLmJ1ZmZlci51cGRhdGUgQHJlbmRlclRhcmdldC5yZWFkUGl4ZWxzKClcbiAgICAgICAgICAgIFxuICAgICAgICBAc2NlbmUub25BZnRlclJlbmRlck9ic2VydmFibGUuYWRkID0+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIEBpRnJhbWUrK1xuICAgICAgICAgICAgZm9yIGkgaW4gWzI1Ni4uLjUxMl0gXG4gICAgICAgICAgICAgICAgQHdvcmxkLmtleXNbaV0gPSAwXG4gICAgICAgICAgIFxuICAgICMgMDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwMCAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAwMDAwICAgMDAwIDAgMDAwICAwMDAgICAwMDAgIDAwMDAwMDAgICAwMDAwMDAwICAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgIDAwMDAwMDAwICAwMDAgICAwMDAgIFxuICAgIFxuICAgIHJlbmRlcjogLT5cblxuICAgICAgICBAcGxhbmUucG9zaXRpb24uY29weUZyb20gQHdvcmxkLmNhbWVyYS5wb3NpdGlvbi5hZGQgQHdvcmxkLmNhbWVyYS5nZXREaXIoKS5zY2FsZSAxLjVcbiAgICAgICAgXG4gICAgICAgIEBtYXRlcmlhbERhdGEgQHNoYWRlck1hdGVyaWFsXG4gICAgICAgICAgICAgICAgXG4gICAgIyAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMCAgIDAwMCAgMDAwMDAwMDAwICAgICAwMDAgICAgIDAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwMDAwMCAgICAwMDAgICAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICBcbiAgICBcbiAgICBtYXRlcmlhbERhdGE6IChtKSA9PiBcbiAgICAgICAgXG4gICAgICAgIG0uc2V0VGV4dHVyZSAnaUNoYW5uZWwwJyAgIEB0ZXh0dXJlcy5rZXlzIFxuICAgICAgICBtLnNldFRleHR1cmUgJ2lDaGFubmVsMScgICBAdGV4dHVyZXMuYnVmZmVyXG4gICAgICAgIG0uc2V0VGV4dHVyZSAnaUNoYW5uZWwyJyAgIEB0ZXh0dXJlcy5mb250XG4gICAgICAgIG0uc2V0SW50ICAgICAnaUZyYW1lJyAgICAgIEBpRnJhbWVcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpQ29tcGlsZScgICAgQGNvbXBpbGVUaW1lLzEwMDBcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpVGltZScgICAgICAgQGlUaW1lXG4gICAgICAgIG0uc2V0RmxvYXQgICAnaVRpbWVEZWx0YScgIEBpVGltZURlbHRhXG4gICAgICAgIG0uc2V0VmVjdG9yMiAnaURlbHRhJyAgICAgIEBpRGVsdGFcbiAgICAgICAgbS5zZXRWZWN0b3I0ICdpTW91c2UnICAgICAgQGlNb3VzZVxuICAgICAgICBtLnNldFZlY3RvcjMgJ2lSZXNvbHV0aW9uJyBAaVJlc29sdXRpb25cbiAgICAgICAgbS5zZXRWZWN0b3IzICdpQ2VudGVyJyAgICAgQGlDZW50ZXJcbiAgICAgICAgbS5zZXRWZWN0b3IzICdpQ2FtZXJhJyAgICAgQGlDYW1lcmFcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpRGlzdCcgICAgICAgQHdvcmxkLmNhbWVyYS5kaXN0XG4gICAgICAgIG0uc2V0RmxvYXQgICAnaU1pbkRpc3QnICAgIEB3b3JsZC5jYW1lcmEubWluRGlzdFxuICAgICAgICBtLnNldEZsb2F0ICAgJ2lNYXhEaXN0JyAgICBAd29ybGQuY2FtZXJhLm1heERpc3RcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpUm90YXRlJyAgICAgQHdvcmxkLmNhbWVyYS5yb3RhdGVcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpRGVncmVlJyAgICAgQHdvcmxkLmNhbWVyYS5kZWdyZWVcbiAgICAgICAgbS5zZXRGbG9hdCAgICdpRnJhbWVSYXRlJyAgTWF0aC5yb3VuZCBAZnBzXG4gICAgICAgIG0uc2V0RmxvYXQgICAnaU1zJyAgICAgICAgIEB3b3JsZC5lbmdpbmUuZ2V0RGVsdGFUaW1lKClcbiAgICAgICAgICAgICAgICBcbiAgICAjICAwMDAwMDAwICAwMDAgICAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwMDAwMDAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMCAgICBcbiAgICAjICAgICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICBcbiAgICAjIDAwMDAwMDAgICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgMDAwICAgMDAwICBcbiAgICBcbiAgICBzaGFkZXJNYXRlcmlhbDogKGtleSkgLT5cbiAgICAgICAgXG4gICAgICAgIG5ldyBTaGFkZXJNYXRlcmlhbCBcIiN7a2V5fVNoYWRlclwiLCBAc2NlbmUsICBcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6ICAga2V5XG4gICAgICAgICAgICAgICAgZnJhZ21lbnQ6IGtleVxuICAgICAgICAgICAgLFxyXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiBbJ3Bvc2l0aW9uJyAnbm9ybWFsJyAndXYnXVxuICAgICAgICAgICAgICAgIHVuaWZvcm1zOiAgIFtcbiAgICAgICAgICAgICAgICAgICAgJ3dvcmxkVmlld1Byb2plY3Rpb24nXG4gICAgICAgICAgICAgICAgICAgICdpQ2FtZXJhJyAnaUNlbnRlcicgJ2lEaXN0JyAnaU1heERpc3QnICdpTWluRGlzdCdcbiAgICAgICAgICAgICAgICAgICAgJ2lGcmFtZVJhdGUnICdpTXMnICdpRnJhbWUnIFxuICAgICAgICAgICAgICAgICAgICAnaURlbHRhJyAnaVRpbWUnICdpVGltZURlbHRhJyBcbiAgICAgICAgICAgICAgICAgICAgJ2lNb3VzZScgJ2lSZXNvbHV0aW9uJyBcbiAgICAgICAgICAgICAgICAgICAgJ2lSb3RhdGUnICdpRGVncmVlJyBcbiAgICAgICAgICAgICAgICAgICAgJ2lDb21waWxlJ1xuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgXG4gICAgc2hhZGVyQ29kZTogKGZyYWdTb3VyY2UpIC0+XG4gICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCAgICAgaVRpbWU7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0ICAgICBpVGltZURlbHRhO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCAgICAgaUZyYW1lUmF0ZTtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgICAgIGlNcztcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgICAgIGlDb21waWxlO1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCAgICAgaURpc3Q7XG4gICAgICAgICAgICB1bmlmb3JtIGZsb2F0ICAgICBpTWluRGlzdDtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgICAgIGlNYXhEaXN0O1xuICAgICAgICAgICAgdW5pZm9ybSBmbG9hdCAgICAgaVJvdGF0ZTtcbiAgICAgICAgICAgIHVuaWZvcm0gZmxvYXQgICAgIGlEZWdyZWU7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzIgICAgICBpRGVsdGE7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzQgICAgICBpTW91c2U7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzMgICAgICBpUmVzb2x1dGlvbjtcbiAgICAgICAgICAgIHVuaWZvcm0gdmVjMyAgICAgIGlDZW50ZXI7XG4gICAgICAgICAgICB1bmlmb3JtIHZlYzMgICAgICBpQ2FtZXJhO1xuICAgICAgICAgICAgdW5pZm9ybSBpbnQgICAgICAgaUZyYW1lO1xuICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgaUNoYW5uZWwwO1xuICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgaUNoYW5uZWwxO1xuICAgICAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgaUNoYW5uZWwyO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAje0Bjb21tb25Tb3VyY2V9XG4gICAgICAgICAgICAje2ZyYWdTb3VyY2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHZvaWQgbWFpbih2b2lkKSBcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtYWluSW1hZ2UoZ2xfRnJhZ0NvbG9yLCBnbF9GcmFnQ29vcmQueHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgICAgICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBTaGFkZXJcbiJdfQ==
//# sourceURL=../coffee/shader.coffee