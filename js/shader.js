// koffee 1.6.0

/*
 0000000  000   000   0000000   0000000    00000000  00000000   
000       000   000  000   000  000   000  000       000   000  
0000000   000000000  000000000  000   000  0000000   0000000    
     000  000   000  000   000  000   000  000       000   000  
0000000   000   000  000   000  0000000    00000000  000   000
 */
var MeshBuilder, Shader, ShaderMaterial, Vect, Vector2, clamp, deg2rad, performance, rad2deg, ref, ref1;

ref = require('babylonjs'), MeshBuilder = ref.MeshBuilder, ShaderMaterial = ref.ShaderMaterial, Vector2 = ref.Vector2;

performance = require('perf_hooks').performance;

ref1 = require('kxk'), clamp = ref1.clamp, deg2rad = ref1.deg2rad, rad2deg = ref1.rad2deg;

Vect = require('./vect');

Shader = (function() {
    function Shader(world) {
        var fragmentShader, plane, vertexShader;
        this.world = world;
        this.scene = this.world.scene;
        vertexShader = "precision highp float;\nattribute vec3 position;\nattribute vec2 uv;\nuniform mat4 worldViewProjection;\nvoid main(void) {\n    gl_Position = worldViewProjection * vec4(position, 1.0);\n}";
        fragmentShader = "precision highp float;\nuniform float iTime;\nuniform vec2  iMouse;\nuniform vec2  iResolution;\n\n#define MAX_STEPS 128\n#define MIN_DIST  0.01\n#define MAX_DIST  100.0\n\n#define PI 3.141592653589793\n\nfloat rad2deg(float r) { return 180.0 * r / PI; }\nfloat deg2rad(float d) { return PI * d / 180.0; }\n\nvec4 quatAxisAngle(vec3 axis, float angle)\n{ \n  vec4 qr;\n  float half_angle = deg2rad(angle * 0.5);\n  qr.x = axis.x * sin(half_angle);\n  qr.y = axis.y * sin(half_angle);\n  qr.z = axis.z * sin(half_angle);\n  qr.w = cos(half_angle);\n  return qr;\n}\n\nvec4 quatConj(vec4 q)\n{ \n  return vec4(-q.x, -q.y, -q.z, q.w); \n}\n  \nvec4 quatMul(vec4 q1, vec4 q2)\n{ \n  vec4 qr;\n  qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n  qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n  qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n  qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n  return qr;\n}\n\nvec3 rotAxisAngle(vec3 position, vec3 axis, float angle)\n{ \n  vec4 qr = quatAxisAngle(axis, angle);\n  vec4 qr_conj = quatConj(qr);\n  vec4 q_pos = vec4(position.x, position.y, position.z, 0);\n  \n  vec4 q_tmp = quatMul(qr, q_pos);\n  qr = quatMul(q_tmp, qr_conj);\n  \n  return vec3(qr.x, qr.y, qr.z);\n}\n\nvec3 rotY(vec3 v, float deg)\n{\n    float rad = deg2rad(deg);\n    float c = cos(rad);\n    float s = sin(rad);\n    return vec3(v.x*c+v.z*s, v.y, v.z*c+v.x*s);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(p-c)-r;        \n}\n\nfloat sdSphere(vec3 p, vec3 a, float r)\n{\n    return length(p-a)-r;\n}\n\nfloat sdPlane(vec3 p, vec3 a, vec3 n)\n{   \n    return dot(n, p-a);\n}\n\nfloat getDist(vec3 p)\n{\n    float m = 1000.0;\n    \n    vec3 p2 = rotY(vec3(0,1,-5), iTime*36.0);\n    vec3 p3 = rotAxisAngle(vec3(0,1,-5), vec3(1,1,0), iTime*36.0);\n    \n    m = min(m, sdSphere(p, vec3(0,1,0), 1.0));\n    m = min(m, sdCapsule(p, vec3(0,1,0), p2, 0.2));\n    m = min(m, sdCapsule(p, vec3(0,1,0), p3, 0.2));\n    m = min(m, sdPlane(p, vec3(0,-.5,0), vec3(0,1,0)));\n    return m;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(getDist(p-e.xyy), getDist(p-e.yxy), getDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float dz = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + dz * rd;\n        float dp = getDist(p);\n        dz += dp;\n        if (dp < MIN_DIST || dz > MAX_DIST) break;\n    }\n    return dz;\n}\n\nfloat softShadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float w )\n{\n    float t = tmin;\n    float res = 1.0;\n    for( int i=0; i<256; i++ )\n    {\n        float h = getDist(ro + t*rd);\n        res = min( res, h/(w*t) );\n        t += clamp(h, 0.005, 0.50);\n        if ( res<-1.0 || t>tmax ) break;\n    }\n\n    res = max(res,-1.0); \n\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res);\n}\n\nfloat getLight(vec3 p)\n{\n    float t = iTime*1.0;\n    vec3 lp = rotY(vec3(0, 10, -10), iTime*36.0);\n    vec3 l = normalize(lp - p);\n    vec3 n = getNormal(p);\n \n    float dif = dot(n,l);\n    \n    vec3 off = p+n*2.0*MIN_DIST;\n\n    dif *= softShadow(off, normalize(lp-off), MIN_DIST, 10.0, 0.3);\n        \n    return clamp(dif, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float an = 2.0*PI*iMouse.x/iResolution.x-0.5;\n    vec3 ro  = vec3(10.0*cos(an), 1, -10.0*sin(an));\n    vec3 ct  = vec3(0,2,0);\n\n    vec3 ww = normalize(ct-ro);\n    vec3 uu = normalize(cross(ww, vec3(0,1,0)));\n    vec3 vv = normalize(cross(uu, ww));\n    \n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.5*ww);\n    \n    float f = rayMarch(ro, rd);\n    \n    vec3 p = ro + f * rd;\n    \n    fragColor = vec4(getLight(p), iMouse.x/iResolution.x, iMouse.y/iResolution.y, 1.0);\n}\n                        \nvoid main(void) \n{\n    mainImage(gl_FragColor, gl_FragCoord.xy);\n}";
        this.shaderMaterial = new ShaderMaterial("shader", this.scene, {
            fragmentSource: fragmentShader,
            vertexSource: vertexShader
        }, {
            attributes: ['position', 'normal', 'uv'],
            uniforms: ['worldViewProjection', 'iTime', 'iMouse', 'iResolution']
        });
        plane = MeshBuilder.CreatePlane("plane", {
            width: 100,
            height: 100
        }, this.scene);
        plane.material = this.shaderMaterial;
    }

    Shader.prototype.render = function() {
        this.shaderMaterial.setFloat('iTime', performance.now() / 1000);
        this.shaderMaterial.setVector2('iMouse', new Vector2(this.world.camera.mouseX, this.world.canvas.height - this.world.camera.mouseY));
        return this.shaderMaterial.setVector2('iResolution', new Vector2(this.world.canvas.width, this.world.canvas.height));
    };

    return Shader;

})();

module.exports = Shader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/shader.coffee