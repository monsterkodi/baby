// koffee 1.6.0

/*
000   000  00000000   0000000  000000000   0000000   00000000 
000   000  000       000          000     000   000  000   000
 000 000   0000000   000          000     000   000  0000000  
   000     000       000          000     000   000  000   000
    0      00000000   0000000     000      0000000   000   000
 */
var Vector, Vector3, rad2deg, randRange, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

ref = require('kxk'), randRange = ref.randRange, rad2deg = ref.rad2deg;

Vector3 = require('babylonjs').Vector3;

Vector = (function(superClass) {
    extend(Vector, superClass);

    Vector.counter = 0;

    Vector.tmp = new Vector;

    function Vector(x, y, z) {
        var ref1, ref2;
        if (x == null) {
            x = 0;
        }
        if (y == null) {
            y = 0;
        }
        if (z == null) {
            z = 0;
        }
        Vector.counter += 1;
        if ((x.x != null) && (x.y != null)) {
            Vector.__super__.constructor.call(this, x.x, x.y, (ref1 = x.z) != null ? ref1 : 0);
        } else if (Array.isArray(x)) {
            Vector.__super__.constructor.call(this, x[0], x[1], (ref2 = x[2]) != null ? ref2 : 0);
        } else {
            Vector.__super__.constructor.call(this, x, y, z != null ? z : 0);
        }
        if (Number.isNaN(this.x)) {
            throw new Error;
        }
    }

    Vector.prototype.clone = function() {
        return new Vector(this);
    };

    Vector.prototype.copy = function(v) {
        var ref1;
        this.x = v.x;
        this.y = v.y;
        this.z = (ref1 = v.z) != null ? ref1 : 0;
        return this;
    };

    Vector.prototype.parallel = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vector(dot * n.x, dot * n.y, dot * n.z);
    };

    Vector.prototype.perpendicular = function(n) {
        var dot;
        dot = this.x * n.x + this.y * n.y + this.z * n.z;
        return new Vector(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vector.prototype.reflect = function(n) {
        var dot;
        dot = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
        return new Vector(this.x - dot * n.x, this.y - dot * n.y, this.z - dot * n.z);
    };

    Vector.prototype.rotated = function(axis, angle) {
        return this.clone().rotate(axis, angle);
    };

    Vector.prototype.rotate = function(axis, angle) {
        this.applyQuaternion(Quaternion.axisAngle(axis, angle));
        return this;
    };

    Vector.prototype.crossed = function(v) {
        return this.clone().cross(v);
    };

    Vector.prototype.cross = function(v) {
        return this.crossVectors(this, v);
    };

    Vector.prototype.normal = function() {
        return this.clone().normalize();
    };

    Vector.prototype.normalize = function() {
        var l;
        l = this.length();
        if (l) {
            l = 1.0 / l;
            this.x *= l;
            this.y *= l;
            this.z *= l;
        }
        return this;
    };

    Vector.prototype.xyperp = function() {
        return new Vector(-this.y, this.x);
    };

    Vector.prototype.rounded = function() {
        return this.clone().round();
    };

    Vector.prototype.round = function() {
        this.x = Math.round(this.x);
        this.y = Math.round(this.y);
        this.z = Math.round(this.z);
        return this;
    };

    Vector.prototype.equals = function(o) {
        return this.manhattan(o) < 0.001;
    };

    Vector.prototype.same = function(o) {
        var z;
        return this.x === o.x && this.y === o.y && (z = o.z);
    };

    Vector.prototype.faded = function(o, val) {
        return this.clone().fade(o, val);
    };

    Vector.prototype.fade = function(o, val) {
        this.x = this.x * (1 - val) + o.x * val;
        this.y = this.y * (1 - val) + o.y * val;
        this.z = this.z * (1 - val) + o.z * val;
        return this;
    };

    Vector.prototype.xyangle = function(v) {
        var otherXY, thisXY;
        thisXY = new Vector(this.x, this.y).normal();
        otherXY = new Vector(v.x, v.y).normal();
        if (thisXY.xyperp().dot(otherXY >= 0)) {
            return rad2deg(Math.acos(thisXY.dot(otherXY)));
        }
        return -rad2deg(Math.acos(thisXY.dot(otherXY)));
    };

    Vector.prototype.paris = function(o) {
        var m;
        m = [Math.abs(o.x - this.x), Math.abs(o.y - this.y), Math.abs(o.z - this.z)];
        m.sort(function(a, b) {
            return b - a;
        });
        return m[0] + 0.2 * m[1] + 0.1 * m[2];
    };

    Vector.prototype.manhattan = function(o) {
        return Math.abs(o.x - this.x) + Math.abs(o.y - this.y) + Math.abs(o.z - this.z);
    };

    Vector.prototype.dist = function(o) {
        return this.minus(o).length();
    };

    Vector.prototype.length = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Vector.prototype.dot = function(v) {
        return this.x * v.x + this.y * v.y + this.z * v.z;
    };

    Vector.prototype.mul = function(f) {
        return new Vector(this.x * f, this.y * f, this.z * f);
    };

    Vector.prototype.div = function(d) {
        return new Vector(this.x / d, this.y / d, this.z / d);
    };

    Vector.prototype.plus = function(v) {
        return new Vector(v).add(this);
    };

    Vector.prototype.minus = function(v) {
        return new Vector(v).neg().add(this);
    };

    Vector.prototype.neg = function() {
        return new Vector(-this.x, -this.y, -this.z);
    };

    Vector.prototype.to = function(v) {
        return new Vector(v).sub(this);
    };

    Vector.prototype.angle = function(v) {
        var l, o, p, q, r, x, y, z;
        if (l = this.length()) {
            if (o = v.length()) {
                x = this.x / l;
                y = this.y / l;
                z = this.z / l;
                p = v.x / o;
                q = v.y / o;
                r = v.z / o;
                return rad2deg(Math.acos(x * p + y * q + z * r));
            }
        }
        return 0;
    };

    Vector.prototype.negate = function() {
        return this.scale(-1);
    };

    Vector.prototype.scale = function(f) {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        return this;
    };

    Vector.prototype.reset = function() {
        this.x = this.y = this.z = 0;
        return this;
    };

    Vector.prototype.isZero = function() {
        var ref1, ref2;
        return ((this.x === (ref2 = this.y) && ref2 === (ref1 = this.z)) && ref1 === 0);
    };

    Vector.prototype.randomize = function() {
        this.set(randRange(-1, 1), randRange(-1, 1), randRange(-1, 1));
        this.normalize();
        return this;
    };

    Vector.random = function() {
        return new Vector().randomize();
    };

    Vector.rayPlaneIntersection = function(rayPos, rayDirection, planePos, planeNormal) {
        var x;
        x = planePos.minus(rayPos).dot(planeNormal) / rayDirection.dot(planeNormal);
        return rayPos.plus(rayDirection.mul(x));
    };

    Vector.pointMappedToPlane = function(point, planePos, planeNormal) {
        return point.minus(planeNormal).dot(point.minus(planePos).dot(planeNormal));
    };

    Vector.rayPlaneIntersectionFactor = function(rayPos, rayDir, planePos, planeNormal) {
        var r, rayDot;
        rayDot = rayDir.dot(planeNormal);
        if (Number.isNaN(rayDot)) {
            throw new Error;
        }
        if (rayDot === 0) {
            return 2;
        }
        r = planePos.minus(rayPos).dot(planeNormal) / rayDot;
        if (Number.isNaN(r)) {
            console.log('rayPos', rayPos);
            console.log('rayDir', rayDir);
            console.log('planePos', planePos);
            console.log('planeNormal', planeNormal);
            throw new Error;
        }
        return r;
    };

    Vector.PX = 0;

    Vector.PY = 1;

    Vector.PZ = 2;

    Vector.NX = 3;

    Vector.NY = 4;

    Vector.NZ = 5;

    Vector.unitX = new Vector(1, 0, 0);

    Vector.unitY = new Vector(0, 1, 0);

    Vector.unitZ = new Vector(0, 0, 1);

    Vector.minusX = new Vector(-1, 0, 0);

    Vector.minusY = new Vector(0, -1, 0);

    Vector.minusZ = new Vector(0, 0, -1);

    Vector.normals = [Vector.unitX, Vector.unitY, Vector.unitZ, Vector.minusX, Vector.minusY, Vector.minusZ];

    Vector.perpNormals = function(v) {
        var i;
        i = this.normalIndex(v);
        switch (i) {
            case this.PX:
                return [this.unitY, this.unitZ, this.minusY, this.minusZ];
            case this.PY:
                return [this.minusX, this.unitZ, this.unitX, this.minusZ];
            case this.PZ:
                return [this.unitY, this.minusX, this.minusY, this.unitX];
            case this.NX:
                return [this.unitY, this.minusZ, this.minusY, this.unitZ];
            case this.NY:
                return [this.minusX, this.minusZ, this.unitX, this.unitZ];
            case this.NZ:
                return [this.unitY, this.unitX, this.minusY, this.minusX];
        }
    };

    Vector.normalIndex = function(v) {
        var cn, i, j;
        cn = this.closestNormal(v);
        for (i = j = 0; j < 6; i = ++j) {
            if (Vector.normals[i].equals(cn)) {
                return i;
            }
        }
        return -1;
    };

    Vector.closestNormal = function(v) {
        var angles, j, len, n, ref1;
        Vector.tmp.copy(v);
        Vector.tmp.normalize();
        angles = [];
        ref1 = Vector.normals;
        for (j = 0, len = ref1.length; j < len; j++) {
            n = ref1[j];
            if (n.equals(Vector.tmp)) {
                return n;
            }
            angles.push([n.angle(Vector.tmp), n]);
        }
        angles.sort(function(a, b) {
            return a[0] - b[0];
        });
        return angles[0][1];
    };

    return Vector;

})(Vector3);

module.exports = Vector;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/vector.coffee