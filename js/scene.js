// koffee 1.6.0

/*
 0000000   0000000  00000000  000   000  00000000
000       000       000       0000  000  000     
0000000   000       0000000   000 0 000  0000000 
     000  000       000       000  0000  000     
0000000    0000000  00000000  000   000  00000000
 */
var Color3, GUI, Legend, Mesh, MeshBuilder, Scene, StandardMaterial, Vect, Vector3, VertexBuffer, babylon, generate, klog, ref,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

klog = require('kxk').klog;

ref = require('babylonjs'), Color3 = ref.Color3, Mesh = ref.Mesh, MeshBuilder = ref.MeshBuilder, Scene = ref.Scene, StandardMaterial = ref.StandardMaterial, Vector3 = ref.Vector3, VertexBuffer = ref.VertexBuffer;

babylon = require('babylonjs');

GUI = require('babylonjs-gui');

Vect = require('./vect');

Legend = require('./legend');

generate = require('./poly/generate');

Scene = (function(superClass) {
    extend(Scene, superClass);

    function Scene(engine) {
        Scene.__super__.constructor.apply(this, arguments);
        this.ui = GUI.AdvancedDynamicTexture.CreateFullscreenUI('ui');
        this.legend = new Legend(this.ui);
        this.faceIndexMat = new StandardMaterial('faceIndexMat');
        this.faceIndexMat.diffuseColor = new Color3(.5, .5, 1);
        this.faceIndexMat.alpha = 0.5;
        this.vertIndexMat = new StandardMaterial('vertIndexMat');
        this.vertIndexMat.diffuseColor = new Color3(1, 1, 1);
        this.vertIndexMat.alpha = 0.5;
        this.style = this.ui.createStyle();
        this.style.fontSize = 10;
        this.style.fontFamily = 'fontMono';
        this.style.height = "20px";
    }

    Scene.prototype.showNormals = function(mesh, size, color) {
        var i, j, lines, normals, positions, ref1, system, v1, v2;
        normals = mesh.getVerticesData(VertexBuffer.NormalKind);
        positions = mesh.getVerticesData(VertexBuffer.PositionKind);
        if (color != null) {
            color;
        } else {
            color = new Color3(0.2, 0.2, 0.2);
        }
        if (size != null) {
            size;
        } else {
            size = 0.2;
        }
        lines = [];
        for (i = j = 0, ref1 = normals.length; j < ref1; i = j += 3) {
            v1 = Vector3.FromArray(positions, i);
            v2 = v1.addInPlace(Vector3.FromArray(normals, i).scaleInPlace(size));
            lines.push([v1, v2]);
        }
        system = MeshBuilder.CreateLineSystem('normals', {
            lines: lines
        });
        system.color = color;
        mesh.addChild(system);
        return system;
    };

    Scene.prototype.showDebug = function(mesh, poly) {
        var lines, system;
        if (poly.debug) {
            lines = poly.debug.map(function(dbg) {
                return dbg.map(function(v) {
                    return new Vector3(v[0], v[1], v[2]);
                });
            });
            system = MeshBuilder.CreateLineSystem('faces', {
                lines: lines
            });
            system.scaling = new Vector3(1.03, 1.03, 1.03);
            system.color = new Color3(1, 1, 0);
            system.alpha = 0.5;
            mesh.addChild(system);
            return system;
        }
    };

    Scene.prototype.showFaces = function(mesh, poly, color) {
        var face, j, k, len, lines, ref1, ref2, system, v1, v2, vi;
        if (color != null) {
            color;
        } else {
            color = new Color3(0, 0, 0);
        }
        lines = [];
        ref1 = poly.face;
        for (j = 0, len = ref1.length; j < len; j++) {
            face = ref1[j];
            v1 = new Vect(poly.vertex[face.slice(-1)[0]]);
            for (vi = k = 0, ref2 = face.length; 0 <= ref2 ? k < ref2 : k > ref2; vi = 0 <= ref2 ? ++k : --k) {
                v2 = new Vect(poly.vertex[face[vi]]);
                lines.push([v1, v2]);
                v1 = v2;
            }
        }
        system = MeshBuilder.CreateLineSystem('faces', {
            lines: lines
        });
        system.scaling = new Vector3(1.005, 1.005, 1.005);
        system.color = color;
        mesh.addChild(system);
        return system;
    };

    Scene.prototype.showIndices = function(mesh, poly) {
        var c, ctr, d, fi, j, k, len, len1, normals, ref1, ref2, results, vi, vx;
        ref1 = poly.vertex;
        for (vi = j = 0, len = ref1.length; j < len; vi = ++j) {
            vx = ref1[vi];
            d = Mesh.CreatePolyhedron("" + vi, {
                custom: generate('O').scale(0.1)
            }, this);
            d.material = this.vertIndexMat;
            mesh.addChild(d);
            d.locallyTranslate(poly.vert(vi));
            d.lookAt(poly.vert(vi).plus(new Vect(poly.vertexNormal(vi))));
            this.label(d);
        }
        normals = poly.normals();
        ref2 = poly.centers();
        results = [];
        for (fi = k = 0, len1 = ref2.length; k < len1; fi = ++k) {
            ctr = ref2[fi];
            c = Mesh.CreatePolyhedron("" + fi, {
                custom: generate('C').scale(0.1)
            }, this);
            c.material = this.faceIndexMat;
            mesh.addChild(c);
            c.locallyTranslate(new Vect(ctr));
            c.lookAt(new Vect(ctr).plus(normals[fi]));
            results.push(this.label(c));
        }
        return results;
    };

    Scene.prototype.label = function(mesh, name) {
        var text;
        if (name == null) {
            name = mesh.name;
        }
        text = new GUI.TextBlock();
        text.text = name;
        text.color = "black";
        text.style = this.style;
        this.ui.addControl(text);
        return text.linkWithMesh(mesh);
    };

    return Scene;

})(babylon.Scene);

module.exports = Scene;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/scene.coffee