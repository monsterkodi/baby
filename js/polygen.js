// koffee 1.4.0

/*
00000000    0000000   000      000   000   0000000   00000000  000   000
000   000  000   000  000       000 000   000        000       0000  000
00000000   000   000  000        00000    000  0000  0000000   000 0 000
000        000   000  000         000     000   000  000       000  0000
000         0000000   0000000     000      0000000   00000000  000   000
 */
var PolyGen, Vector3, klog, sqrt, ϕ,
    indexOf = [].indexOf;

klog = require('kxk').klog;

Vector3 = require('babylonjs').Vector3;

sqrt = Math.sqrt;

ϕ = (sqrt(5) - 1) / 2;

PolyGen = (function() {
    function PolyGen() {}

    PolyGen.neighbors = function(poly) {
        var face, i, j, len, neighbors, ni, ref, ref1, ref2, ref3, v, vi;
        neighbors = (function() {
            var i, len, ref, results;
            ref = poly.vertex;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                v = ref[i];
                results.push([]);
            }
            return results;
        })();
        ref = poly.face;
        for (i = 0, len = ref.length; i < len; i++) {
            face = ref[i];
            for (vi = j = 0, ref1 = face.length; 0 <= ref1 ? j < ref1 : j > ref1; vi = 0 <= ref1 ? ++j : --j) {
                ni = (vi + 1) % face.length;
                if (ref2 = face[ni], indexOf.call(neighbors[face[vi]], ref2) < 0) {
                    neighbors[face[vi]].unshift(face[ni]);
                }
                if (ref3 = face[vi], indexOf.call(neighbors[face[ni]], ref3) < 0) {
                    neighbors[face[ni]].push(face[vi]);
                }
            }
        }
        return neighbors;
    };

    PolyGen.vertex = function(poly, vi) {
        return new Vector3(poly.vertex[vi][0], poly.vertex[vi][1], poly.vertex[vi][2]);
    };

    PolyGen.edge = function(poly, v1, v2) {
        return this.vertex(poly, v2).subtract(this.vertex(poly, v1));
    };

    PolyGen.vertexNormal = function(poly, vertexIndex) {
        var i, len, ni, ref, sum;
        sum = new Vector3(0, 0, 0);
        ref = poly.neighbors[vertexIndex];
        for (i = 0, len = ref.length; i < len; i++) {
            ni = ref[i];
            sum.addInPlace(this.edge(poly, vertexIndex, ni));
        }
        sum.normalize();
        return sum;
    };

    PolyGen.calcDepth = function(poly, factor, vertexIndex) {
        var edge, norm;
        norm = this.vertexNormal(poly, vertexIndex);
        edge = this.edge(poly, vertexIndex, poly.neighbors[0][0]);
        return edge.length() * 0.5 * factor;
    };

    PolyGen.truncate = function(poly, factor) {
        var depth, edgeMap, face, fi, i, ii, j, k, l, newFace, ni, nl, numFaces, numVertices, ref, ref1, ref2, ref3, vertexIndex, vi, vp;
        if (factor == null) {
            factor = ϕ;
        }
        edgeMap = {};
        numFaces = poly.face.length;
        depth = this.calcDepth(poly, factor, 0);
        numVertices = poly.vertex.length;
        for (vertexIndex = i = 0, ref = numVertices; 0 <= ref ? i < ref : i > ref; vertexIndex = 0 <= ref ? ++i : --i) {
            if (edgeMap[vertexIndex] != null) {
                edgeMap[vertexIndex];
            } else {
                edgeMap[vertexIndex] = {};
            }
            face = [];
            nl = poly.neighbors[vertexIndex].length;
            for (ii = j = 0, ref1 = nl; 0 <= ref1 ? j < ref1 : j > ref1; ii = 0 <= ref1 ? ++j : --j) {
                ni = poly.neighbors[vertexIndex][ii];
                edgeMap[vertexIndex][ni] = poly.vertex.length;
                vp = this.edge(poly, vertexIndex, ni);
                vp.normalize();
                vp.scaleInPlace(depth);
                vp.addInPlace(this.vertex(poly, vertexIndex));
                face.push(poly.vertex.length);
                poly.vertex.push([vp.x, vp.y, vp.z]);
            }
            poly.face.push(face);
        }
        for (fi = k = 0, ref2 = numFaces; 0 <= ref2 ? k < ref2 : k > ref2; fi = 0 <= ref2 ? ++k : --k) {
            face = poly.face[fi];
            newFace = [];
            for (vi = l = 0, ref3 = face.length; 0 <= ref3 ? l < ref3 : l > ref3; vi = 0 <= ref3 ? ++l : --l) {
                ni = (vi + 1) % face.length;
                newFace.push(edgeMap[face[vi]][face[ni]]);
                newFace.push(edgeMap[face[ni]][face[vi]]);
            }
            poly.face[fi] = newFace;
        }
        poly.neighbors = this.neighbors(poly);
        return poly;
    };

    PolyGen.tetrahedron = {
        neighbors: [[1, 2, 3], [2, 0, 3], [3, 0, 1], [1, 0, 2]],
        face: [[0, 1, 2], [0, 2, 3], [0, 3, 1], [3, 2, 1]],
        vertex: [[0, 1, 0], [0, -1, -sqrt(8 / 9) * 1.5], [-sqrt(2 / 3) * 1.5, -1, sqrt(2 / 9) * 1.5], [sqrt(2 / 3) * 1.5, -1, sqrt(2 / 9) * 1.5]]
    };

    PolyGen.cube = {
        neighbors: [[4, 1, 3], [2, 0, 7], [6, 3, 1], [5, 0, 2], [5, 7, 0], [6, 4, 3], [7, 5, 2], [1, 4, 6]],
        face: [[0, 1, 2, 3], [4, 5, 6, 7], [1, 0, 4, 7], [0, 3, 5, 4], [3, 2, 6, 5], [2, 1, 7, 6]],
        vertex: [[1, 1, -1], [1, -1, -1], [-1, -1, -1], [-1, 1, -1], [1, 1, 1], [-1, 1, 1], [-1, -1, 1], [1, -1, 1]]
    };

    PolyGen.octahedron = {
        neighbors: [[1, 2, 3, 4], [5, 2, 0, 4], [3, 0, 1, 5], [4, 0, 2, 5], [1, 0, 3, 5], [4, 3, 2, 1]],
        face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [5, 2, 1], [5, 3, 2], [5, 4, 3], [5, 1, 4]],
        vertex: [[0, 1, 0], [-1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 0, -1], [0, -1, 0]]
    };

    PolyGen.dodecahedron = function(h) {
        var a, b, s;
        if (h == null) {
            h = ϕ;
        }
        s = ϕ * 1;
        b = ϕ * (1 + h);
        a = ϕ * (1 - h * h);
        return {
            neighbors: [[12, 8, 16], [19, 9, 12], [15, 9, 18], [17, 8, 15], [13, 16, 11], [10, 19, 13], [14, 18, 10], [11, 17, 14], [0, 9, 3], [2, 8, 1], [11, 6, 5], [4, 7, 10], [13, 1, 0], [5, 12, 4], [7, 15, 6], [3, 2, 14], [0, 17, 4], [7, 16, 3], [2, 19, 6], [5, 18, 1]],
            face: [[0, 12, 1, 9, 8], [8, 9, 2, 15, 3], [9, 1, 19, 18, 2], [18, 19, 5, 10, 6], [8, 3, 17, 16, 0], [16, 17, 7, 11, 4], [14, 15, 2, 18, 6], [17, 3, 15, 14, 7], [12, 13, 5, 19, 1], [0, 16, 4, 13, 12], [10, 11, 7, 14, 6], [5, 13, 4, 11, 10]],
            vertex: [[s, s, s], [s, s, -s], [-s, s, -s], [-s, s, s], [s, -s, s], [s, -s, -s], [-s, -s, -s], [-s, -s, s], [0, b, a], [0, b, -a], [0, -b, -a], [0, -b, a], [b, a, 0], [b, -a, 0], [-b, -a, 0], [-b, a, 0], [a, 0, b], [-a, 0, b], [-a, 0, -b], [a, 0, -b]]
        };
    };

    PolyGen.icosahedron = function() {
        return {
            neighbors: [[4, 1, 7, 9, 8], [0, 4, 11, 10, 7], [3, 6, 10, 11, 5], [2, 5, 8, 9, 6], [5, 11, 1, 0, 8], [8, 3, 2, 11, 4], [7, 10, 2, 3, 9], [9, 0, 1, 10, 6], [4, 0, 9, 3, 5], [6, 3, 8, 0, 7], [7, 1, 11, 2, 6], [5, 2, 10, 1, 4]],
            face: [[0, 4, 1], [0, 1, 7], [1, 11, 10], [0, 9, 8], [1, 10, 7], [0, 7, 9], [0, 8, 4], [1, 4, 11], [2, 3, 6], [2, 5, 3], [2, 10, 11], [3, 8, 9], [2, 6, 10], [3, 9, 6], [3, 5, 8], [2, 11, 5], [6, 7, 10], [7, 6, 9], [4, 5, 11], [5, 4, 8]],
            vertex: [[0, 1, ϕ], [0, 1, -ϕ], [0, -1, -ϕ], [0, -1, ϕ], [1, ϕ, 0], [1, -ϕ, 0], [-1, -ϕ, 0], [-1, ϕ, 0], [ϕ, 0, 1], [-ϕ, 0, 1], [-ϕ, 0, -1], [ϕ, 0, -1]]
        };
    };

    return PolyGen;

})();

module.exports = PolyGen;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdlbi5qcyIsInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQUFBLElBQUEsK0JBQUE7SUFBQTs7QUFRRSxPQUFTLE9BQUEsQ0FBUSxLQUFSOztBQUNULFVBQVksT0FBQSxDQUFRLFdBQVI7O0FBRWQsSUFBQSxHQUFPLElBQUksQ0FBQzs7QUFDWixDQUFBLEdBQUksQ0FBQyxJQUFBLENBQUssQ0FBTCxDQUFBLEdBQVEsQ0FBVCxDQUFBLEdBQVk7O0FBRVY7OztJQUVGLE9BQUMsQ0FBQSxTQUFELEdBQVksU0FBQyxJQUFEO0FBRVIsWUFBQTtRQUFBLFNBQUE7O0FBQWE7QUFBQTtpQkFBQSxxQ0FBQTs7NkJBQUE7QUFBQTs7O0FBQ2I7QUFBQSxhQUFBLHFDQUFBOztBQUNJLGlCQUFVLDJGQUFWO2dCQUNJLEVBQUEsR0FBSyxDQUFDLEVBQUEsR0FBRyxDQUFKLENBQUEsR0FBUyxJQUFJLENBQUM7Z0JBQ25CLFdBQUcsSUFBSyxDQUFBLEVBQUEsQ0FBTCxFQUFBLGFBQWdCLFNBQVUsQ0FBQSxJQUFLLENBQUEsRUFBQSxDQUFMLENBQTFCLEVBQUEsSUFBQSxLQUFIO29CQUNJLFNBQVUsQ0FBQSxJQUFLLENBQUEsRUFBQSxDQUFMLENBQVMsQ0FBQyxPQUFwQixDQUE0QixJQUFLLENBQUEsRUFBQSxDQUFqQyxFQURKOztnQkFFQSxXQUFHLElBQUssQ0FBQSxFQUFBLENBQUwsRUFBQSxhQUFnQixTQUFVLENBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBTCxDQUExQixFQUFBLElBQUEsS0FBSDtvQkFDSSxTQUFVLENBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBTCxDQUFTLENBQUMsSUFBcEIsQ0FBeUIsSUFBSyxDQUFBLEVBQUEsQ0FBOUIsRUFESjs7QUFKSjtBQURKO2VBT0E7SUFWUTs7SUFZWixPQUFDLENBQUEsTUFBRCxHQUFTLFNBQUMsSUFBRCxFQUFPLEVBQVA7ZUFFTCxJQUFJLE9BQUosQ0FBWSxJ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LEVBQVUsQ0FBVixDQVZJLEVBV0osQ0FBQyxDQUFDLENBQUYsRUFBTSxDQUFOLEVBQVMsQ0FBQyxDQUFWLENBWEksRUFZSixDQUFFLENBQUYsRUFBTSxDQUFOLEVBQVMsQ0FBQyxDQUFWLENBWkksQ0FSUjs7SUFGVTs7Ozs7O0FBeUJsQixNQUFNLENBQUMsT0FBUCxHQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIiMjI1xuMDAwMDAwMDAgICAgMDAwMDAwMCAgIDAwMCAgICAgIDAwMCAgIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwMCAgMDAwICAgMDAwXG4wMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgICAgIDAwMCAwMDAgICAwMDAgICAgICAgIDAwMCAgICAgICAwMDAwICAwMDBcbjAwMDAwMDAwICAgMDAwICAgMDAwICAwMDAgICAgICAgIDAwMDAwICAgIDAwMCAgMDAwMCAgMDAwMDAwMCAgIDAwMCAwIDAwMFxuMDAwICAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAwMDAwXG4wMDAgICAgICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAgMDAwICAgICAgMDAwMDAwMCAgIDAwMDAwMDAwICAwMDAgICAwMDBcbiMjI1xuXG57IGtsb2cgfSA9IHJlcXVpcmUgJ2t4aydcbnsgVmVjdG9yMyB9ID0gcmVxdWlyZSAnYmFieWxvbmpzJ1xuXG5zcXJ0ID0gTWF0aC5zcXJ0XG7PlSA9IChzcXJ0KDUpLTEpLzJcbiAgICAgICAgXG5jbGFzcyBQb2x5R2VuXG4gICAgXG4gICAgQG5laWdoYm9yczogKHBvbHkpIC0+XG5cbiAgICAgICAgbmVpZ2hib3JzID0gKFtdIGZvciB2IGluIHBvbHkudmVydGV4KVxuICAgICAgICBmb3IgZmFjZSBpbiBwb2x5LmZhY2VcbiAgICAgICAgICAgIGZvciB2aSBpbiBbMC4uLmZhY2UubGVuZ3RoXVxuICAgICAgICAgICAgICAgIG5pID0gKHZpKzEpICUgZmFjZS5sZW5ndGhcbiAgICAgICAgICAgICAgICBpZiBmYWNlW25pXSBub3QgaW4gbmVpZ2hib3JzW2ZhY2VbdmldXVxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnNbZmFjZVt2aV1dLnVuc2hpZnQgZmFjZVtuaV1cbiAgICAgICAgICAgICAgICBpZiBmYWNlW3ZpXSBub3QgaW4gbmVpZ2hib3JzW2ZhY2VbbmldXVxuICAgICAgICAgICAgICAgICAgICBuZWlnaGJvcnNbZmFjZVtuaV1dLnB1c2ggZmFjZVt2aV0gICAgICAgICAgXG4gICAgICAgIG5laWdoYm9yc1xuICAgICAgICAgICAgICAgIFxuICAgIEB2ZXJ0ZXg6IChwb2x5LCB2aSkgLT5cbiAgICAgICAgXG4gICAgICAgIG5ldyBWZWN0b3IzIHBvbHkudmVydGV4W3ZpXVswXSwgcG9seS52ZXJ0ZXhbdmldWzFdLCBwb2x5LnZlcnRleFt2aV1bMl1cbiAgICAgICAgXG4gICAgQGVkZ2U6IChwb2x5LCB2MSwgdjIpIC0+XG4gICAgICAgIFxuICAgICAgICBAdmVydGV4KHBvbHksIHYyKS5zdWJ0cmFjdCBAdmVydGV4KHBvbHksIHYxKVxuICAgICAgICBcbiAgICBAdmVydGV4Tm9ybWFsOiAocG9seSwgdmVydGV4SW5kZXgpIC0+XG4gICAgICAgIFxuICAgICAgICBzdW0gPSBuZXcgVmVjdG9yMyAwIDAgMFxuICAgICAgICBmb3IgbmkgaW4gcG9seS5uZWlnaGJvcnNbdmVydGV4SW5kZXhdXG4gICAgICAgICAgICBzdW0uYWRkSW5QbGFjZSBAZWRnZSBwb2x5LCB2ZXJ0ZXhJbmRleCwgbmlcbiAgICAgICAgc3VtLm5vcm1hbGl6ZSgpXG4gICAgICAgIHN1bVxuICAgICAgICBcbiAgICBAY2FsY0RlcHRoOiAocG9seSwgZmFjdG9yLCB2ZXJ0ZXhJbmRleCkgLT5cbiAgICAgICAgXG4gICAgICAgIG5vcm0gPSBAdmVydGV4Tm9ybWFsIHBvbHksIHZlcnRleEluZGV4XG4gICAgICAgIGVkZ2UgPSBAZWRnZSBwb2x5LCB2ZXJ0ZXhJbmRleCwgcG9seS5uZWlnaGJvcnNbMF1bMF1cbiAgICAgICAgXG4gICAgICAgIGVkZ2UubGVuZ3RoKCkgKiAwLjUgKiBmYWN0b3JcbiAgICAgICAgXG4gICAgQHRydW5jYXRlOiAocG9seSwgZmFjdG9yPc+VKSAtPlxuXG4gICAgICAgIGVkZ2VNYXAgPSB7fVxuICAgICAgICBcbiAgICAgICAgbnVtRmFjZXMgPSBwb2x5LmZhY2UubGVuZ3RoXG4gICAgICAgIFxuICAgICAgICBkZXB0aCA9IEBjYWxjRGVwdGggcG9seSwgZmFjdG9yLCAwXG4gICAgICAgIFxuICAgICAgICBudW1WZXJ0aWNlcyA9IHBvbHkudmVydGV4Lmxlbmd0aFxuICAgICAgICBmb3IgdmVydGV4SW5kZXggaW4gWzAuLi5udW1WZXJ0aWNlc11cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZWRnZU1hcFt2ZXJ0ZXhJbmRleF0gPz0ge31cbiAgICAgICAgICAgIGZhY2UgPSBbXVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBubCA9IHBvbHkubmVpZ2hib3JzW3ZlcnRleEluZGV4XS5sZW5ndGhcbiAgICAgICAgICAgIGZvciBpaSBpbiBbMC4uLm5sXVxuICAgICAgICAgICAgICAgIG5pID0gcG9seS5uZWlnaGJvcnNbdmVydGV4SW5kZXhdW2lpXVxuICAgICAgICAgICAgICAgIGVkZ2VNYXBbdmVydGV4SW5kZXhdW25pXSA9IHBvbHkudmVydGV4Lmxlbmd0aFxuICAgICAgICAgICAgICAgIHZwID0gQGVkZ2UgcG9seSwgdmVydGV4SW5kZXgsIG5pXG4gICAgICAgICAgICAgICAgdnAubm9ybWFsaXplKClcbiAgICAgICAgICAgICAgICB2cC5zY2FsZUluUGxhY2UgZGVwdGhcbiAgICAgICAgICAgICAgICB2cC5hZGRJblBsYWNlIEB2ZXJ0ZXggcG9seSwgdmVydGV4SW5kZXhcbiAgICAgICAgICAgICAgICBmYWNlLnB1c2ggcG9seS52ZXJ0ZXgubGVuZ3RoXG4gICAgICAgICAgICAgICAgcG9seS52ZXJ0ZXgucHVzaCBbdnAueCwgdnAueSwgdnAuel1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHBvbHkuZmFjZS5wdXNoIGZhY2VcbiAgICAgICAgXG4gICAgICAgIGZvciBmaSBpbiBbMC4uLm51bUZhY2VzXVxuICAgICAgICAgICAgZmFjZSA9IHBvbHkuZmFjZVtmaV1cbiAgICAgICAgICAgIG5ld0ZhY2UgPSBbXVxuICAgICAgICAgICAgZm9yIHZpIGluIFswLi4uZmFjZS5sZW5ndGhdXG4gICAgICAgICAgICAgICAgbmkgPSAodmkrMSkgJSBmYWNlLmxlbmd0aFxuICAgICAgICAgICAgICAgIG5ld0ZhY2UucHVzaCBlZGdlTWFwW2ZhY2VbdmldXVtmYWNlW25pXV1cbiAgICAgICAgICAgICAgICBuZXdGYWNlLnB1c2ggZWRnZU1hcFtmYWNlW25pXV1bZmFjZVt2aV1dXG4gICAgICAgICAgICBwb2x5LmZhY2VbZmldID0gbmV3RmFjZVxuICAgICAgICAgICAgXG4gICAgICAgIHBvbHkubmVpZ2hib3JzID0gQG5laWdoYm9ycyBwb2x5XG4gICAgICAgICAgICBcbiAgICAgICAgIyBrbG9nIHBvbHlcbiAgICAgICAgcG9seVxuICAgICAgICBcbiAgICAjIDAwMDAwMDAwMCAgMDAwMDAwMDAgIDAwMDAwMDAwMCAgMDAwMDAwMDAgICAgMDAwMDAwMCBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMCAgICAgIDAwMCAgICAgMDAwMDAwMCAgICAwMDAwMDAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwICAgICAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICAjICAgIDAwMCAgICAgMDAwMDAwMDAgICAgIDAwMCAgICAgMDAwICAgMDAwICAwMDAgICAwMDBcbiAgICBcbiAgICBAdGV0cmFoZWRyb246XG4gICAgXG4gICAgICAgIG5laWdoYm9yczogW1sxIDIgM10gWzIgMCAzXSBbMyAwIDFdIFsxIDAgMl1dXHIgICAgICAgIFxuICAgICAgICBmYWNlOiAgW1swIDEgMl0gWzAgMiAzXSBbMCAzIDFdIFszIDIgMV1dXG4gICAgICAgIHZlcnRleDpbXG4gICAgICAgICAgICBbMCwxLDBdXG4gICAgICAgICAgICBbMCwtMSwtc3FydCg4LzkpKjEuNV0gXG4gICAgICAgICAgICBbLXNxcnQoMi8zKSoxLjUsLTEsc3FydCgyLzkpKjEuNV0gXG4gICAgICAgICAgICBbc3FydCgyLzMpKjEuNSwtMSxzcXJ0KDIvOSkqMS41XVxuICAgICAgICBdXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgICAwMDAwMDAwMCAgXG4gICAgIyAwMDAgICAgICAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICBcbiAgICAjIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMDAwMDAgICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgICAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgXG4gICAgIyAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICBcbiAgICBcbiAgICBAY3ViZTpcbiAgICAgICAgXG4gICAgICAgIG5laWdoYm9yczogW1s0IDEgM10gWzIgMCA3XSBbNiAzIDFdIFs1IDAgMl0gWzUgNyAwXSBbNiA0IDNdIFs3IDUgMl0gWzEgNCA2XV1cclxuICAgICAgICBmYWNlOiAgW1swIDEgMiAzXSBbNCA1IDYgN10gWzEgMCA0IDddIFswIDMgNSA0XSBbMyAyIDYgNV0gWzIgMSA3IDZdXVxuICAgICAgICB2ZXJ0ZXg6W1sxLDEsLTFdLCBbMSwtMSwtMV0sIFstMSwtMSwtMV0sIFstMSwxLC0xXSwgWzEgMSAxXSwgWy0xLDEsMV0sIFstMSwtMSwxXSwgWzEsLTEsMV1dXG4gICAgICAgIFxuICAgICMgIDAwMDAwMDAgICAgMDAwMDAwMCAgMDAwMDAwMDAwICAgMDAwMDAwMCAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAwMDAwMDAgIFxuICAgICMgMDAwICAgMDAwICAwMDAgICAgICAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuICAgICMgIDAwMDAwMDAgICAgMDAwMDAwMCAgICAgMDAwICAgICAwMDAgICAwMDAgIFxuICAgIFxuICAgIEBvY3RhaGVkcm9uOlxuICAgICAgICBcbiAgICAgICAgbmVpZ2hib3JzOiBbWzEgMiAzIDRdIFs1IDIgMCA0XSBbMyAwIDEgNV0gWzQgMCAyIDVdIFsxIDAgMyA1XSBbNCAzIDIgMV1dXHIgICAgICAgIFxuICAgICAgICBmYWNlOiAgW1swIDEgMl0gWzAgMiAzXSBbMCAzIDRdIFswIDQgMV0gWzUgMiAxXSBbNSAzIDJdIFs1IDQgM10gWzUgMSA0XV1cbiAgICAgICAgdmVydGV4OltbMCwxLDBdLCBbLTEsMCwwXSwgWzAsMCwxXSwgWzEsMCwwXSwgWzAsMCwtMV0sIFswLC0xLDBdXVxuICAgICAgICBcbiAgICAjIDAwMDAwMDAgICAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgXG4gICAgIyAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAgICAgMDAwICAgICAgIDAwMCAgIDAwMFxuICAgICMgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgIDAwMCAgMDAwMDAwMCAgIDAwMCAgICAgICAwMDAwMDAwMDBcbiAgICAjIDAwMCAgIDAwMCAgMDAwICAgMDAwICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAgICAgMDAwICAgMDAwXG4gICAgIyAwMDAwMDAwICAgICAwMDAwMDAwICAgMDAwMDAwMCAgICAwMDAwMDAwMCAgIDAwMDAwMDAgIDAwMCAgIDAwMFxuICAgIFxuICAgIEBkb2RlY2FoZWRyb246IChoPc+VKSAtPlxuICAgICAgICBcbiAgICAgICAgcyA9IM+VKigxKVxuICAgICAgICBiID0gz5UqKDEraClcbiAgICAgICAgYSA9IM+VKigxLWgqaClcblxuICAgICAgICBuZWlnaGJvcnM6IFtbMTIgOCAxNl0gWzE5IDkgMTJdIFsxNSA5IDE4XSBbMTcgOCAxNV0gWzEzIDE2IDExXSBbMTAgMTkgMTNdIFsxNCAxOCAxMF0gWzExIDE3IDE0XSBbMCA5IDNdIFsyIDggMV0gWzExIDYgNV0gWzQgNyAxMF0gWzEzIDEgMF0gWzUgMTIgNF0gWzcgMTUgNl0gWzMgMiAxNF0gWzAgMTcgNF0gWzcgMTYgM10gWzIgMTkgNl0gWzUgMTggMV1dXHIgICAgICAgIFxuICAgICAgICBmYWNlOiAgW1swIDEyIDEgOSA4XSBbOCA5IDIgMTUgM10gXG4gICAgICAgICAgICAgICAgWzkgMSAxOSAxOCAyXSBbMTggMTkgNSAxMCA2XSBbOCAzIDE3IDE2IDBdIFsxNiAxNyA3IDExIDRdXG4gICAgICAgICAgICAgICAgWzE0IDE1IDIgMTggNl0gWzE3IDMgMTUgMTQgN10gWzEyIDEzIDUgMTkgMV0gWzAgMTYgNCAxMyAxMl1cbiAgICAgICAgICAgICAgICBbMTAgMTEgNyAxNCA2XSBbNSAxMyA0IDExIDEwXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgdmVydGV4OlsgXG4gICAgICAgICAgICBbIHMsICBzLCAgc10gI18wXG4gICAgICAgICAgICBbIHMsICBzLCAtc10gIyAxXG4gICAgICAgICAgICBbLXMsICBzLCAtc10gIyAyXG4gICAgICAgICAgICBbLXMsICBzLCAgc10gIyAzXG4gICAgICAgICAgICBbIHMsIC1zLCAgc10gIyA0XG4gICAgICAgICAgICBbIHMsIC1zLCAtc10gIyA1XG4gICAgICAgICAgICBbLXMsIC1zLCAtc10gIyA2XG4gICAgICAgICAgICBbLXMsIC1zLCAgc10gIyA3XG4gICAgICAgICAgICBbIDAsICBiLCAgYV0gIyA4XG4gICAgICAgICAgICBbIDAsICBiLCAtYV0gIyA5XG4gICAgICAgICAgICBbIDAsIC1iLCAtYV0gIyAxMFxuICAgICAgICAgICAgWyAwLCAtYiwgIGFdICMgMTFcbiAgICAgICAgICAgIFsgYiwgIGEsICAwXSAjIDEyXG4gICAgICAgICAgICBbIGIsIC1hLCAgMF0gIyAxM1xuICAgICAgICAgICAgWy1iLCAtYSwgIDBdICMgMTRcbiAgICAgICAgICAgIFstYiwgIGEsICAwXSAjIDE1XG4gICAgICAgICAgICBbIGEsICAwLCAgYl0gIyAxNlxuICAgICAgICAgICAgWy1hLCAgMCwgIGJdICMgMTdcbiAgICAgICAgICAgIFstYSwgIDAsIC1iXSAjIDE4XG4gICAgICAgICAgICBbIGEsICAwLCAtYl0gIyAxOVxuICAgICAgICBdXG5cbiAgICAjIDAwMCAgIDAwMDAwMDAgICAwMDAwMDAwICAgIDAwMDAwMDAgICAwMDAwMDAwICAgXG4gICAgIyAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIDAwMCAgICAgICAwMDAgICAwMDAgIFxuICAgICMgMDAwICAwMDAgICAgICAgMDAwICAgMDAwICAwMDAwMDAwICAgMDAwMDAwMDAwICBcbiAgICAjIDAwMCAgMDAwICAgICAgIDAwMCAgIDAwMCAgICAgICAwMDAgIDAwMCAgIDAwMCAgXG4gICAgIyAwMDAgICAwMDAwMDAwICAgMDAwMDAwMCAgIDAwMDAwMDAgICAwMDAgICAwMDAgIFxuICAgIFxuICAgIEBpY29zYWhlZHJvbjogLT5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgbmVpZ2hib3JzOiBbWzQgMSA3IDkgOF0gWzAgNCAxMSAxMCA3XSBbMyA2IDEwIDExIDVdIFsyIDUgOCA5IDZdIFs1IDExIDEgMCA4XSBbOCAzIDIgMTEgNF0gWzcgMTAgMiAzIDldIFs5IDAgMSAxMCA2XSBbNCAwIDkgMyA1XSBbNiAzIDggMCA3XSBbNyAxIDExIDIgNl0gWzUgMiAxMCAxIDRdXSAgICAgICAgXG4gICAgICAgIGZhY2U6IFtcbiAgICAgICAgICAgIFswIDQgMV0gWzAgMSA3XSBbMSAxMSAxMF0gWzAgOSA4XVxuICAgICAgICAgICAgWzEgMTAgN10gWzAgNyA5XSBbMCA4IDRdIFsxIDQgMTFdICAgXG4gICAgICAgICAgICBbMiAzIDZdIFsyIDUgM10gWzIgMTAgMTFdIFszIDggOV1cbiAgICAgICAgICAgIFsyIDYgMTBdIFszIDkgNl0gWzMgNSA4XSBbMiAxMSA1XVxuICAgICAgICAgICAgWzYgNyAxMF0gWzcgNiA5XSBbNCA1IDExXSBbNSA0IDhdXG4gICAgICAgIF1cbiAgICAgICAgdmVydGV4OiBbIFxuICAgICAgICAgICAgWyAwLCAgMSwgIM+VXVxuICAgICAgICAgICAgWyAwLCAgMSwgLc+VXVxuICAgICAgICAgICAgWyAwLCAtMSwgLc+VXVxuICAgICAgICAgICAgWyAwLCAtMSwgIM+VXVxuICAgICAgICAgICAgWyAxLCAgz5UsICAwXVxuICAgICAgICAgICAgWyAxLCAtz5UsICAwXVxuICAgICAgICAgICAgWy0xLCAtz5UsICAwXVxuICAgICAgICAgICAgWy0xLCAgz5UsICAwXVxuICAgICAgICAgICAgWyDPlSwgIDAsICAxXVxuICAgICAgICAgICAgWy3PlSwgIDAsICAxXVxuICAgICAgICAgICAgWy3PlSwgIDAsIC0xXVxuICAgICAgICAgICAgWyDPlSwgIDAsIC0xXVxuICAgICAgICBdXG4gICAgICAgIFxubW9kdWxlLmV4cG9ydHMgPSBQb2x5R2VuXG4iXX0=
//# sourceURL=../coffee/polygen.coffee