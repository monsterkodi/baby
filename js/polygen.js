// koffee 1.5.0

/*
00000000    0000000   000      000   000   0000000   00000000  000   000
000   000  000   000  000       000 000   000        000       0000  000
00000000   000   000  000        00000    000  0000  0000000   000 0 000
000        000   000  000         000     000   000  000       000  0000
000         0000000   0000000     000      0000000   00000000  000   000
 */
var PolyGen, Vector3, klog, sqrt, ϕ,
    indexOf = [].indexOf;

klog = require('kxk').klog;

Vector3 = require('babylonjs').Vector3;

sqrt = Math.sqrt;

ϕ = (sqrt(5) - 1) / 2;

PolyGen = (function() {
    function PolyGen() {}

    PolyGen.neighbors = function(poly) {
        var face, i, j, len, neighbors, ni, ref, ref1, ref2, ref3, v, vi;
        neighbors = (function() {
            var i, len, ref, results;
            ref = poly.vertex;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                v = ref[i];
                results.push([]);
            }
            return results;
        })();
        ref = poly.face;
        for (i = 0, len = ref.length; i < len; i++) {
            face = ref[i];
            for (vi = j = 0, ref1 = face.length; 0 <= ref1 ? j < ref1 : j > ref1; vi = 0 <= ref1 ? ++j : --j) {
                ni = (vi + 1) % face.length;
                if (ref2 = face[ni], indexOf.call(neighbors[face[vi]], ref2) < 0) {
                    neighbors[face[vi]].unshift(face[ni]);
                }
                if (ref3 = face[vi], indexOf.call(neighbors[face[ni]], ref3) < 0) {
                    neighbors[face[ni]].push(face[vi]);
                }
            }
        }
        return neighbors;
    };

    PolyGen.vertex = function(poly, vi) {
        return new Vector3(poly.vertex[vi][0], poly.vertex[vi][1], poly.vertex[vi][2]);
    };

    PolyGen.edge = function(poly, v1, v2) {
        return this.vertex(poly, v2).subtract(this.vertex(poly, v1));
    };

    PolyGen.vertexNormal = function(poly, vertexIndex) {
        var i, len, ni, ref, sum;
        sum = new Vector3(0, 0, 0);
        ref = poly.neighbors[vertexIndex];
        for (i = 0, len = ref.length; i < len; i++) {
            ni = ref[i];
            sum.addInPlace(this.edge(poly, vertexIndex, ni));
        }
        sum.normalize();
        return sum;
    };

    PolyGen.calcDepth = function(poly, factor, vertexIndex) {
        var edge, norm;
        norm = this.vertexNormal(poly, vertexIndex);
        edge = this.edge(poly, vertexIndex, poly.neighbors[0][0]);
        return edge.length() * 0.5 * factor;
    };

    PolyGen.truncate = function(poly, factor) {
        var depth, edgeMap, face, fi, i, ii, j, k, l, newFace, ni, nl, numFaces, numVertices, ref, ref1, ref2, ref3, vertexIndex, vi, vp;
        if (factor == null) {
            factor = ϕ;
        }
        edgeMap = {};
        numFaces = poly.face.length;
        depth = this.calcDepth(poly, factor, 0);
        numVertices = poly.vertex.length;
        for (vertexIndex = i = 0, ref = numVertices; 0 <= ref ? i < ref : i > ref; vertexIndex = 0 <= ref ? ++i : --i) {
            if (edgeMap[vertexIndex] != null) {
                edgeMap[vertexIndex];
            } else {
                edgeMap[vertexIndex] = {};
            }
            face = [];
            nl = poly.neighbors[vertexIndex].length;
            for (ii = j = 0, ref1 = nl; 0 <= ref1 ? j < ref1 : j > ref1; ii = 0 <= ref1 ? ++j : --j) {
                ni = poly.neighbors[vertexIndex][ii];
                edgeMap[vertexIndex][ni] = poly.vertex.length;
                vp = this.edge(poly, vertexIndex, ni);
                vp.normalize();
                vp.scaleInPlace(depth);
                vp.addInPlace(this.vertex(poly, vertexIndex));
                face.push(poly.vertex.length);
                poly.vertex.push([vp.x, vp.y, vp.z]);
            }
            poly.face.push(face);
        }
        for (fi = k = 0, ref2 = numFaces; 0 <= ref2 ? k < ref2 : k > ref2; fi = 0 <= ref2 ? ++k : --k) {
            face = poly.face[fi];
            newFace = [];
            for (vi = l = 0, ref3 = face.length; 0 <= ref3 ? l < ref3 : l > ref3; vi = 0 <= ref3 ? ++l : --l) {
                ni = (vi + 1) % face.length;
                newFace.push(edgeMap[face[vi]][face[ni]]);
                newFace.push(edgeMap[face[ni]][face[vi]]);
            }
            poly.face[fi] = newFace;
        }
        poly.neighbors = this.neighbors(poly);
        return poly;
    };

    PolyGen.tetrahedron = {
        neighbors: [[1, 2, 3], [2, 0, 3], [3, 0, 1], [1, 0, 2]],
        face: [[0, 1, 2], [0, 2, 3], [0, 3, 1], [3, 2, 1]],
        vertex: [[0, 1, 0], [0, -1 - sqrt(8 / 9) * 1.5], [-sqrt(2 / 3) * 1.5, -1, sqrt(2 / 9) * 1.5], [sqrt(2 / 3) * 1.5, -1, sqrt(2 / 9) * 1.5]]
    };

    PolyGen.cube = {
        neighbors: [[4, 1, 3], [2, 0, 7], [6, 3, 1], [5, 0, 2], [5, 7, 0], [6, 4, 3], [7, 5, 2], [1, 4, 6]],
        face: [[0, 1, 2, 3], [4, 5, 6, 7], [1, 0, 4, 7], [0, 3, 5, 4], [3, 2, 6, 5], [2, 1, 7, 6]],
        vertex: [[1, 1, -1], [1, -1, -1], [-1, -1, -1], [-1, 1, -1], [1, 1, 1], [-1, 1, 1], [-1, -1, 1], [1, -1, 1]]
    };

    PolyGen.octahedron = {
        neighbors: [[1, 2, 3, 4], [5, 2, 0, 4], [3, 0, 1, 5], [4, 0, 2, 5], [1, 0, 3, 5], [4, 3, 2, 1]],
        face: [[0, 1, 2], [0, 2, 3], [0, 3, 4], [0, 4, 1], [5, 2, 1], [5, 3, 2], [5, 4, 3], [5, 1, 4]],
        vertex: [[0, 1, 0], [-1, 0, 0], [0, 0, 1], [1, 0, 0], [0, 0, -1], [0, -1, 0]]
    };

    PolyGen.dodecahedron = function(h) {
        var a, b, s;
        if (h == null) {
            h = ϕ;
        }
        s = ϕ * 1;
        b = ϕ * (1 + h);
        a = ϕ * (1 - h * h);
        return {
            neighbors: [[12, 8, 16], [19, 9, 12], [15, 9, 18], [17, 8, 15], [13, 16, 11], [10, 19, 13], [14, 18, 10], [11, 17, 14], [0, 9, 3], [2, 8, 1], [11, 6, 5], [4, 7, 10], [13, 1, 0], [5, 12, 4], [7, 15, 6], [3, 2, 14], [0, 17, 4], [7, 16, 3], [2, 19, 6], [5, 18, 1]],
            face: [[0, 12, 1, 9, 8], [8, 9, 2, 15, 3], [9, 1, 19, 18, 2], [18, 19, 5, 10, 6], [8, 3, 17, 16, 0], [16, 17, 7, 11, 4], [14, 15, 2, 18, 6], [17, 3, 15, 14, 7], [12, 13, 5, 19, 1], [0, 16, 4, 13, 12], [10, 11, 7, 14, 6], [5, 13, 4, 11, 10]],
            vertex: [[s, s, s], [s, s, -s], [-s, s, -s], [-s, s, s], [s, -s, s], [s, -s, -s], [-s, -s, -s], [-s, -s, s], [0, b, a], [0, b, -a], [0, -b, -a], [0, -b, a], [b, a, 0], [b, -a, 0], [-b, -a, 0], [-b, a, 0], [a, 0, b], [-a, 0, b], [-a, 0, -b], [a, 0, -b]]
        };
    };

    PolyGen.icosahedron = function() {
        return {
            neighbors: [[4, 1, 7, 9, 8], [0, 4, 11, 10, 7], [3, 6, 10, 11, 5], [2, 5, 8, 9, 6], [5, 11, 1, 0, 8], [8, 3, 2, 11, 4], [7, 10, 2, 3, 9], [9, 0, 1, 10, 6], [4, 0, 9, 3, 5], [6, 3, 8, 0, 7], [7, 1, 11, 2, 6], [5, 2, 10, 1, 4]],
            face: [[0, 4, 1], [0, 1, 7], [1, 11, 10], [0, 9, 8], [1, 10, 7], [0, 7, 9], [0, 8, 4], [1, 4, 11], [2, 3, 6], [2, 5, 3], [2, 10, 11], [3, 8, 9], [2, 6, 10], [3, 9, 6], [3, 5, 8], [2, 11, 5], [6, 7, 10], [7, 6, 9], [4, 5, 11], [5, 4, 8]],
            vertex: [[0, 1, ϕ], [0, 1 - ϕ], [0, -1 - ϕ], [0, -1, ϕ], [1, ϕ, 0], [1 - ϕ, 0], [-1 - ϕ, 0], [-1, ϕ, 0], [ϕ, 0, 1], [-ϕ, 0, 1], [-ϕ, 0, -1], [ϕ, 0, -1]]
        };
    };

    return PolyGen;

})();

module.exports = PolyGen;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=../coffee/polygen.coffee